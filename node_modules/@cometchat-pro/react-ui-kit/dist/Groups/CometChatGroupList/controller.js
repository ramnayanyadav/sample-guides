"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupListManager = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _chat = require("@cometchat-pro/chat");
var GroupListManager = /*#__PURE__*/function () {
  function GroupListManager(limit, searchKeyword, joinedOnly, tags) {
    (0, _classCallCheck2["default"])(this, GroupListManager);
    (0, _defineProperty2["default"])(this, "groupRequest", null);
    (0, _defineProperty2["default"])(this, "groupListenerId", "grouplist_" + new Date().getTime());
    if (searchKeyword) {
      this.groupRequest = new _chat.CometChat.GroupsRequestBuilder().setLimit(limit).joinedOnly(joinedOnly).setTags(tags).setSearchKeyword(searchKeyword).build();
    } else {
      this.groupRequest = new _chat.CometChat.GroupsRequestBuilder().setLimit(limit).joinedOnly(joinedOnly).setTags(tags).build();
    }
  }
  (0, _createClass2["default"])(GroupListManager, [{
    key: "fetchNextGroups",
    value: function fetchNextGroups() {
      return this.groupRequest.fetchNext();
    }
  }, {
    key: "attachListeners",
    value: function attachListeners(callback) {
      _chat.CometChat.addGroupListener(this.groupListenerId, new _chat.CometChat.GroupListener({
        onGroupMemberScopeChanged: function onGroupMemberScopeChanged(message, changedUser, newScope, oldScope, changedGroup) {
          callback("onGroupMemberScopeChanged", message, changedUser, newScope, oldScope, changedGroup);
        },
        onGroupMemberKicked: function onGroupMemberKicked(message, kickedUser, kickedBy, kickedFrom) {
          callback("onGroupMemberKicked", message, kickedUser, kickedBy, kickedFrom);
        },
        onGroupMemberLeft: function onGroupMemberLeft(message, leavingUser, group) {
          callback("onGroupMemberLeft", message, leavingUser, null, group);
        },
        onGroupMemberBanned: function onGroupMemberBanned(message, bannedUser, bannedBy, bannedFrom) {
          callback("onGroupMemberBanned", message, bannedUser, bannedBy, bannedFrom);
        },
        onMemberAddedToGroup: function onMemberAddedToGroup(message, userAdded, userAddedBy, userAddedIn) {
          callback("onMemberAddedToGroup", message, userAdded, userAddedBy, userAddedIn);
        },
        onGroupMemberJoined: function onGroupMemberJoined(message, joinedUser, joinedGroup) {
          callback("onGroupMemberJoined", message, joinedUser, null, joinedGroup);
        }
      }));
    }
  }, {
    key: "removeListeners",
    value: function removeListeners() {
      _chat.CometChat.removeGroupListener(this.groupListenerId);
    }
  }]);
  return GroupListManager;
}();
exports.GroupListManager = GroupListManager;
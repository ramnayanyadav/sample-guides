"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Hooks = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _chat = require("@cometchat-pro/chat");
var _controller = require("./controller");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Hooks = function Hooks(loggedInUser, handlers, setGroupList, groupListManager, groupCallback, callbackData, handleGroups, limit, searchKeyword, joinedOnly, tags, errorHandler) {
  _react["default"].useEffect(function () {
    _chat.CometChat.getLoggedinUser().then(function (user) {
      var _groupListManager$cur;
      loggedInUser.current = _objectSpread({}, user);
      groupListManager.current = new _controller.GroupListManager(limit, searchKeyword, joinedOnly, tags);
      (_groupListManager$cur = groupListManager.current) === null || _groupListManager$cur === void 0 ? void 0 : _groupListManager$cur.attachListeners(groupCallback);
      setGroupList([]);
      handleGroups();
    })["catch"](function (error) {
      return errorHandler(error);
    });
    return function () {
      if (groupListManager && groupListManager.current && groupListManager.current.removeUserListener && typeof groupListManager.current.removeUserListener === "function") {
        var _groupListManager$cur2;
        (_groupListManager$cur2 = groupListManager.current) === null || _groupListManager$cur2 === void 0 ? void 0 : _groupListManager$cur2.removeGroupListener();
      }
    };
  }, []);
  _react["default"].useEffect(function () {
    var handler = handlers[callbackData === null || callbackData === void 0 ? void 0 : callbackData.name];
    if (handler) return handler.apply(void 0, (0, _toConsumableArray2["default"])(callbackData === null || callbackData === void 0 ? void 0 : callbackData.args));
  }, [callbackData]);
  _react["default"].useEffect(function () {
    if (groupListManager && groupListManager.current) {
      groupListManager.current = new _controller.GroupListManager(limit, searchKeyword, joinedOnly, tags);
      setGroupList([]);
      handleGroups();
    }
  }, [limit, searchKeyword, joinedOnly, tags === null || tags === void 0 ? void 0 : tags.length]);
};
exports.Hooks = Hooks;
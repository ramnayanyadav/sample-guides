"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Hooks = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _chat = require("@cometchat-pro/chat");
var _controller = require("./controller");
var _CometChatConversationEvents = require("../CometChatConversationEvents");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Hooks = function Hooks(conversationType, limit, tags, userAndGroupTags, setConversationList, conversationCallback, conversationListManager, handlers, callbackData, loggedInUser, handleConversations, confirmDelete) {
  (0, _react.useEffect)(function () {
    _chat.CometChat.getLoggedinUser().then(function (user) {
      loggedInUser.current = _objectSpread({}, user);
    })["catch"](function (error) {
      _CometChatConversationEvents.CometChatConversationEvents.emit(_CometChatConversationEvents.CometChatConversationEvents.onError, error);
    });
  }, []);
  (0, _react.useEffect)(function () {
    try {
      var _conversationListMana;
      conversationListManager.current = new _controller.ConversationListManager({
        conversationType: conversationType,
        limit: limit,
        tags: tags,
        userAndGroupTags: userAndGroupTags
      });
      (_conversationListMana = conversationListManager.current) === null || _conversationListMana === void 0 ? void 0 : _conversationListMana.attachListeners(conversationCallback);
      setConversationList([]);
      handleConversations();
      return function () {
        var _conversationListMana2;
        if (conversationListManager !== null && conversationListManager !== void 0 && (_conversationListMana2 = conversationListManager.current) !== null && _conversationListMana2 !== void 0 && _conversationListMana2.removeListeners) {
          conversationListManager.current.removeListeners();
        }
      };
    } catch (e) {
      _CometChatConversationEvents.CometChatConversationEvents.emit(_CometChatConversationEvents.CometChatConversationEvents.onError, e);
    }
  }, [conversationType, limit, tags === null || tags === void 0 ? void 0 : tags.length, userAndGroupTags]);
  (0, _react.useEffect)(function () {
    try {
      var handler = handlers[callbackData === null || callbackData === void 0 ? void 0 : callbackData.name];
      if (handler) return handler.apply(void 0, (0, _toConsumableArray2["default"])(callbackData === null || callbackData === void 0 ? void 0 : callbackData.args));
    } catch (e) {
      throw e;
    }
  }, [callbackData]);
};
exports.Hooks = Hooks;
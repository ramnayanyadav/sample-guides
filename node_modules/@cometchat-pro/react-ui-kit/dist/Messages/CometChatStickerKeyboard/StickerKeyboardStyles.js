"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StickerKeyboardStyles = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _Shared = require("../../Shared");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/**
 * @class StickerKeyboardStyles
 * @param {String} categoryBackground
 * @param {String} emptyTextFont
 * @param {String} emptyTextColor
 * @param {String} errorTextFont
 * @param {String} errorTextColor
 * @param {String} loadingTextColor
 * @param {String} loadingTextFont
 */var StickerKeyboardStyles = /*#__PURE__*/function (_BaseStyles) {
  (0, _inherits2["default"])(StickerKeyboardStyles, _BaseStyles);
  var _super = _createSuper(StickerKeyboardStyles);
  function StickerKeyboardStyles(_ref) {
    var _this;
    var _ref$categoryBackgrou = _ref.categoryBackground,
      categoryBackground = _ref$categoryBackgrou === void 0 ? "" : _ref$categoryBackgrou,
      _ref$emptyTextFont = _ref.emptyTextFont,
      emptyTextFont = _ref$emptyTextFont === void 0 ? "" : _ref$emptyTextFont,
      _ref$emptyTextColor = _ref.emptyTextColor,
      emptyTextColor = _ref$emptyTextColor === void 0 ? "" : _ref$emptyTextColor,
      _ref$errorTextFont = _ref.errorTextFont,
      errorTextFont = _ref$errorTextFont === void 0 ? "" : _ref$errorTextFont,
      _ref$errorTextColor = _ref.errorTextColor,
      errorTextColor = _ref$errorTextColor === void 0 ? "" : _ref$errorTextColor,
      _ref$loadingTextColor = _ref.loadingTextColor,
      loadingTextColor = _ref$loadingTextColor === void 0 ? "" : _ref$loadingTextColor,
      _ref$loadingTextFont = _ref.loadingTextFont,
      loadingTextFont = _ref$loadingTextFont === void 0 ? "" : _ref$loadingTextFont,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? "100%" : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? "auto" : _ref$height,
      _ref$background = _ref.background,
      background = _ref$background === void 0 ? "" : _ref$background,
      _ref$border = _ref.border,
      border = _ref$border === void 0 ? "none" : _ref$border,
      _ref$borderRadius = _ref.borderRadius,
      borderRadius = _ref$borderRadius === void 0 ? "8px" : _ref$borderRadius,
      _ref$activeBackground = _ref.activeBackground,
      activeBackground = _ref$activeBackground === void 0 ? "" : _ref$activeBackground;
    (0, _classCallCheck2["default"])(this, StickerKeyboardStyles);
    _this = _super.call(this, {
      width: width,
      height: height,
      background: background,
      activeBackground: activeBackground,
      border: border,
      borderRadius: borderRadius
    });
    _this.categoryBackground = categoryBackground;
    _this.emptyTextFont = emptyTextFont;
    _this.emptyTextColor = emptyTextColor;
    _this.errorTextFont = errorTextFont;
    _this.errorTextColor = errorTextColor;
    _this.loadingTextColor = loadingTextColor;
    _this.loadingTextFont = loadingTextFont;
    return _this;
  }
  return (0, _createClass2["default"])(StickerKeyboardStyles);
}(_Shared.BaseStyles);
exports.StickerKeyboardStyles = StickerKeyboardStyles;
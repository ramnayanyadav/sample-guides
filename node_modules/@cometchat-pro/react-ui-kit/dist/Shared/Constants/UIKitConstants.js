"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wordBoundary = exports.urlPattern = exports.phoneNumPattern = exports.messageConstants = exports.getMetadataByKey = exports.getExtensionsData = exports.emailPattern = exports.bytesToSize = exports.UserStatusConstants = exports.UserOptionConstants = exports.ReceiverTypeConstants = exports.MetadataKey = exports.MetadataConstants = exports.MessageTypeConstants = exports.MessageTimeAlignmentConstants = exports.MessageStatusConstants = exports.MessageOptionForConstants = exports.MessageOptionConstants = exports.MessageListAlignmentConstants = exports.MessageCategoryConstants = exports.MessageBubbleAlignmentConstants = exports.GroupsConstants = exports.GroupTypeConstants = exports.GroupOptionConstants = exports.GroupMemberScope = exports.GroupMemberOptionConstants = exports.ConversationTypeConstants = exports.ConversationOptionConstants = void 0;
var _chat = require("@cometchat-pro/chat");
var MessageCategoryConstants = {
  message: _chat.CometChat.CATEGORY_MESSAGE,
  //referring to sdk constant variable
  custom: _chat.CometChat.CATEGORY_CUSTOM,
  action: _chat.CometChat.CATEGORY_ACTION,
  call: _chat.CometChat.CATEGORY_CALL
};
exports.MessageCategoryConstants = MessageCategoryConstants;
var MessageTypeConstants = {
  text: _chat.CometChat.MESSAGE_TYPE.TEXT,
  file: _chat.CometChat.MESSAGE_TYPE.FILE,
  image: _chat.CometChat.MESSAGE_TYPE.IMAGE,
  audio: _chat.CometChat.MESSAGE_TYPE.AUDIO,
  video: _chat.CometChat.MESSAGE_TYPE.VIDEO,
  groupMember: _chat.CometChat.ACTION_TYPE.TYPE_GROUP_MEMBER,
  messageEdited: _chat.CometChat.ACTION_TYPE.MESSAGE_EDITED,
  messageDeleted: _chat.CometChat.ACTION_TYPE.MESSAGE_DELETED,
  poll: "extension_poll",
  sticker: "extension_sticker",
  document: "extension_document",
  whiteboard: "extension_whiteboard",
  meeting: "meeting",
  location: "location"
};
exports.MessageTypeConstants = MessageTypeConstants;
var ReceiverTypeConstants = {
  user: _chat.CometChat.RECEIVER_TYPE.USER,
  group: _chat.CometChat.RECEIVER_TYPE.GROUP
};
exports.ReceiverTypeConstants = ReceiverTypeConstants;
var UserStatusConstants = {
  online: _chat.CometChat.USER_STATUS.ONLINE,
  offline: _chat.CometChat.USER_STATUS.ONLINE
};
exports.UserStatusConstants = UserStatusConstants;
var MessageOptionConstants = {
  editMessage: "editMessage",
  deleteMessage: "deleteMessage",
  replyMessage: "replyMessage",
  replyInThread: "replyInThread",
  translateMessage: "translateMessage",
  reactToMessage: "reactToMessage",
  messageInformation: "messageInformation",
  copyMessage: "copyMessage",
  shareMessage: "shareMessage",
  forwardMessage: "forwardMessage",
  sendMessagePrivately: "sendMessagePrivately",
  replyMessagePrivately: "replyMessagePrivately"
};
exports.MessageOptionConstants = MessageOptionConstants;
var MessageOptionForConstants = {
  sender: "sender",
  receiver: "receiver",
  both: "both"
};
exports.MessageOptionForConstants = MessageOptionForConstants;
var MessageListAlignmentConstants = {
  left: "left",
  standard: "standard",
  leftAligned: "leftAligned"
};
exports.MessageListAlignmentConstants = MessageListAlignmentConstants;
var MessageBubbleAlignmentConstants = {
  left: "left",
  right: "right",
  center: "center"
};
exports.MessageBubbleAlignmentConstants = MessageBubbleAlignmentConstants;
var MessageTimeAlignmentConstants = {
  top: "top",
  bottom: "bottom"
};
exports.MessageTimeAlignmentConstants = MessageTimeAlignmentConstants;
var MessageStatusConstants = Object.freeze({
  inprogress: "inprogress",
  success: "success"
});
exports.MessageStatusConstants = MessageStatusConstants;
var messageConstants = {
  maximumNumOfMessages: 50,
  liveReactionTimeout: 1500
};
exports.messageConstants = messageConstants;
var wordBoundary = {
  start: "(?:^|:|;|'|\"|,|{|}|\\.|\\s|\\!|\\?|\\(|\\)|\\[|\\]|\\*)",
  end: "(?=$|:|;|'|\"|,|{|}|\\.|\\s|\\!|\\?|\\(|\\)|\\[|\\]|\\*)"
};
exports.wordBoundary = wordBoundary;
var emailPattern = new RegExp(wordBoundary.start + "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}" + wordBoundary.end, "gi");
exports.emailPattern = emailPattern;
var urlPattern = new RegExp(wordBoundary.start + "((https?://|www\\.|pic\\.)[-\\w;/?:@&=+$\\|\\_.!~*\\|'()\\[\\]%#,\u263A]+[\\w/#](\\(\\))?)" + wordBoundary.end, "gi");
exports.urlPattern = urlPattern;
var phoneNumPattern = new RegExp(wordBoundary.start + "(?:\\+?(\\d{1,3}))?([-. (]*(\\d{3})[-. )]*)?((\\d{3})[-. ]*(\\d{2,4})(?:[-.x ]*(\\d+))?)" + wordBoundary.end, "gi");
exports.phoneNumPattern = phoneNumPattern;
var MetadataConstants = {
  liveReaction: "live_reaction",
  file: "file",
  extensions: {
    thumbnailGeneration: "thumbnail-generation",
    polls: "polls",
    document: "document",
    whiteboard: "whiteboard",
    xssFilter: "xss-filter",
    dataMasking: "data-masking",
    profanityFilter: "profanity-filter",
    reactions: "reactions",
    linkPreview: "link-preview"
  }
};
exports.MetadataConstants = MetadataConstants;
var GroupOptionConstants = {
  leave: "leave",
  "delete": "delete",
  viewMembers: "viewMembers",
  addMembers: "addMembers",
  bannedMembers: "bannedMembers",
  voiceCall: "voiceCall",
  videoCall: "videoCall",
  viewInformation: "viewInformation"
};
exports.GroupOptionConstants = GroupOptionConstants;
var GroupMemberOptionConstants = {
  joined: "joined",
  left: "left",
  added: "added",
  kick: "kick",
  ban: "ban",
  unban: "unban",
  changeScope: "changeScope"
};
exports.GroupMemberOptionConstants = GroupMemberOptionConstants;
var UserOptionConstants = {
  blockUnblock: "blockUnblock",
  viewProfile: "viewProfile",
  voiceCall: "voiceCall",
  videoCall: "videoCall",
  viewInformation: "viewInformation"
};
exports.UserOptionConstants = UserOptionConstants;
var ConversationOptionConstants = {
  "delete": "delete",
  edit: "edit"
};
exports.ConversationOptionConstants = ConversationOptionConstants;
var ConversationTypeConstants = {
  users: "users",
  groups: "groups",
  both: "both"
};
exports.ConversationTypeConstants = ConversationTypeConstants;
var GroupTypeConstants = {
  "private": _chat.CometChat.GROUP_TYPE.PRIVATE,
  password: _chat.CometChat.GROUP_TYPE.PASSWORD,
  "public": _chat.CometChat.GROUP_TYPE.PUBLIC
};
exports.GroupTypeConstants = GroupTypeConstants;
var GroupMemberScope = {
  admin: _chat.CometChat.GROUP_MEMBER_SCOPE.ADMIN,
  moderator: _chat.CometChat.GROUP_MEMBER_SCOPE.MODERATOR,
  participant: _chat.CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT
};
exports.GroupMemberScope = GroupMemberScope;
var GroupsConstants = {
  MESSAGE_: "message_",
  GROUP_MEMBERS: "members",
  GROUP_MEMBER: "member",
  GROUP_: "group_",
  ENTER_GROUP_NAME: "Name",
  CREATING_MESSSAGE: "Creating...",
  GROUP_PASSWORD_BLANK: "Group password cannot be blank",
  PARTICIPANT: "Participant",
  PUBLIC: "Public",
  PRIVATE: "Private",
  CREATE_GROUP: "Create Group",
  GROUP_LIST_: "grouplist_",
  GROUPS: "Groups",
  GUID: "guid",
  VIEW_MESSAGE_THREAD: "viewMessageThread",
  CLOSE_THREAD_CLICKED: "closeThreadClicked",
  CLOSE_FULL_SCREEN_IMAGE: "closeFullScreenImage",
  VIEW_ACTUAL_IMAGE: "viewActualImage",
  ACTION_TYPE_GROUPMEMBER: "groupMember",
  EDIT: "edit",
  DELETE: "delete",
  MENU_CLICKED: "menuClicked",
  PUBLIC_GROUP: "public",
  PRIVATE_GROUP: "private",
  PROTECTED_GROUP: "protected",
  MEMBER_SCOPE_CHANGED: "memberScopeChanged",
  MEMBERS_ADDED: "membersAdded",
  MEMBER_UNBANNED: "memberUnbanned",
  MEMBERS_UPDATED: "membersUpdated",
  MEMBER_UPDATED: "memberUpdated",
  GROUP_UPDATED: "groupUpdated",
  LEFT_GROUP: "leftGroup",
  DELETE_GROUP: "groupDeleted",
  BREAKPOINT_MIN_WIDTH: "320",
  BREAKPOINT_MAX_WIDTH: "767",
  UID: "uid",
  SEARCH: "Search",
  GROUP_TO_UPDATE: "groupToUpdate",
  SCOPE: "scope",
  GROUP_TO_DELETE: "groupToDelete",
  MEMBERS_COUNT: "membersCount",
  NO_GROUPS_FOUND: "No groups found",
  LOADING_MESSSAGE: "Loading...",
  ERROR: "error",
  GROUP_MEMBER_KICKED: "onGroupMemberKicked",
  HAS_JOINED: "hasJoined",
  CLOSE_CREATE_GROUP_VIEW: "closeCreateGroupView",
  GROUP_CREATED: "groupCreated",
  GROUP_MEMBER_SCOPE_CHANGED: "onGroupMemberScopeChanged",
  GROUP_MEMBER_BANNED: "onGroupMemberBanned",
  GROUP_MEMBER_UNBANNED: "onGroupMemberUnbanned",
  GROUP_MEMBER_ADDED: "onMemberAddedToGroup",
  GROUP_MEMBER_LEFT: "onGroupMemberLeft",
  GROUP_MEMBER_JOINED: "onGroupMemberJoined"
};
exports.GroupsConstants = GroupsConstants;
var MetadataKey = Object.freeze({
  file: "file",
  liveReaction: "live_reaction",
  extension: "extensions",
  extensions: {
    thumbnailGeneration: "thumbnail-generation",
    polls: "polls",
    document: "document",
    whiteboard: "whiteboard",
    xssfilter: "xss-filter",
    datamasking: "data-masking",
    profanityfilter: "profanity-filter",
    reactions: "reactions",
    linkpreview: "link-preview",
    smartReply: "smart-reply",
    REPLY_POSITIVE: "reply_positive",
    REPLY_NEUTRAL: "reply_neutral",
    REPLY_NEGATIVE: "reply_negative"
  },
  metadata: "metadata",
  injected: "@injected",
  links: "links"
});
exports.MetadataKey = MetadataKey;
var getExtensionsData = function getExtensionsData(message, extensionKey) {
  if (message !== null && message !== void 0 && message.hasOwnProperty("metadata")) {
    var metadata = message.metadata;
    var injectedObject = metadata["@injected"];
    if (injectedObject && injectedObject.hasOwnProperty("extensions")) {
      var extensionsObject = injectedObject["extensions"];
      if (extensionsObject && extensionsObject.hasOwnProperty(extensionKey)) {
        return extensionsObject[extensionKey];
      }
    }
  }
  return null;
};
exports.getExtensionsData = getExtensionsData;
var getMetadataByKey = function getMetadataByKey(message, metadataKey) {
  if (message.hasOwnProperty("metadata")) {
    var metadata = message["metadata"];
    if (metadata.hasOwnProperty(metadataKey)) {
      return metadata[metadataKey];
    }
  }
  return null;
};
exports.getMetadataByKey = getMetadataByKey;
var bytesToSize = function bytesToSize(bytes) {
  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  if (bytes === 0) return "0 Bytes";
  var k = 1024;
  var dm = decimals < 0 ? 0 : decimals;
  var sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
  var i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
};
exports.bytesToSize = bytesToSize;
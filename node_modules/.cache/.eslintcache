[{"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/CONSTANTS.js":"1","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomMessageBubble/index.js":"2","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/home/index.js":"3","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomMessageBubble/hook.js":"4","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomMessageTypes/hook.js":"5","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/MessageTheme/index.js":"6","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomSoundManager/index.js":"7","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/index.js":"8","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/App.js":"9","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/reportWebVitals.js":"10","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/index.js":"11","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/home/hook.js":"12","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/home/style.js":"13","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/home/MessageConstant.js":"14","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomMessageBubble/style.js":"15","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomLoadingState/index.js":"16","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomErrorState/index.js":"17","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomEmptyState/index.js":"18","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/MessageAlignment/index.js":"19","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/ExcludeMessageOptions/index.js":"20","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/ExcludeMessageTypes/index.js":"21","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomMessageTypes/index.js":"22","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomErrorState/style.js":"23","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomLoadingState/style.js":"24","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomEmptyState/style.js":"25","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/MessageAlignment/hook.js":"26","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomSoundManager/hook.js":"27","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/ExcludeMessageOptions/hook.js":"28","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/ExcludeMessageOptions/style.js":"29","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/ExcludeMessageTypes/hook.js":"30","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/MessageTheme/hook.js":"31","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomLoadingState/hooks.js":"32","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/MessageAlignment/style.js":"33"},{"size":142,"mtime":1671157591025,"results":"34","hashOfConfig":"35"},{"size":3786,"mtime":1671703049377,"results":"36","hashOfConfig":"35"},{"size":27214,"mtime":1671624706956,"results":"37","hashOfConfig":"35"},{"size":1155,"mtime":1671159442916,"results":"38","hashOfConfig":"35"},{"size":860,"mtime":1671159133330,"results":"39","hashOfConfig":"35"},{"size":1953,"mtime":1671703006623,"results":"40","hashOfConfig":"35"},{"size":1136,"mtime":1671764966812,"results":"41","hashOfConfig":"35"},{"size":1929,"mtime":1671163008418,"results":"42","hashOfConfig":"35"},{"size":301,"mtime":1669027607505,"results":"43","hashOfConfig":"35"},{"size":362,"mtime":1667550216866,"results":"44","hashOfConfig":"35"},{"size":162,"mtime":1667651765181,"results":"45","hashOfConfig":"35"},{"size":2401,"mtime":1669633250590,"results":"46","hashOfConfig":"35"},{"size":4064,"mtime":1669789757552,"results":"47","hashOfConfig":"35"},{"size":820,"mtime":1668066189076,"results":"48","hashOfConfig":"35"},{"size":595,"mtime":1671616566033,"results":"49","hashOfConfig":"35"},{"size":1180,"mtime":1671608826986,"results":"50","hashOfConfig":"35"},{"size":1108,"mtime":1671608762182,"results":"51","hashOfConfig":"35"},{"size":926,"mtime":1671608975025,"results":"52","hashOfConfig":"35"},{"size":1229,"mtime":1671617503039,"results":"53","hashOfConfig":"35"},{"size":15080,"mtime":1671764683483,"results":"54","hashOfConfig":"35"},{"size":3350,"mtime":1671764052466,"results":"55","hashOfConfig":"35"},{"size":2901,"mtime":1671687373938,"results":"56","hashOfConfig":"35"},{"size":558,"mtime":1667697160088,"results":"57","hashOfConfig":"35"},{"size":564,"mtime":1667697146416,"results":"58","hashOfConfig":"35"},{"size":558,"mtime":1667802226482,"results":"59","hashOfConfig":"35"},{"size":1077,"mtime":1669632170215,"results":"60","hashOfConfig":"35"},{"size":904,"mtime":1669631987393,"results":"61","hashOfConfig":"35"},{"size":1122,"mtime":1670221319356,"results":"62","hashOfConfig":"35"},{"size":766,"mtime":1669727501367,"results":"63","hashOfConfig":"35"},{"size":1086,"mtime":1671695667949,"results":"64","hashOfConfig":"35"},{"size":1077,"mtime":1669632196071,"results":"65","hashOfConfig":"35"},{"size":908,"mtime":1671603647586,"results":"66","hashOfConfig":"35"},{"size":470,"mtime":1671612422920,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"1bu9ms2",{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"71"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"71"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"71"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"71"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"71"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"71"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"71"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"71"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"71"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/CONSTANTS.js",[],[],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomMessageBubble/index.js",["189","190","191","192","193"],[],"import React from \"react\";\n\nimport {\n  CometChatMessageList,\n  CometChatMessageBubble,\n  CometChatMessageTemplate,\n  CometChatMessages,\n  getExtensionsData,\n  MetadataConstants,\n} from \"react-ui-kit-testing\";\n\nimport { Hook } from \"./hook\";\n\nimport {\n  messageTextStyle,\n  paymentContainerStyle,\n  linkPreviewStyle,\n} from \"./style\";\n\nimport {\n  alignmentContainerStyle,\n  buttonContainerStyle,\n  buttonStyle,\n} from \"../MessageAlignment/style.js\";\n\nconst CustomMessageBubble = (props) => {\n  const [user, setUser] = React.useState(null);\n  const [group, setGroup] = React.useState(null);\n  //const [richMediaObject, setLinkPreviewObject] = React.useState();\n\n  const [bool, setBool] = React.useState(false);\n\n  const customBubbleHandler = () => {\n    setBool(true);\n  };\n\n  const defaultBubbleHandler = () => {\n    setBool(false);\n  };\n\n  const richMediaObject = React.useRef();\n  let messageTypes = CometChatMessageTemplate.getDefaultTypes();\n\n  const richMediaMethod = (props) => {\n    const linkPreviewData = getExtensionsData(\n      props?.messageObject,\n\n      MetadataConstants.extensions.linkPreview\n    );\n    return linkPreviewData;\n  };\n\n  const customViewTextBubble = (props) => {\n    return (\n      <>\n        <div\n          className=\"message-text\"\n          style={messageTextStyle(richMediaMethod(props))}\n        >\n          {props.messageObject.text}\n        </div>\n        <div\n          className=\"link--preview\"\n          style={linkPreviewStyle(richMediaMethod(props))}\n        >\n          <div className=\"rich__media\">\n            <div class=\"thumbnail\">\n              <img\n                src={richMediaMethod(props)?.links[0]?.image}\n                alt=\"\"\n                height=\"100px\"\n                width=\"100px\"\n              />\n            </div>\n\n            <div className=\"details\">\n              <div className=\"title\">\n                {richMediaMethod(props)?.links[0]?.title}\n              </div>\n              <div className=\"description\">\n                {richMediaMethod(props)?.links[0]?.description}\n              </div>\n\n              <a href={richMediaMethod(props)?.meta?.canonical} target=\"_blank\">\n                View\n              </a>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  const customViewPayment = (props) => {\n    return (\n      <React.Fragment>\n        <div className=\"payment--view\" style={paymentContainerStyle()}>\n          <div className=\"payment--title\">Payment Successful</div>\n          <div className=\"payment--amount\">\n            ₹ {props?.messageObject?.data?.customData?.amount}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  let customMessageTypes = [\n    new CometChatMessageTemplate({\n      type: \"text\",\n      icon: \"\",\n      name: \"Text\",\n      category: \"messsages\",\n      customView: customViewTextBubble,\n      // onActionClick: null,\n    }),\n    new CometChatMessageTemplate({\n      type: \"payment\",\n      icon: \"\",\n      name: \"Payment\",\n      category: \"custom-message\",\n      customView: customViewPayment,\n      // onActionClick: onActionClickPayment,\n    }),\n    ...messageTypes,\n  ];\n\n  Hook(setGroup, setUser);\n\n  return user ? (\n    <div style={alignmentContainerStyle()}>\n      <div>\n        <CometChatMessageList\n          user={user}\n          style={{ width: \"700px\", height: \"400px\", border: \"1px solid black\" }}\n          messageTypes={bool ? customMessageTypes : null}\n        />\n      </div>\n      <div style={buttonContainerStyle()}>\n        <button onClick={defaultBubbleHandler} style={buttonStyle()}>\n          default bubble\n        </button>\n        <button onClick={customBubbleHandler} style={buttonStyle()}>\n          custom bubble\n        </button>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport { CustomMessageBubble };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/home/index.js",["194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213"],[],"import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink,\n  Routes,\n} from \"react-router-dom\";\n\nimport { useNavigate } from \"react-router-dom\";\n\nimport {\n  MessagesConfiguration,\n  CometChatTheme,\n  getExtensionsData,\n  MetadataConstants,\n  CometChatMessageTemplate,\n  CustomMessage,\n  CometChatMessageEvents,\n  MessageStatus,\n  CometChatSoundManager,\n  MessageListConfiguration,\n} from \"react-ui-kit-testing\";\n\nimport { getUnixTimestamp, ID } from \"./MessageConstant\";\nimport { Hook } from \"./hook\";\n\nimport icon from \"./resources/empty.svg\";\n\nimport audio from \"./resources/audio.mp3\";\n\nimport {\n  headerContainerStyle,\n  navLinkStyle,\n  paymentViewStyle,\n  paymentTitleStyle,\n  paymentAmountStyle,\n  messagePreviewContainerStyle,\n  previewTitleStyle,\n  previewImageStyle,\n  messageTextStyle,\n  paymentContainerStyle,\n  paymentHeaderStyle,\n  paymentInputStyle,\n  paymentButtonStyle,\n  closeIconStyle,\n  inputFieldStyle,\n  sendButtonStyle,\n  gifBoardStyle,\n  gfyCloseIconStyle,\n  bitlyInputContainerStyle,\n} from \"./style\";\n\nimport { linkPreviewStyle } from \"../guides/CustomMessageBubble/style\";\n\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CustomErrorState } from \"../guides/CustomErrorState\";\nimport { CustomLoadingState } from \"../guides/CustomLoadingState\";\nimport { CustomEmptyState } from \"../guides/CustomEmptyState\";\nimport { MessageAlignment } from \"../guides/MessageAlignment\";\nimport { CustomSoundManager } from \"../guides/CustomSoundManager\";\nimport { ExcludeMessageOptions } from \"../guides/ExcludeMessageOptions\";\nimport { ExcludeMessageTypes } from \"../guides/ExcludeMessageTypes\";\nimport { CustomMessageTypes } from \"../guides/CustomMessageTypes\";\nimport { MessageTheme } from \"../guides/MessageTheme\";\nimport { CustomMessageBubble } from \"../guides/CustomMessageBubble\";\n\nconst Home = () => {\n  // const [amount, setAmount] = React.useState(\"\");\n  const [user, setUser] = React.useState(null);\n  const [group, setGroup] = React.useState(null);\n  const [launchGfy, setGfy] = React.useState(false);\n  const [launchPayment, setPayment] = React.useState(false);\n  const [gif, setGifList] = React.useState(null);\n  const [giphy, setGiphy] = React.useState(null);\n  const [launchGiphy, setlaunchGiphy] = React.useState(false);\n  const [launchBitly, setLaunchBitly] = React.useState(false);\n  const [bitlyUrl, setBitlyUrl] = React.useState(\n    \"https://calendar.google.com/calendar/u/0/r/week\"\n  );\n  const [bitlyResponseUrl, setBitlyRespondUrl] = React.useState(\"\");\n  const [launchTinyurl, setTinyUrl] = React.useState(false);\n  const [tinyurl, setTinyurl] = React.useState(\n    \"https://calendar.google.com/calendar/u/0/r/week\"\n  );\n  const [stipopList, setStipop] = React.useState([]);\n  const [launchStipop, setLaunchStipop] = React.useState(false);\n\n  const messageStatus = Object.freeze({\n    inprogress: \"inprogress\",\n    success: \"success\",\n  });\n\n  const amount = React.useRef(0);\n\n  const customTextMessage = () => {\n    let textMessage = new CometChat.TextMessage(\n      \"superhero2\",\n      \"https://www.youtube.com\",\n      \"user\"\n    );\n\n    textMessage.setSentAt(getUnixTimestamp());\n    textMessage.setMuid(String(getUnixTimestamp()));\n    CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n      message: textMessage,\n      status: messageStatus.inprogress,\n    });\n\n    CometChat.sendCustomMessage(textMessage)\n      .then((message) => {\n        const messageObject = { ...message };\n        CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n          message: messageObject,\n          status: messageStatus.success,\n        });\n      })\n      .catch((error) => {});\n  };\n\n  /**\n   * custom payment message\n   */\n  const customViewPayment = (props) => (\n    <React.Fragment>\n      <div className=\"payment--view\" style={paymentViewStyle()}>\n        <div className=\"payment--title\" style={paymentTitleStyle()}>\n          Payment Successful\n        </div>\n        <div className=\"payment--amount\" style={paymentAmountStyle()}>\n          ₹ {props?.messageObject?.data?.customData?.amount}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n\n  const onActionClickPayment = () => {\n    setPayment(!launchPayment);\n  };\n\n  const closePayment = () => {\n    setPayment(!launchPayment);\n  };\n\n  const playAudio = (customOutgoingMessageSound) => {\n    if (customOutgoingMessageSound) {\n      CometChatSoundManager.play(\n        CometChatSoundManager.Sound.outgoingMessage,\n        customOutgoingMessageSound\n      );\n    } else {\n      CometChatSoundManager.play(CometChatSoundManager.Sound.outgoingMessage);\n    }\n  };\n\n  const makePayment = () => {\n    if (amount && amount.current) {\n      let receiverId = \"superhero3\";\n      let receiverType = \"user\";\n      const customData = {\n        amount: amount.current,\n      };\n      const customType = \"payment\";\n      const customMessage = new CometChat.CustomMessage(\n        receiverId,\n        receiverType,\n        customType,\n        customData\n      );\n      customMessage.setSentAt(getUnixTimestamp());\n      customMessage.setMuid(String(getUnixTimestamp()));\n      CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n        message: customMessage,\n        status: messageStatus.inprogress,\n      });\n\n      playAudio(audio);\n      amount.current = 0;\n      CometChat.sendCustomMessage(customMessage)\n        .then((message) => {\n          const messageObject = { ...message };\n          CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n            message: messageObject,\n            status: messageStatus.success,\n          });\n          closePayment();\n          console.log(\"payment succeded\", message);\n        })\n        .catch((error) => {});\n      //closePayment();\n    }\n  };\n\n  const paymentMessageComponent = (\n    <React.Fragment>\n      <div className=\"payment\" style={paymentContainerStyle()}>\n        <span\n          onClick={closePayment}\n          style={closeIconStyle()}\n          className=\"closeIcon\"\n        >\n          &times;\n        </span>\n        <h1 className=\"title\" style={paymentHeaderStyle()}>\n          Payment\n        </h1>\n        <div className=\"input--field\" style={inputFieldStyle()}>\n          <input\n            type=\"input\"\n            style={paymentInputStyle()}\n            className=\"input--amout\"\n            onChange={(e) => (amount.current = parseInt(e.target.value))}\n            placeholder=\"Enter amount...\"\n          ></input>\n        </div>\n        <div className=\"send--button\" style={sendButtonStyle()}>\n          <button\n            type=\"button\"\n            style={paymentButtonStyle()}\n            onClick={makePayment}\n          >\n            Send\n          </button>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n\n  /**\n   *  gfycats message types\n   */\n  const gfycatsCustomView = (props) => {\n    return (\n      <div className=\"gif--items\" style={{ margin: \"10px 3px\" }}>\n        <img\n          src={props?.messageObject?.data?.customData?.src}\n          alt=\"gfycats\"\n          width=\"70\"\n          height=\"70\"\n        />\n      </div>\n    );\n  };\n\n  const launchGfycatsboard = () => {\n    setGfy(!launchGfy);\n  };\n  const sendGfycatsMessage = (e) => {\n    if (e) {\n      let receiverId = \"superhero3\";\n      let receiverType = \"user\";\n      const customData = {\n        src: e.target.src,\n      };\n      const customType = \"gfycats\";\n      const customMessage = new CometChat.CustomMessage(\n        receiverId,\n        receiverType,\n        customType,\n        customData\n      );\n      customMessage.setSentAt(getUnixTimestamp());\n      customMessage.setMuid(String(getUnixTimestamp()));\n      CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n        message: customMessage,\n        status: messageStatus.inprogress,\n      });\n      launchGiphyBoard();\n      playAudio(audio);\n      CometChat.sendCustomMessage(customMessage)\n\n        .then((message) => {\n          const messageObject = { ...message };\n          CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n            message: messageObject,\n            status: messageStatus.success,\n          });\n          launchGiphyBoard();\n        })\n        .catch((error) => {});\n    }\n  };\n\n  let gfycatsBoardList = gif?.gfycats?.map((item) => {\n    return (\n      <div\n        className=\"gif--items\"\n        style={{ margin: \"10px 3px\", cursor: \"pointer\" }}\n        key={item?.gfyId}\n      >\n        <img\n          key={item?.gfyId}\n          src={item?.gifUrl}\n          alt=\"Girl in a jacket\"\n          width=\"70\"\n          height=\"70\"\n          onClick={sendGfycatsMessage.bind(item)}\n        />\n      </div>\n    );\n  });\n  const closegfyBoard = () => setGfy(!launchGfy);\n\n  const gfycatsBoardComponent = (\n    <>\n      <div\n        onClick={closegfyBoard.bind(this)}\n        style={gfyCloseIconStyle()}\n        className=\"closeIcon\"\n      >\n        &times;\n      </div>\n      <div className=\"gif--board\" style={gifBoardStyle()}>\n        {gfycatsBoardList}\n      </div>\n    </>\n  );\n\n  /**\n   *\n   * giphy message types\n   */\n  const giphyCustomView = (props) => {\n    return (\n      <div className=\"gif--items\" style={{ margin: \"10px 3px\" }}>\n        <img\n          src={props?.messageObject?.data?.customData?.src}\n          alt=\"giphy\"\n          width=\"70\"\n          height=\"70\"\n        />\n      </div>\n    );\n  };\n\n  const launchGiphyBoard = () => {\n    setlaunchGiphy(!launchGiphy);\n  };\n\n  const sendGiphyMessage = (e) => {\n    if (e) {\n      let receiverId = \"superhero3\";\n      let receiverType = \"user\";\n      const customData = {\n        src: e.target.src,\n      };\n      const customType = \"gfycats\";\n      const customMessage = new CometChat.CustomMessage(\n        receiverId,\n        receiverType,\n        customType,\n        customData\n      );\n      customMessage.setSentAt(getUnixTimestamp());\n      customMessage.setMuid(String(getUnixTimestamp()));\n      CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n        message: customMessage,\n        status: messageStatus.inprogress,\n      });\n      closegfyBoard();\n      playAudio(audio);\n      CometChat.sendCustomMessage(customMessage)\n\n        .then((message) => {\n          const messageObject = { ...message };\n          CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n            message: messageObject,\n            status: messageStatus.success,\n          });\n          closegfyBoard();\n        })\n        .catch((error) => {});\n    }\n  };\n\n  let giphyBoardList = giphy?.map((item) => {\n    return (\n      <div\n        key={item?.id}\n        className=\"gif--items\"\n        style={{ margin: \"10px 3px\", cursor: \"pointer\" }}\n      >\n        <img\n          key={item?.id}\n          src={item?.images?.downsized_medium?.url}\n          alt=\"Girl in a jacket\"\n          width=\"70\"\n          height=\"70\"\n          onClick={sendGiphyMessage.bind(item)}\n        />\n      </div>\n    );\n  });\n\n  let giphyBoardComponent = (\n    <>\n      <div\n        onClick={launchGiphyBoard.bind(this)}\n        style={gfyCloseIconStyle()}\n        className=\"closeIcon\"\n      >\n        &times;\n      </div>\n      <div className=\"giphy--board\" style={gifBoardStyle()}>\n        {giphyBoardList}\n      </div>\n    </>\n  );\n\n  /**\n   * bitly message type\n   */\n  const launchBitlyBoard = () => {\n    setLaunchBitly(!launchBitly);\n  };\n\n  const sendBitlyUrl = (response) => {\n    if (response.minifiedText) {\n      let receiverId = \"superhero3\";\n      let receiverType = \"user\";\n      const customData = {\n        src: response.minifiedText,\n      };\n      const customType = \"bitly\";\n      const customMessage = new CometChat.CustomMessage(\n        receiverId,\n        receiverType,\n        customType,\n        customData\n      );\n      customMessage.setSentAt(getUnixTimestamp());\n      customMessage.setMuid(String(getUnixTimestamp()));\n      CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n        message: customMessage,\n        status: messageStatus.inprogress,\n      });\n\n      launchBitlyBoard();\n      playAudio(audio);\n\n      CometChat.sendCustomMessage(customMessage)\n        .then((message) => {\n          const messageObject = { ...message };\n          CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n            message: messageObject,\n            status: messageStatus.success,\n          });\n          // console.log(\"response?.minifiedText\", response?.minifiedText);\n        })\n        .catch((error) => {\n          console.error(\"response?.minifiedText\", error);\n        });\n    }\n  };\n\n  const fetchUrlHandler = () => {\n    CometChat.callExtension(\"url-shortener-bitly\", \"POST\", \"v1/shorten\", {\n      text: `${bitlyUrl?.value}`,\n    })\n      .then((response) => {\n        // minifiedText in response\n        //console.log(\"bitly resp\", response);\n        sendBitlyUrl(response);\n      })\n      .catch((error) => {\n        // Error occured\n        console.error(\"bitly err\", error);\n      });\n  };\n\n  const bitlyMessageComponent = (\n    <>\n      <div className=\"bitly--input\" style={bitlyInputContainerStyle()}>\n        <span\n          style={{\n            position: \"absolute\",\n            top: \"0px\",\n            right: \"10px\",\n            fontSize: \"30px\",\n            cursor: \"pointer\",\n          }}\n          onClick={launchBitlyBoard}\n        >\n          &times;\n        </span>\n        <input\n          style={{\n            position: \"relative\",\n            display: \"block\",\n            margin: \"0 auto\",\n            width: \"100%\",\n            boxSizing: \"border-box\",\n            textAlign: \"center\",\n            padding: \"10px 0\",\n            borderRadius: \"5px\",\n            outline: \"none\",\n          }}\n          type=\"text\"\n          placeholder=\"Enter url text\"\n          onChange={(e) => setBitlyUrl(e.target)}\n        />\n        <button\n          style={{\n            padding: \"5px 10px\",\n            margin: \"5px auto\",\n            position: \"absolute\",\n            left: \"40%\",\n            background: \"rgb(51,153,255)\",\n            borderRadius: \"5px\",\n          }}\n          onClick={fetchUrlHandler}\n        >\n          Send\n        </button>\n      </div>\n    </>\n  );\n\n  const bitlyCustomViewMessage = (props) => {\n    return props && props.messageObject.data.customData?.src ? (\n      <>\n        <div\n          style={{ color: \"red\", padding: \"5px 10px\", wordBreak: \"break-all\" }}\n        >\n          {\" \"}\n          {props?.messageObject?.data?.customData?.src}\n        </div>\n      </>\n    ) : null;\n  };\n\n  /**\n   * tinyURL custom message type\n   */\n\n  const sendTinyUrl = (response) => {\n    if (response) {\n      let receiverId = \"superhero3\";\n      let receiverType = \"user\";\n      const customData = {\n        src: response,\n      };\n      const customType = \"tinyurl\";\n      const customMessage = new CometChat.CustomMessage(\n        receiverId,\n        receiverType,\n        customType,\n        customData\n      );\n      customMessage.setSentAt(getUnixTimestamp());\n      customMessage.setMuid(String(getUnixTimestamp()));\n      CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n        message: customMessage,\n        status: messageStatus.inprogress,\n      });\n\n      launchTinyurlBoard();\n      // playAudio(audio);\n\n      CometChat.sendCustomMessage(customMessage)\n        .then((message) => {\n          const messageObject = { ...message };\n          CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n            message: messageObject,\n            status: messageStatus.success,\n          });\n          // console.log(\"response?.minifiedText\", response?.minifiedText);\n        })\n        .catch((error) => {\n          console.error(\"response?.minifiedText\", error);\n        });\n    }\n  };\n  const fetchTinyurlMessage = () => {\n    if (tinyurl) {\n      CometChat.callExtension(\"url-shortener-tinyurl\", \"POST\", \"v1/shorten\", {\n        text: `${tinyurl.value}`,\n      })\n        .then((response) => {\n          // minifiedText in response\n          sendTinyUrl(response?.minifiedText);\n          setTinyUrl(\"\");\n        })\n        .catch((error) => {\n          // Error occured\n          console.log(\"tinyurl error\", error);\n        });\n    }\n  };\n\n  const launchTinyurlBoard = () => {\n    setTinyUrl(!launchTinyurl);\n  };\n\n  const tinyurlMessageComponent = (\n    <>\n      <div className=\"bitly--input\" style={bitlyInputContainerStyle()}>\n        <span\n          style={{\n            position: \"absolute\",\n            top: \"0px\",\n            right: \"10px\",\n            fontSize: \"30px\",\n            cursor: \"pointer\",\n          }}\n          onClick={launchTinyurlBoard}\n        >\n          &times;\n        </span>\n        <input\n          style={{\n            position: \"relative\",\n            display: \"block\",\n            margin: \"0 auto\",\n            width: \"100%\",\n            boxSizing: \"border-box\",\n            textAlign: \"center\",\n            padding: \"10px 0\",\n            borderRadius: \"5px\",\n            outline: \"none\",\n          }}\n          type=\"text\"\n          placeholder=\"Enter url text\"\n          onChange={(e) => setTinyurl(e.target)}\n        />\n        <button\n          style={{\n            padding: \"5px 10px\",\n            margin: \"5px auto\",\n            position: \"absolute\",\n            left: \"40%\",\n            background: \"rgb(51,153,255)\",\n            borderRadius: \"5px\",\n          }}\n          onClick={fetchTinyurlMessage}\n        >\n          Send\n        </button>\n      </div>\n    </>\n  );\n\n  const tinyurlCustomViewMessage = (props) => {\n    // console.log(\"props bitly\", props?.messageObject?.data?.customData?.src);\n    return (\n      <>\n        <div\n          style={{ color: \"red\", padding: \"5px 10px\", wordBreak: \"break-all\" }}\n        >\n          {\" \"}\n          {props?.messageObject?.data?.customData?.src}\n        </div>\n      </>\n    );\n  };\n\n  /***\n   * stipop\n   */\n\n  const launchStipopBoard = () => {\n    setLaunchStipop(!launchStipop);\n  };\n\n  const stipopCustomView = (props) => {\n    return (\n      <div className=\"gif--items\" style={{ margin: \"10px 3px\" }}>\n        <img\n          src={props?.messageObject?.data?.customData?.src}\n          alt=\"giphy\"\n          width=\"70\"\n          height=\"70\"\n        />\n      </div>\n    );\n  };\n\n  const sendStipopMessage = (e) => {\n    if (e) {\n      let receiverId = \"superhero3\";\n      let receiverType = \"user\";\n      const customData = {\n        src: e.target.src,\n      };\n      const customType = \"stipop\";\n      const customMessage = new CometChat.CustomMessage(\n        receiverId,\n        receiverType,\n        customType,\n        customData\n      );\n      customMessage.setSentAt(getUnixTimestamp());\n      customMessage.setMuid(String(getUnixTimestamp()));\n      CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n        message: customMessage,\n        status: messageStatus.inprogress,\n      });\n\n      playAudio(audio);\n      CometChat.sendCustomMessage(customMessage)\n\n        .then((message) => {\n          const messageObject = { ...message };\n          CometChatMessageEvents.emit(CometChatMessageEvents.onMessageSent, {\n            message: messageObject,\n            status: messageStatus.success,\n          });\n          launchStipopBoard();\n        })\n        .catch((error) => {});\n    }\n  };\n\n  let stipopBoardList = stipopList?.map((item) => {\n    return (\n      <div\n        key={item?.packageId}\n        className=\"gif--items\"\n        style={{ margin: \"10px 3px\", cursor: \"pointer\" }}\n      >\n        <img\n          key={item?.packageId}\n          src={item?.packageImg}\n          alt=\"Girl in a jacket\"\n          width=\"70\"\n          height=\"70\"\n          onClick={sendStipopMessage.bind(item)}\n        />\n      </div>\n    );\n  });\n\n  let stipopBoardComponent = (\n    <>\n      <div\n        onClick={launchStipopBoard}\n        style={gfyCloseIconStyle()}\n        className=\"closeIcon\"\n      >\n        &times;\n      </div>\n      <div className=\"giphy--board\" style={gifBoardStyle()}>\n        {stipopBoardList}\n      </div>\n    </>\n  );\n\n  /**\n   * tenor custom message types\n   */\n  React.useEffect(() => {\n    const URL = \"v1/trending?offset=1&limit=15\";\n    CometChat.callExtension(\"gifs-tenor\", \"GET\", URL, null)\n      .then((response) => {\n        // GIFs data from Tenor\n        //console.log(\"tenor response\", response);\n      })\n      .catch((error) => {\n        // Error occured\n        //console.log(\"tenor error\", error);\n      });\n  }, []);\n\n  /**\n   * live streaming\n   */\n  const liveStreaming = () => {\n    CometChat.callExtension(\"broadcast\", \"POST\", \"v1/broadcast\", {\n      receiverType: \"user\",\n      receiver: \"superhero3\",\n    })\n      .then((response) => {\n        // Success response\n        console.log(\"live video resp\", response);\n      })\n      .catch((error) => {\n        // Some error occured\n        console.log(\"live video error\", error);\n      });\n  };\n\n  /**\n   * reminder\n   */\n\n  /**\n   * custom message types templates\n   */\n\n  let messageTypes = CometChatMessageTemplate.getDefaultTypes();\n  // let messageTypes=[]\n  let paymentTemplate = new CometChatMessageTemplate({\n    type: \"payment\",\n    icon: icon,\n    name: \"Payment\",\n    category: \"custom messages\",\n    customView: customViewPayment,\n    onActionClick: onActionClickPayment,\n  });\n\n  const textCustomView = () => {\n    return <h3>hii</h3>;\n  };\n\n  let textTemplate = new CometChatMessageTemplate({\n    type: \"text\",\n    icon: icon,\n    name: \"Text\",\n    category: \"messages\",\n    customView: textCustomView,\n    // onActionClick: null,\n  });\n\n  let gifCustomTemplate = new CometChatMessageTemplate({\n    type: \"gfycats\",\n    icon: icon,\n    name: \"Gfycats\",\n    category: \"custom messages\",\n    customView: gfycatsCustomView,\n    onActionClick: launchGfycatsboard,\n  });\n\n  let giphyCustomTemplate = new CometChatMessageTemplate({\n    type: \"giphy\",\n    icon: icon,\n    name: \"Giphy\",\n    category: \"custom messages\",\n    customView: giphyCustomView,\n    onActionClick: launchGiphyBoard,\n  });\n\n  let bitlyCustomTemplate = new CometChatMessageTemplate({\n    type: \"bitly\",\n    icon: icon,\n    name: \"Bitly\",\n    category: \"custom messages\",\n    customView: bitlyCustomViewMessage,\n    onActionClick: launchBitlyBoard,\n  });\n\n  let tinyurlCustomTemplate = new CometChatMessageTemplate({\n    type: \"tinyurl\",\n    icon: icon,\n    name: \"Tinyurl\",\n    category: \"custom messages\",\n    customView: tinyurlCustomViewMessage,\n    onActionClick: launchTinyurlBoard,\n  });\n\n  let stipopCustomTemplate = new CometChatMessageTemplate({\n    type: \"stipop\",\n    icon: icon,\n    name: \"Stipop\",\n    category: \"custom messages\",\n    customView: stipopCustomView,\n    onActionClick: launchStipopBoard,\n  });\n\n  let liveStreamCustomTemplate = new CometChatMessageTemplate({\n    type: \"live stream\",\n    icon: icon,\n    name: \"Live\",\n    category: \"custom messages\",\n    customView: null,\n    onActionClick: liveStreaming,\n  });\n\n  let customMessageTypes = [\n    ...messageTypes,\n    paymentTemplate,\n    gifCustomTemplate,\n    giphyCustomTemplate,\n    bitlyCustomTemplate,\n    tinyurlCustomTemplate,\n    stipopCustomTemplate,\n    liveStreamCustomTemplate,\n  ];\n\n  messageTypes = [\n    ...messageTypes,\n    // textTemplate,\n    paymentTemplate,\n    // gifCustomTemplate,\n    // giphyCustomTemplate,\n    // bitlyCustomTemplate,\n    // tinyurlCustomTemplate,\n    // stipopCustomTemplate,\n    // liveStreamCustomTemplate,\n  ];\n\n  Hook(setGroup, setUser, setGifList, setGiphy, setStipop);\n\n  return (\n    <div>\n      <div className=\"button--links\" style={headerContainerStyle()}>\n        <NavLink\n          title=\"loading\"\n          to=\"/\"\n          className=\"nav-link\"\n          style={navLinkStyle()}\n        >\n          Loading\n        </NavLink>\n        <NavLink\n          title=\"empty\"\n          to=\"/empty\"\n          className=\"nav-link\"\n          style={navLinkStyle()}\n        >\n          Empty\n        </NavLink>\n        <NavLink\n          title=\"error\"\n          to=\"/error\"\n          className=\"nav-link\"\n          style={navLinkStyle()}\n        >\n          Error\n        </NavLink>\n        <NavLink\n          title=\"sound\"\n          to=\"/sound\"\n          className=\"nav-link\"\n          style={navLinkStyle()}\n        >\n          sound\n        </NavLink>\n        <NavLink\n          title=\"alignment\"\n          to=\"/alignment\"\n          className=\"nav-link\"\n          style={navLinkStyle()}\n        >\n          alignment\n        </NavLink>\n        <NavLink\n          title=\"message options\"\n          to=\"/options\"\n          className=\"nav-link\"\n          style={navLinkStyle()}\n        >\n          Message Options\n        </NavLink>\n        <NavLink\n          title=\"message types\"\n          to=\"/message-types\"\n          className=\"nav-link\"\n          style={navLinkStyle()}\n        >\n          Message Types\n        </NavLink>\n        <NavLink\n          title=\"theme\"\n          to=\"/theme\"\n          className=\"nav-link\"\n          style={navLinkStyle()}\n        >\n          Theme\n        </NavLink>\n        <NavLink\n          title=\"bubble\"\n          to=\"/bubble\"\n          className=\"nav-link\"\n          style={navLinkStyle()}\n        >\n          Bubble\n        </NavLink>\n        <NavLink\n          title=\"exclude message types\"\n          to=\"/exclude-message-types\"\n          className=\"nav-link\"\n          style={navLinkStyle()}\n        >\n          Exclude Message Types\n        </NavLink>\n      </div>\n      <Routes>\n        {/* <CustomLoadingState /> */}\n        <Route exact path=\"/\" element={<CustomLoadingState />} />\n        <Route exact path=\"/empty\" element={<CustomEmptyState />} />\n        <Route exact path=\"/error\" element={<CustomErrorState />} />\n        <Route\n          exact\n          path=\"/sound\"\n          element={<CustomSoundManager messageTypes={messageTypes} />}\n        />\n        <Route exact path=\"/alignment\" element={<MessageAlignment />} />\n        <Route exact path=\"/options\" element={<ExcludeMessageOptions />} />\n        <Route\n          exact\n          path=\"/message-types\"\n          element={\n            <CustomMessageTypes\n              user={user}\n              messageTypes={customMessageTypes}\n              launchGfy={launchGfy}\n              paymentMessageComponent={paymentMessageComponent}\n              payment={launchPayment}\n              gfycatsMessageComponent={gfycatsBoardComponent}\n              giphyMessageComponent={giphyBoardComponent}\n              launchGiphy={launchGiphy}\n              launchBitly={launchBitly}\n              bitlyMessageComponent={bitlyMessageComponent}\n              launchTinyurl={launchTinyurl}\n              tinyurlMessageComponent={tinyurlMessageComponent}\n              launchStipop={launchStipop}\n              stipopMessageComponent={stipopBoardComponent}\n            />\n          }\n        />\n        {/* GifycatBoard */}\n        {/* CustomMessageTypes */}\n        <Route exact path=\"/theme\" element={<MessageTheme />} />\n        <Route\n          exact\n          path=\"/bubble\"\n          element={<CustomMessageBubble messageTypes={messageTypes} />}\n        />\n        <Route\n          exact\n          path=\"/exclude-message-types\"\n          element={<ExcludeMessageTypes />}\n        />\n      </Routes>\n    </div>\n  );\n};\n\nexport { Home };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomMessageBubble/hook.js",["214","215","216"],[],"import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport { MetadataConstants, getExtensionsData } from \"react-ui-kit-testing\";\n\nconst Hook = (setGroup, setUser) => {\n  React.useEffect(() => {\n    /**\n     * fetching perticular group\n     */\n    var GUID = \"supergroup\";\n    CometChat.getGroup(GUID).then(\n      (group) => {\n        setGroup(group);\n        console.log(\"Group details fetched successfully:\", group);\n      },\n      (error) => {\n        console.log(\"Group details fetching failed with exception:\", error);\n      }\n    );\n\n    /**\n     * fetching perticualr user user\n     */\n    let UID = \"superhero3\";\n    CometChat.getUser(UID).then(\n      (user) => {\n        setUser(user);\n        console.log(\"User details fetched for user:\", user);\n      },\n      (error) => {\n        console.log(\"User details fetching failed with error:\", error);\n      }\n    );\n    // CometChat.logout().then(\n    //   () => {\n    //     console.log(\"Logout completed successfully\");\n    //   },\n    //   (error) => {\n    //     console.log(\"Logout failed with exception:\", { error });\n    //   }\n    // );\n  }, []);\n};\n\nexport { Hook };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomMessageTypes/hook.js",["217"],[],"import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nconst Hook = (setGroup, setUser) => {\n  React.useEffect(() => {\n    /**\n     * fetching perticular group\n     */\n    var GUID = \"supergroup\";\n    CometChat.getGroup(GUID).then(\n      (group) => {\n        setGroup(group);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n\n    /**\n     * fetching perticualr user user\n     */\n    let UID = \"superhero3\";\n    CometChat.getUser(UID).then(\n      (user) => {\n        setUser(user);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n    // CometChat.logout().then(\n    //   () => {\n    //     console.log(\"Logout completed successfully\");\n    //   },\n    //   (error) => {\n    //     console.log(\"Logout failed with exception:\", { error });\n    //   }\n    // );\n  }, []);\n};\n\nexport { Hook };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/MessageTheme/index.js",["218"],[],"import React from \"react\";\nimport {\n  CometChatConversationsWithMessages,\n  CometChatTheme,\n  Palette,\n} from \"react-ui-kit-testing\";\n\nimport {\n  alignmentContainerStyle,\n  buttonContainerStyle,\n  buttonStyle,\n} from \"../MessageAlignment/style.js\";\n\nimport { Hook } from \"./hook\";\n\nconst MessageTheme = () => {\n  const [user, setUser] = React.useState(null);\n  const [group, setGroup] = React.useState(null);\n\n  const [bool, setTheme] = React.useState(false);\n\n  const customAlignmentHandler = () => {\n    setTheme(false);\n  };\n\n  const defaultAlignmentHandler = () => {\n    setTheme(true);\n  };\n\n  const theme = new CometChatTheme({\n    palette: new Palette({\n      mode: \"dark\",\n      background: {\n        light: \"#fff\",\n        dark: \"#432818\",\n      },\n      primary: {\n        light: \"#dda15e\",\n        dark: \"#dda15e\",\n      },\n\n      accent500: {\n        light: \"#fff\",\n        dark: \"#432818\",\n      },\n      accent600: {\n        light: \"#fff\",\n        dark: \"#39f\",\n      },\n      accent: {\n        light: \"#bc6c25\",\n        dark: \"#B6F0D3\",\n      },\n      accent100: {\n        light: \"#fff\",\n        dark: \"#432818\",\n      },\n      accent50: {\n        light: \"#9e2a2b\",\n        dark: \"#141414\",\n      },\n      accent900: {\n        light: \"ef476f\",\n        dark: \"black\",\n      },\n    }),\n  });\n\n  Hook(setGroup, setUser);\n  return user ? (\n    <div style={alignmentContainerStyle()}>\n      <div>\n        <CometChatConversationsWithMessages\n          user={user}\n          style={{ width: \"700px\", height: \"400px\", border: \"1px solid black\" }}\n          theme={!bool ? theme : null}\n        />\n      </div>\n      <div style={buttonContainerStyle()}>\n        <button onClick={defaultAlignmentHandler} style={buttonStyle()}>\n          default theme\n        </button>\n        <button onClick={customAlignmentHandler} style={buttonStyle()}>\n          custom theme\n        </button>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport { MessageTheme };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomSoundManager/index.js",["219"],[],"import React from \"react\";\n\nimport {\n  CometChatMessages,\n  MessageListConfiguration,\n} from \"react-ui-kit-testing\";\n\nimport audio from \"./resources/audio.mp3\";\nimport incommingAudio from \"./resources/sample-incomming.mp3\";\n\nimport { Hook } from \"./hook\";\n\nconst CustomSoundManager = (props) => {\n  const [_user, setUser] = React.useState(null);\n  const [_group, setGroup] = React.useState(null);\n\n  const messageListConfig = {\n    customIncomingMessageSound: incommingAudio,\n  };\n\n  const composerConfig = {\n    customOutgoingMessageSound: audio,\n  };\n\n  Hook(setGroup, setUser);\n\n  return _user ? (\n    <>\n      <CometChatMessages\n        user={_user}\n        group={_group}\n        alignment={\"standard\"}\n        style={{\n          width: \"600px\",\n          overflow: \"none\",\n          border: \"1px solid black\",\n        }}\n        messageTypes={props?.messageTypes}\n        messageComposerConfiguration={composerConfig}\n        messageListConfiguration={messageListConfig}\n        customIncomingMessageSound={incommingAudio}\n        customOutgoingMessageSound={audio}\n      />\n    </>\n  ) : null;\n};\n\nexport { CustomSoundManager };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/index.js",["220"],[],"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { COMETCHAT_CONSTANTS } from \"./CONSTANTS\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nvar appID = COMETCHAT_CONSTANTS.APP_ID;\nvar region = COMETCHAT_CONSTANTS.REGION;\n\nvar appSetting = new CometChat.AppSettingsBuilder()\n  .subscribePresenceForAllUsers()\n  .setRegion(region)\n  .build();\nCometChat.init(appID, appSetting).then(\n  () => {\n    let user = \"superhero1\";\n    if (user && user != \" \") {\n      var UID = user;\n      var authKey = COMETCHAT_CONSTANTS.AUTH_KEY;\n      // CometChat.logout().then(\n      //   () => {\n      //     console.log(\"Logout completed successfully\");\n      //   },\n      //   (error) => {\n      //     console.log(\"Logout failed with exception:\", { error });\n      //   }\n      // );\n\n      CometChat.getLoggedinUser().then(\n        (user) => {\n          if (!user) {\n            CometChat.login(UID, authKey).then(\n              (user) => {\n                console.log(\"Login Successful:\", { user });\n              },\n              (error) => {\n                console.log(\"Login failed with exception:\", { error });\n              }\n            );\n          }\n        },\n        (error) => {\n          console.log(\"Some Error Occured\", { error });\n        }\n      );\n    }\n\n    const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n    root.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    );\n  },\n\n  (error) => {\n    console.log(\"Initialization failed with error:\", error);\n    // Check the reason for error and take appropriate action.\n  }\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/App.js",["221","222","223"],[],"import \"./App.css\";\nimport { AppComponent } from \"./app\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink,\n  Routes,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <AppComponent />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/reportWebVitals.js",[],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/index.js",[],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/home/hook.js",["224"],[],"import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nconst Hook = (setGroup, setUser, setGifList, setGiphy, setStipop) => {\n  React.useEffect(() => {\n    /**stipop  */\n    let lang = \"english\";\n    let limit = 20;\n    let pageNumber = 1;\n    let contryCode = \"US\";\n\n    const qs = `?lang=${lang}&limit=${limit}&pageNumber=${pageNumber}&countryCode=${contryCode}`;\n\n    CometChat.callExtension(\"stickers-stipop\", \"GET\", \"v1/trending\" + qs, null)\n      .then((response) => {\n        // Stickers in response\n        //console.log(\"stipop resp\", response);\n        setStipop(response.packageList);\n      })\n      .catch((error) => {\n        // Error occured\n        console.log(\"stipop error\", error);\n      });\n\n    /**giphy */\n    const URLgiphy = \"v1/trending?offset=1&limit=15\";\n    CometChat.callExtension(\"gifs-giphy\", \"GET\", URLgiphy, null)\n      .then((response) => {\n        // GIFs data from Giphy\n        //console.log(\"giphy resp\", response);\n        setGiphy(response.data);\n      })\n      .catch((error) => {\n        // Error occured\n        console.error(\"giphy resp\", error);\n      });\n    /** gfycats */\n    const URLgfycats = \"v1/trending?cursor=0\";\n    CometChat.callExtension(\"gifs-gfycat\", \"GET\", URLgfycats, null)\n      .then((response) => {\n        // GIFs data from Gfycat\n        //console.log(\"gif\", response);\n        setGifList(response);\n      })\n      .catch((error) => {\n        // Error occured\n      });\n    /**\n     * fetching perticular group\n     */\n    var GUID = \"supergroup\";\n    CometChat.getGroup(GUID).then(\n      (group) => {\n        setGroup(group);\n        //console.log(\"Group details fetched successfully:\", group);\n      },\n      (error) => {\n        console.error(\"Group details fetching failed with exception:\", error);\n      }\n    );\n\n    /**\n     * fetching perticualr user user\n     */\n    let UID = \"superhero3\";\n    CometChat.getUser(UID).then(\n      (user) => {\n        setUser(user);\n        //console.log(\"User details fetched for user:\", user);\n      },\n      (error) => {\n        console.error(\"User details fetching failed with error:\", error);\n      }\n    );\n    // CometChat.logout().then(\n    //   () => {\n    //     console.log(\"Logout completed successfully\");\n    //   },\n    //   (error) => {\n    //     console.log(\"Logout failed with exception:\", { error });\n    //   }\n    // );\n  }, []);\n};\n\nexport { Hook };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/home/style.js",[],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/home/MessageConstant.js",[],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomMessageBubble/style.js",[],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomLoadingState/index.js",["225","226","227","228"],[],"import React from \"react\";\nimport spinnerIcon from \"./resources/spinner.svg\";\nimport {\n  loadingIconStyle,\n  loadingTextMessageStyle,\n  customLoadingContainerStyle,\n} from \"./style\";\n\nimport {\n  CometChatMessageList,\n  CometChatConversationList,\n  CometChatMessages,\n} from \"react-ui-kit-testing\";\n\nimport { Hooks } from \"./hooks\";\nimport { Hook } from \"../CustomSoundManager/hook\";\n\nconst CustomLoadingState = () => {\n  const [user, setUser] = React.useState(null);\n  const [group, setGroup] = React.useState(null);\n\n  let loadingCustomView = () => (\n    <div\n      className=\"custom--loading--container\"\n      style={customLoadingContainerStyle()}\n    >\n      <i className=\"loading--icon\" style={loadingIconStyle(spinnerIcon)}></i>\n      <p className=\"loading--text\" style={loadingTextMessageStyle()}>\n        loading...\n      </p>\n    </div>\n  );\n\n  Hooks(setUser, setGroup);\n\n  return user ? (\n    <CometChatMessageList\n      user={user}\n      style={{ width: \"700px\", height: \"450px\", border: \"1px solid black\" }}\n      customView={{\n        error: null,\n        loading: loadingCustomView,\n        empty: null,\n      }}\n    />\n  ) : null;\n};\n\nexport { CustomLoadingState };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomErrorState/index.js",["229","230","231","232"],[],"import React from \"react\";\nimport warningIcon from \"./resources/warning.svg\";\nimport {\n  errorIconStyle,\n  errorTextMessageStyle,\n  customErrorContainerStyle,\n} from \"./style\";\n\nimport { Hook, Hooks } from \"../CustomSoundManager/hook\";\n\nimport {\n  CometChatMessageList,\n  CometChatConversationList,\n  CometChatMessages,\n} from \"react-ui-kit-testing\";\n\nconst CustomErrorState = () => {\n  const [user, setUser] = React.useState(null);\n  const [group, setGroup] = React.useState(null);\n\n  let errorCustomView = () => (\n    <div\n      className=\"custom--error--container\"\n      style={customErrorContainerStyle()}\n    >\n      <i className=\"error--icon\" style={errorIconStyle(warningIcon)}></i>\n      <p className=\"error--text\" style={errorTextMessageStyle()}>\n        error\n      </p>\n    </div>\n  );\n\n  Hook(setUser, setGroup);\n\n  return (\n    <CometChatMessageList\n      user={user}\n      style={{ width: \"700px\", height: \"450px\", border: \"1px solid black\" }}\n      customView={{\n        error: errorCustomView,\n        loading: null,\n        empty: null,\n      }}\n    />\n  );\n};\n\nexport { CustomErrorState };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomEmptyState/index.js",["233","234"],[],"import React from \"react\";\nimport emptyIcon from \"./resources/empty.svg\";\nimport {\n  CometChatConversationList,\n  CometChatConversationsWithMessages,\n  CometChatMessageList,\n} from \"react-ui-kit-testing\";\nimport {\n  emptyIconStyle,\n  emptyTextMessageStyle,\n  customEmptyContainerStyle,\n} from \"./style\";\n\nconst CustomEmptyState = () => {\n  let emptyCustomeView = () => (\n    <div\n      className=\"custom--empty--container\"\n      style={customEmptyContainerStyle()}\n    >\n      <i className=\"empty--icon\" style={emptyIconStyle(emptyIcon)}></i>\n      <p className=\"empty--text\" style={emptyTextMessageStyle()}>\n        no chat's found\n      </p>\n    </div>\n  );\n\n  return (\n    <CometChatMessageList\n      style={{ width: \"700px\", height: \"450px\", border: \"1px solid black\" }}\n      customView={{\n        error: null,\n        loading: null,\n        empty: emptyCustomeView,\n      }}\n    />\n  );\n};\n\nexport { CustomEmptyState };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/MessageAlignment/index.js",["235"],[],"import React from \"react\";\nimport { CometChatMessageList } from \"react-ui-kit-testing\";\nimport { Hook } from \"./hook\";\n\nimport {\n  alignmentContainerStyle,\n  buttonContainerStyle,\n  buttonStyle,\n} from \"./style.js\";\n\nconst MessageAlignment = () => {\n  const [user, setUser] = React.useState(null);\n  const [group, setGroup] = React.useState(null);\n  const [alignment, setAlignment] = React.useState(\"standard\");\n\n  const standardAlignmentHandler = () => {\n    setAlignment(\"standard\");\n  };\n\n  const leftAlignmentHandler = () => {\n    setAlignment(\"leftAligned\");\n  };\n\n  Hook(setGroup, setUser);\n\n  return user ? (\n    <div style={alignmentContainerStyle()}>\n      <div>\n        <CometChatMessageList\n          user={user}\n          alignment={`${alignment}`} //['standard','leftAligned']\n          style={{ width: \"700px\", height: \"400px\", border: \"1px solid black\" }}\n        />\n      </div>\n      <div style={buttonContainerStyle()}>\n        <button onClick={standardAlignmentHandler} style={buttonStyle()}>\n          standard\n        </button>\n        <button onClick={leftAlignmentHandler} style={buttonStyle()}>\n          Left-Aligned\n        </button>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport { MessageAlignment };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/ExcludeMessageOptions/index.js",["236","237","238","239","240","241"],[],"import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport {\n  CometChatMessageList,\n  MessageOptionConstants,\n  CometChatPopover,\n  CometChatMessageEvents,\n  CometChatSoundManager,\n  CometChatMessageTemplate,\n  CometChatMessageOptions,\n  MessageTypeConstants,\n} from \"react-ui-kit-testing\";\n\nimport {\n  dateTimeStyle,\n  closeIconStyle,\n  pinnedMesssageStyle,\n  pinnedMessageTextStyle,\n} from \"./style\";\n\nimport {\n  alignmentContainerStyle,\n  buttonContainerStyle,\n  buttonStyle,\n} from \"../MessageAlignment/style.js\";\n\nimport { Hook } from \"./hook\";\n\nimport { getUnixTimestamp, ID } from \"../../home/MessageConstant\";\n\nimport reminderIconURL from \"./resources/reminders.svg\";\nimport pinnIconURL from \"./resources/pinn-message.svg\";\nimport saveIconURL from \"./resources/save-message.svg\";\nimport reportIconUrl from \"./resources/report-message.svg\";\nimport messageInfoURL from \"./resources/message-info.svg\";\nimport customIconURL from \"./resources/customIconURl.svg\";\n\nconst ExcludeMessageOptions = () => {\n  const [user, setUser] = React.useState(null);\n  const [group, setGroup] = React.useState(null);\n  const [launchReminder, setReminder] = React.useState(false);\n  const [messageObject, setMessageObject] = React.useState({});\n  const [pinnedMsg, setPinnedMsg] = React.useState(false);\n  const [pinnedMessageObject, setPinnedMessage] = React.useState({});\n  const [launchReport, setReport] = React.useState(false);\n  const [launchMessageInfo, setMessageInfo] = React.useState(false);\n  const inputReport = React.useRef(\"\");\n\n  const [bool, setBool] = React.useState(false);\n\n  const customHandler = () => {\n    setBool(true);\n  };\n\n  const defaultHandler = () => {\n    setBool(false);\n  };\n\n  const date = React.useRef(\"\");\n  const time = React.useRef(\"\");\n\n  /**\n   * pinned custom message option\n   */\n  const closePinnedMessage = () => {\n    CometChat.callExtension(\"pin-message\", \"DELETE\", \"v1/unpin\", {\n      msgId: pinnedMessageObject?.id,\n      receiverType: \"user\",\n      receiver: \"supergroup3\",\n    })\n      .then((response) => {\n        // { success: true }\n        setPinnedMsg(!pinnedMsg);\n      })\n      .catch((error) => {\n        // Error occurred\n      });\n  };\n\n  const pinnedMessageView = (\n    <div style={pinnedMesssageStyle()}>\n      <div style={closeIconStyle()}>\n        <span onClick={closePinnedMessage}> &times;</span>\n      </div>\n      <div style={pinnedMessageTextStyle()}>\n        <p style={{ margin: \"5px\" }}>\n          {pinnedMessageObject?.text || `pinned message`}\n        </p>\n      </div>\n    </div>\n  );\n\n  const pinnedMessageClick = (e) => {\n    setPinnedMessage(e);\n    //console.log(e);\n    CometChat.callExtension(\"pin-message\", \"POST\", \"v1/pin\", {\n      msgId: e?.id, // The ID of the message to be pinned. Here 280.\n    })\n      .then((response) => {\n        // { success: true }\n        //console.log(\"pinned message response\", response);\n        setPinnedMsg(true);\n      })\n      .catch((error) => {\n        // Error occurred\n        //console.log(\"pinn error\", error);\n      });\n  };\n\n  let pinnedOption = new CometChatMessageOptions({\n    iconURL: pinnIconURL,\n    id: \"pinned-message\",\n    onClick: pinnedMessageClick,\n    optionFor: null,\n    title: \"pinned\",\n  });\n\n  /**\n   * save custom message option\n   */\n  const saveMessageClick = (e) => {\n    CometChat.callExtension(\"save-message\", \"POST\", \"v1/save\", {\n      msgId: e?.id,\n    })\n      .then((response) => {\n        // { success: true }\n        alert(\"message saved\");\n      })\n      .catch((error) => {\n        // Error occured\n        console.error(\"save message error\", error);\n      });\n  };\n\n  let saveOption = new CometChatMessageOptions({\n    iconURL: saveIconURL,\n    id: \"save-message\",\n    onClick: saveMessageClick,\n    optionFor: null,\n    title: \"save\",\n  });\n\n  /**\n   * reminder message\n   */\n  const FetchApi = (e) => {\n    setMessageObject(e);\n    setReminder(!launchReminder);\n  };\n\n  let reminderMessage = new CometChatMessageOptions({\n    iconURL: reminderIconURL,\n    id: \"extension_reminders\",\n    onClick: FetchApi,\n    optionFor: null,\n    title: \"reminder\",\n  });\n\n  const sentReminder = () => {\n    if (date?.current?.length && time?.current?.length) {\n      let reminderDate = date?.current + \" \" + time?.current;\n\n      let ms = Math.floor(new Date(`${reminderDate}`).getTime());\n\n      CometChat.callExtension(\"reminders\", \"POST\", \"v1/reminder\", {\n        about: parseInt(messageObject.id),\n        isCustom: false,\n        timeInMS: ms,\n      })\n        .then((response) => {\n          // Reminder created successfully\n          // Reminder details with reminderId.\n          //console.log(\"reminder resp\", response);\n          alert(\"reminder sent successfuly\");\n          setReminder(!launchReminder);\n        })\n        .catch((error) => {\n          // Some error occured\n          console.log(\"reminder error\", error);\n        });\n    }\n  };\n\n  let reminderView = () => {\n    return (\n      <h3\n        style={{\n          background: \"red\",\n          width: \"250px\",\n          height: \"200px\",\n          padding: \"10px\",\n          borderRadius: \"5px\",\n          textAlign: \"center\",\n          zIndex: 999,\n          color: \"white\",\n        }}\n      >\n        Reminder messsage\n      </h3>\n    );\n  };\n\n  let messageBubbleConfig = {\n    customView: reminderView,\n  };\n\n  let customViewSetDate = (\n    <div style={dateTimeStyle()}>\n      <p style={{ margin: \"0\" }}>Date</p>\n      <input type=\"date\" onChange={(e) => (date.current = e.target.value)} />\n      <p style={{ margin: \"0\" }}>Time</p>\n      <input type=\"time\" onChange={(e) => (time.current = e.target.value)} />\n      <button onClick={sentReminder}>Submit</button>\n    </div>\n  );\n  /**\n   * report message\n   */\n  const sentReport = () => {\n    setReport(!launchReport);\n    if (inputReport?.current?.length && messageObject) {\n      CometChat.callExtension(\"report-message\", \"POST\", \"v1/report\", {\n        msgId: messageObject.id,\n        reason: inputReport?.current,\n      })\n        .then((response) => {\n          // { success: true }\n          //console.log(\"report responce\", response);\n        })\n        .catch((error) => {\n          // Error occurred\n          //console.log(\"report error\", error);\n        });\n    }\n  };\n\n  const reportMessageUserInput = (e) => {\n    inputReport.current = e.target.value;\n  };\n\n  const reportMessageView = (\n    <>\n      <div\n        className=\"bitly--input\"\n        style={{\n          position: \"relative\",\n          minWidth: \"250px\",\n          height: \"auto\",\n          border: \"1px solid black\",\n          padding: \"40px\",\n          borderRadius: \"5px\",\n          background: \"#606c38\",\n        }}\n      >\n        <span\n          style={{\n            position: \"absolute\",\n            top: \"0px\",\n            right: \"10px\",\n            fontSize: \"30px\",\n            cursor: \"pointer\",\n          }}\n          onClick={() => setReport(!launchReport)}\n        >\n          &times;\n        </span>\n        <input\n          style={{\n            position: \"relative\",\n            display: \"block\",\n            margin: \"0 auto\",\n            width: \"100%\",\n            boxSizing: \"border-box\",\n            textAlign: \"center\",\n            padding: \"10px 0\",\n            borderRadius: \"5px\",\n            outline: \"none\",\n          }}\n          type=\"text\"\n          placeholder=\"Enter url text\"\n          onChange={reportMessageUserInput}\n        />\n        <button\n          style={{\n            padding: \"5px 10px\",\n            margin: \"5px auto\",\n            position: \"absolute\",\n            left: \"40%\",\n            background: \"rgb(51,153,255)\",\n            borderRadius: \"5px\",\n          }}\n          onClick={sentReport}\n        >\n          Send\n        </button>\n      </div>\n    </>\n  );\n\n  const reportMessageClicked = (e) => {\n    setReport(!launchReport);\n    setMessageObject(e);\n  };\n\n  let reportMessage = new CometChatMessageOptions({\n    iconURL: reportIconUrl,\n    id: \"report-message\",\n    onClick: reportMessageClicked,\n    optionFor: null,\n    title: \"Report\",\n  });\n\n  /**\n   * message information option\n   */\n  const messageInfoClicked = (e) => {\n    // console.log(\"message info\", e);\n    setMessageInfo(!launchMessageInfo);\n    setMessageObject(e);\n  };\n\n  const messageInfoView = (messageObject) => {\n    if (messageObject && messageObject?.text) {\n      return (\n        <div\n          className=\"message--info\"\n          style={{\n            background: \"rgb(20,20,20)\",\n            padding: \"10px\",\n            borderRadius: \"10px\",\n            minWidth: \"400px\",\n            color: \"white\",\n          }}\n        >\n          <div\n            onClick={messageInfoClicked}\n            style={{\n              fontSize: \"25px\",\n              marginBottom: \"10px\",\n              cursor: \"pointer\",\n              float: \"right\",\n              margin: \"0\",\n              padding: \"0\",\n            }}\n            className=\"closeIcon\"\n          >\n            &times;\n          </div>\n          <div\n            className=\"user--info\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              flexDirection: \"row\",\n              padding: \"5px\",\n              borderBottom: \"1px solid\",\n            }}\n          >\n            <div\n              className=\"sender--info\"\n              style={{\n                padding: \"5px\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                borderRight: \"1px solid\",\n                boxSizing: \"border-box\",\n                textAlign: \"center\",\n              }}\n            >\n              <p>{messageObject?.sender?.name || `Sender name`}</p>\n              <p style={{ font: \"400 13px Inter\", margin: \"0\", padding: \"0\" }}>\n                {messageObject?.sender?.uid || `Sender Id`}\n              </p>\n            </div>\n            <div\n              className=\"receiver--info\"\n              style={{\n                padding: \"5px\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                boxSizing: \"border-box\",\n                textAlign: \"center\",\n              }}\n            >\n              <p>{messageObject?.receiver?.name || `Receiver name`}</p>\n              <p style={{ font: \"400 13px Inter\", margin: \"0\", padding: \"0\" }}>\n                {messageObject?.receiver?.uid || `Receiver Id`}\n              </p>\n            </div>\n          </div>\n          <div\n            style={{\n              margin: \"5px\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              textAlign: \"center\",\n              font: \"400 12px Inter\",\n              borderRadius: \"5px\",\n              padding: \"5px 0\",\n            }}\n          >\n            {`${new Date(messageObject?.sentAt)}` || `time`}\n          </div>\n          <div\n            className=\"messages\"\n            style={{\n              margin: \"5px\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              textAlign: \"center\",\n              font: \"400 16px Inter\",\n              border: \"1px solid black\",\n              borderRadius: \"5px\",\n              padding: \"10px 0\",\n            }}\n          >\n            {messageObject?.text}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  let messageInformation = new CometChatMessageOptions({\n    iconURL: messageInfoURL,\n    id: \"messsage-information\",\n    onClick: messageInfoClicked,\n    optionFor: null,\n    title: \"message info\",\n  });\n\n  /**\n   * Custom implementation of pre-defined message option\n   */\n  const customOption = () => {\n    alert(\"custom pre-defined message option!\");\n  };\n\n  let customMessageOption = new CometChatMessageOptions({\n    iconURL: customIconURL,\n    id: \"delete\",\n    onClick: customOption,\n    optionFor: null,\n    title: \"delete message\",\n  });\n\n  /**\n   * message options list\n   */\n\n  const excludeMessageOptions = [\n    // MessageOptionConstants.reactToMessage,\n    MessageOptionConstants.editMessage,\n    MessageOptionConstants.deleteMessage,\n    // MessageOptionConstants.copyMessage,\n    MessageOptionConstants.translateMessage,\n  ];\n\n  const customMessageOptions = [\n    MessageOptionConstants.reactToMessage,\n    MessageOptionConstants.editMessage,\n    MessageOptionConstants.deleteMessage,\n    MessageOptionConstants.copyMessage,\n    MessageOptionConstants.translateMessage,\n    reminderMessage,\n    saveOption,\n    pinnedOption,\n    reportMessage,\n    messageInformation,\n    customMessageOption,\n  ];\n\n  let defaultOptions = [\n    MessageOptionConstants.reactToMessage,\n    MessageOptionConstants.editMessage,\n    MessageOptionConstants.deleteMessage,\n    MessageOptionConstants.copyMessage,\n    MessageOptionConstants.translateMessage,\n    reminderMessage,\n  ];\n  //let messageTypes = [];\n  let messageTypes = CometChatMessageTemplate.getDefaultTypes();\n  let reminderCustomMessageTemplate = new CometChatMessageTemplate({\n    type: \"extension_reminders\",\n    icon: null,\n    name: \"reminder\",\n    category: \"custom\",\n    customView: reminderView,\n    onActionClick: null,\n  });\n\n  const excludeMessageTypes = [\n    // MessageTypeConstants.file,\n    // MessageTypeConstants.whiteboard,\n    // MessageTypeConstants.document,\n    MessageTypeConstants.poll,\n    // MessageTypeConstants.image,\n    // MessageTypeConstants.text,\n  ];\n\n  messageTypes.push(reminderCustomMessageTemplate);\n\n  Hook(setGroup, setUser);\n\n  return user ? (\n    <div style={alignmentContainerStyle()}>\n      <div>\n        {pinnedMsg ? <>{pinnedMessageView}</> : null}\n        <CometChatMessageList\n          user={user}\n          style={{ width: \"650px\", height: \"450px\", border: \"1px solid black\" }}\n          alignment={\"standard\"} //['standard','leftAligned']\n          excludeMessageOptions={bool ? excludeMessageOptions : null}\n          customMessageOptions={bool ? customMessageOptions : null}\n          excludeMessageTypes={excludeMessageTypes}\n          sentMessageInputData={{\n            thumbnail: false,\n            title: false,\n            time: true,\n            readReceipt: true,\n          }}\n          messageTypes={messageTypes}\n          messageBubbleConfiguration={messageBubbleConfig}\n        />\n\n        {launchReminder ? (\n          <CometChatPopover position=\"left\" x=\"750\" y=\"350\">\n            {customViewSetDate}\n          </CometChatPopover>\n        ) : null}\n\n        {launchReport ? (\n          <CometChatPopover position=\"left\" x=\"650\" y=\"350\">\n            {reportMessageView}\n          </CometChatPopover>\n        ) : null}\n\n        {launchMessageInfo ? (\n          <CometChatPopover position=\"left\" x=\"600\" y=\"230\">\n            {messageInfoView(messageObject)}\n          </CometChatPopover>\n        ) : null}\n      </div>\n      <div style={buttonContainerStyle()}>\n        <button onClick={defaultHandler} style={buttonStyle()}>\n          default options\n        </button>\n        <button onClick={customHandler} style={buttonStyle()}>\n          custom options\n        </button>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport { ExcludeMessageOptions };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/ExcludeMessageTypes/index.js",["242","243","244","245","246"],[],"import React from \"react\";\nimport {\n  MessageTypeConstants,\n  CometChatMessageTemplate,\n} from \"react-ui-kit-testing\";\n\nimport { Hook } from \"./hook\";\nimport { CometChatMessages } from \"react-ui-kit-testing\";\n\nimport {\n  alignmentContainerStyle,\n  buttonContainerStyle,\n  buttonStyle,\n} from \"../MessageAlignment/style.js\";\n\nconst ExcludeMessageTypes = () => {\n  const [user, setUser] = React.useState(null);\n  const [group, setGroup] = React.useState(null);\n\n  const [bool, setBool] = React.useState(false);\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const customHandler = () => {\n    setBool(true);\n    //forceUpdate();\n  };\n\n  const defaultHandler = () => {\n    setBool(false);\n    //forceUpdate();\n  };\n\n  const _excludeMessageTypes = [\n    MessageTypeConstants.image,\n    MessageTypeConstants.file,\n    // MessageTypeConstants.poll,\n    MessageTypeConstants.document,\n  ];\n\n  let composerConfig = {\n    excludeMessageTypes: _excludeMessageTypes,\n  };\n\n  let messageTypes = CometChatMessageTemplate.getDefaultTypes();\n  let paymentTemplate = new CometChatMessageTemplate({\n    type: \"payment\",\n    icon: \"assets/credit-card.png\",\n    name: \"Payment\",\n    // customView: this.customView,\n    //actionCallback: this.openPaymentTab,\n  });\n  messageTypes.push(paymentTemplate);\n\n  const defaultComposerConfig = {\n    excludeMessageTypes: messageTypes,\n  };\n\n  const messageListConfig = {\n    excludeMessageTypes: [\n      MessageTypeConstants.file,\n      MessageTypeConstants.whiteboard,\n      MessageTypeConstants.document,\n      // MessageTypeConstants.poll,\n    ],\n    // messageTypes: messageTypes,\n    // customMessageOptions: [\n    //   MessageOptionConstants.shareMessage,\n    //   MessageOptionConstants.forwardMessage,\n    //   MessageOptionConstants.editMessage,\n    // ],\n    // excludeMessageOptions: [\n    //   MessageOptionConstants.deleteMessage,\n    //   MessageOptionConstants.reactToMessage,\n    //   MessageOptionConstants.editMessage,\n    //   MessageOptionConstants.copyMessage,\n    // ],\n  };\n\n  const excludeMessageTypes = [\n    MessageTypeConstants.file,\n    MessageTypeConstants.whiteboard,\n    MessageTypeConstants.document,\n    MessageTypeConstants.poll,\n    MessageTypeConstants.image,\n    MessageTypeConstants.text,\n  ];\n\n  Hook(setGroup, setUser);\n\n  return user ? (\n    <div style={alignmentContainerStyle()}>\n      {bool ? (\n        <div>\n          <CometChatMessages\n            user={user}\n            style={{\n              width: \"700px\",\n              height: \"400px\",\n              border: \"1px solid red\",\n            }}\n            messageComposerConfiguration={composerConfig}\n          />\n        </div>\n      ) : (\n        <div>\n          <CometChatMessages\n            user={user}\n            style={{\n              width: \"700px\",\n              height: \"400px\",\n              border: \"1px solid black\",\n            }}\n            messageComposerConfiguration={null}\n          />\n        </div>\n      )}\n      <div style={buttonContainerStyle()}>\n        <button onClick={defaultHandler} style={buttonStyle()}>\n          default message\n        </button>\n        <button onClick={customHandler} style={buttonStyle()}>\n          exclude message\n        </button>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport { ExcludeMessageTypes };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomMessageTypes/index.js",["247","248","249","250","251","252","253","254"],[],"import React from \"react\";\n\nimport {\n  CometChatMessageList,\n  CometChatMessages,\n  CometChatMessageTemplate,\n  CometChatPopover,\n  CometChatBackdrop,\n  CometChatMessageEvents,\n  CometChatSoundManager,\n} from \"react-ui-kit-testing\";\n\nimport { CometChat } from \"react\";\n\nimport {\n  alignmentContainerStyle,\n  buttonContainerStyle,\n  buttonStyle,\n} from \"../MessageAlignment/style.js\";\n\nimport iconURL from \"./resources/empty.svg\";\nimport loadingIconURL from \"./resources/spinner.svg\";\nimport { Hook } from \"./hook\";\n\nconst CustomMessageTypes = (props) => {\n  const [_user, setUser] = React.useState(null);\n  const [_group, setGroup] = React.useState(null);\n\n  const [bool, setBool] = React.useState(false);\n\n  const customHandler = () => {\n    setBool(true);\n  };\n\n  const defaultHandler = () => {\n    setBool(false);\n  };\n\n  let messageListConfig = {};\n  if (props?.messageTypes) {\n    messageListConfig = {\n      messageTypes: props?.messageTypes,\n      loadingIconURL: loadingIconURL,\n    };\n  }\n\n  Hook(setGroup, setUser);\n  return _user ? (\n    <div style={alignmentContainerStyle()}>\n      <div>\n        <CometChatMessages\n          user={_user}\n          style={{ width: \"700px\", height: \"500px\", border: \"1px solid black\" }}\n          messageTypes={bool ? props?.messageTypes : null}\n          messsageListConfiguration={messageListConfig}\n          messageComposerConfiguration={{\n            messageTypes: bool ? props?.messageTypes : null,\n          }}\n        />\n        {props?.launchGfy ? (\n          <CometChatPopover position=\"left\" x=\"750\" y=\"300\">\n            {props.gfycatsMessageComponent}\n          </CometChatPopover>\n        ) : null}\n\n        {props.payment ? (\n          <CometChatPopover position=\"left\" x=\"750\" y=\"300\">\n            {props.paymentMessageComponent}\n          </CometChatPopover>\n        ) : null}\n\n        {props.launchGiphy ? (\n          <CometChatPopover position=\"left\" x=\"750\" y=\"300\">\n            {props.giphyMessageComponent}\n          </CometChatPopover>\n        ) : null}\n\n        {props.launchStipop ? (\n          <CometChatPopover position=\"left\" x=\"750\" y=\"300\">\n            {props.stipopMessageComponent}\n          </CometChatPopover>\n        ) : null}\n\n        {props.launchBitly ? (\n          <CometChatPopover position=\"left\" x=\"750\" y=\"300\">\n            {props.bitlyMessageComponent}\n          </CometChatPopover>\n        ) : null}\n\n        {props.launchTinyurl ? (\n          <CometChatPopover position=\"left\" x=\"750\" y=\"300\">\n            {props.tinyurlMessageComponent}\n          </CometChatPopover>\n        ) : null}\n      </div>\n      <div style={buttonContainerStyle()}>\n        <button onClick={defaultHandler} style={buttonStyle()}>\n          default\n        </button>\n        <button onClick={customHandler} style={buttonStyle()}>\n          custom\n        </button>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport { CustomMessageTypes };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomErrorState/style.js",[],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomLoadingState/style.js",[],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomEmptyState/style.js",[],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/MessageAlignment/hook.js",["255"],[],"import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nconst Hook = (setGroup, setUser) => {\n  React.useEffect(() => {\n    /**\n     * fetching perticular group\n     */\n    var GUID = \"supergroup\";\n    CometChat.getGroup(GUID).then(\n      (group) => {\n        setGroup(group);\n        console.log(\"Group details fetched successfully:\", group);\n      },\n      (error) => {\n        console.log(\"Group details fetching failed with exception:\", error);\n      }\n    );\n\n    /**\n     * fetching perticualr user user\n     */\n    let UID = \"superhero3\";\n    CometChat.getUser(UID).then(\n      (user) => {\n        setUser(user);\n        console.log(\"User details fetched for user:\", user);\n      },\n      (error) => {\n        console.log(\"User details fetching failed with error:\", error);\n      }\n    );\n    // CometChat.logout().then(\n    //   () => {\n    //     console.log(\"Logout completed successfully\");\n    //   },\n    //   (error) => {\n    //     console.log(\"Logout failed with exception:\", { error });\n    //   }\n    // );\n  }, []);\n};\n\nexport { Hook };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomSoundManager/hook.js",["256","257"],[],"import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport audio from \"./resources/audio.mp3\";\n\nconst Hook = (setGroup, setUser) => {\n  React.useEffect(() => {\n    /**\n     * fetching perticular group\n     */\n    var GUID = \"supergroup\";\n    CometChat.getGroup(GUID).then(\n      (group) => {\n        setGroup(group);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n\n    /**\n     * fetching perticualr user user\n     */\n    let UID = \"superhero3\";\n    CometChat.getUser(UID).then(\n      (user) => {\n        setUser(user);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n    // CometChat.logout().then(\n    //   () => {\n    //     console.log(\"Logout completed successfully\");\n    //   },\n    //   (error) => {\n    //     console.log(\"Logout failed with exception:\", { error });\n    //   }\n    // );\n  }, []);\n};\n\nexport { Hook };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/ExcludeMessageOptions/hook.js",["258"],[],"import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nconst Hook = (setGroup, setUser) => {\n  React.useEffect(() => {\n    /**\n     * fetching perticular group\n     */\n    var GUID = \"supergroup\";\n    CometChat.getGroup(GUID).then(\n      (group) => {\n        setGroup(group);\n        // console.log(\"Group details fetched successfully:\", group);\n      },\n      (error) => {\n        //console.log(\"Group details fetching failed with exception:\", error);\n      }\n    );\n\n    /**\n     * fetching perticualr user user\n     */\n    // let UID = \"cc_reminder_bot\";\n    let UID = \"superhero3\";\n    CometChat.getUser(UID).then(\n      (user) => {\n        setUser(user);\n        //console.log(\"User details fetched for user:\", user);\n      },\n      (error) => {\n        //console.log(\"User details fetching failed with error:\", error);\n      }\n    );\n    // CometChat.logout().then(\n    //   () => {\n    //     console.log(\"Logout completed successfully\");\n    //   },\n    //   (error) => {\n    //     console.log(\"Logout failed with exception:\", { error });\n    //   }\n    // );\n  }, []);\n};\n\nexport { Hook };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/ExcludeMessageOptions/style.js",[],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/ExcludeMessageTypes/hook.js",["259"],[],"import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nconst Hook = (setGroup, setUser) => {\n  React.useEffect(() => {\n    /**\n     * fetching perticular group\n     */\n    var GUID = \"supergroup\";\n    CometChat.getGroup(GUID).then(\n      (group) => {\n        setGroup(group);\n        //console.log(\"Group details fetched successfully:\", group);\n      },\n      (error) => {\n        //console.log(\"Group details fetching failed with exception:\", error);\n      }\n    );\n\n    /**\n     * fetching perticualr user user\n     */\n    let UID = \"superhero3\";\n    CometChat.getUser(UID).then(\n      (user) => {\n        setUser(user);\n        //console.log(\"User details fetched for user:\", user);\n      },\n      (error) => {\n        // console.log(\"User details fetching failed with error:\", error);\n      }\n    );\n    // CometChat.logout().then(\n    //   () => {\n    //     console.log(\"Logout completed successfully\");\n    //   },\n    //   (error) => {\n    //     console.log(\"Logout failed with exception:\", { error });\n    //   }\n    // );\n  }, []);\n};\n\nexport { Hook };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/MessageTheme/hook.js",["260"],[],"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/CustomLoadingState/hooks.js",["261"],[],"import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\n//import audio from \"./resources/audio.mp3\";\n\nconst Hooks = (setUser, setGroup) => {\n  React.useEffect(() => {\n    /**\n     * fetching perticular group\n     */\n    var GUID = \"supergroup\";\n    CometChat.getGroup(GUID).then(\n      (group) => {\n        setGroup(group);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n\n    /**\n     * fetching perticualr user user\n     */\n    let UID = \"superhero3\";\n    CometChat.getUser(UID).then(\n      (user) => {\n        setUser(user);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n    // CometChat.logout().then(\n    //   () => {\n    //     console.log(\"Logout completed successfully\");\n    //   },\n    //   (error) => {\n    //     console.log(\"Logout failed with exception:\", { error });\n    //   }\n    // );\n  }, []);\n};\n\nexport { Hooks };\n","/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/app/guides/MessageAlignment/style.js",[],[],{"ruleId":"262","severity":1,"message":"263","line":5,"column":3,"nodeType":"264","messageId":"265","endLine":5,"endColumn":25},{"ruleId":"262","severity":1,"message":"266","line":7,"column":3,"nodeType":"264","messageId":"265","endLine":7,"endColumn":20},{"ruleId":"262","severity":1,"message":"267","line":28,"column":10,"nodeType":"264","messageId":"265","endLine":28,"endColumn":15},{"ruleId":"262","severity":1,"message":"268","line":41,"column":9,"nodeType":"264","messageId":"265","endLine":41,"endColumn":24},{"ruleId":"269","severity":1,"message":"270","line":84,"column":15,"nodeType":"271","messageId":"272","endLine":84,"endColumn":81,"fix":"273"},{"ruleId":"262","severity":1,"message":"274","line":3,"column":20,"nodeType":"264","messageId":"265","endLine":3,"endColumn":26},{"ruleId":"262","severity":1,"message":"275","line":9,"column":10,"nodeType":"264","messageId":"265","endLine":9,"endColumn":21},{"ruleId":"262","severity":1,"message":"276","line":12,"column":3,"nodeType":"264","messageId":"265","endLine":12,"endColumn":24},{"ruleId":"262","severity":1,"message":"277","line":13,"column":3,"nodeType":"264","messageId":"265","endLine":13,"endColumn":17},{"ruleId":"262","severity":1,"message":"278","line":14,"column":3,"nodeType":"264","messageId":"265","endLine":14,"endColumn":20},{"ruleId":"262","severity":1,"message":"279","line":15,"column":3,"nodeType":"264","messageId":"265","endLine":15,"endColumn":20},{"ruleId":"262","severity":1,"message":"280","line":17,"column":3,"nodeType":"264","messageId":"265","endLine":17,"endColumn":16},{"ruleId":"262","severity":1,"message":"281","line":19,"column":3,"nodeType":"264","messageId":"265","endLine":19,"endColumn":16},{"ruleId":"262","severity":1,"message":"282","line":21,"column":3,"nodeType":"264","messageId":"265","endLine":21,"endColumn":27},{"ruleId":"262","severity":1,"message":"283","line":24,"column":28,"nodeType":"264","messageId":"265","endLine":24,"endColumn":30},{"ruleId":"262","severity":1,"message":"284","line":37,"column":3,"nodeType":"264","messageId":"265","endLine":37,"endColumn":31},{"ruleId":"262","severity":1,"message":"285","line":38,"column":3,"nodeType":"264","messageId":"265","endLine":38,"endColumn":20},{"ruleId":"262","severity":1,"message":"286","line":39,"column":3,"nodeType":"264","messageId":"265","endLine":39,"endColumn":20},{"ruleId":"262","severity":1,"message":"287","line":40,"column":3,"nodeType":"264","messageId":"265","endLine":40,"endColumn":19},{"ruleId":"262","severity":1,"message":"288","line":53,"column":10,"nodeType":"264","messageId":"265","endLine":53,"endColumn":26},{"ruleId":"262","severity":1,"message":"267","line":70,"column":10,"nodeType":"264","messageId":"265","endLine":70,"endColumn":15},{"ruleId":"262","severity":1,"message":"289","line":80,"column":10,"nodeType":"264","messageId":"265","endLine":80,"endColumn":26},{"ruleId":"262","severity":1,"message":"290","line":80,"column":28,"nodeType":"264","messageId":"265","endLine":80,"endColumn":46},{"ruleId":"262","severity":1,"message":"291","line":95,"column":9,"nodeType":"264","messageId":"265","endLine":95,"endColumn":26},{"ruleId":"262","severity":1,"message":"292","line":804,"column":7,"nodeType":"264","messageId":"265","endLine":804,"endColumn":19},{"ruleId":"262","severity":1,"message":"279","line":4,"column":10,"nodeType":"264","messageId":"265","endLine":4,"endColumn":27},{"ruleId":"262","severity":1,"message":"278","line":4,"column":29,"nodeType":"264","messageId":"265","endLine":4,"endColumn":46},{"ruleId":"293","severity":1,"message":"294","line":43,"column":6,"nodeType":"295","endLine":43,"endColumn":8,"suggestions":"296"},{"ruleId":"293","severity":1,"message":"294","line":39,"column":6,"nodeType":"295","endLine":39,"endColumn":8,"suggestions":"297"},{"ruleId":"262","severity":1,"message":"267","line":18,"column":10,"nodeType":"264","messageId":"265","endLine":18,"endColumn":15},{"ruleId":"262","severity":1,"message":"282","line":5,"column":3,"nodeType":"264","messageId":"265","endLine":5,"endColumn":27},{"ruleId":"298","severity":1,"message":"299","line":19,"column":22,"nodeType":"300","messageId":"301","endLine":19,"endColumn":24},{"ruleId":"262","severity":1,"message":"302","line":5,"column":3,"nodeType":"264","messageId":"265","endLine":5,"endColumn":8},{"ruleId":"262","severity":1,"message":"303","line":6,"column":3,"nodeType":"264","messageId":"265","endLine":6,"endColumn":10},{"ruleId":"262","severity":1,"message":"304","line":7,"column":3,"nodeType":"264","messageId":"265","endLine":7,"endColumn":9},{"ruleId":"293","severity":1,"message":"305","line":83,"column":6,"nodeType":"295","endLine":83,"endColumn":8,"suggestions":"306"},{"ruleId":"262","severity":1,"message":"307","line":11,"column":3,"nodeType":"264","messageId":"265","endLine":11,"endColumn":28},{"ruleId":"262","severity":1,"message":"266","line":12,"column":3,"nodeType":"264","messageId":"265","endLine":12,"endColumn":20},{"ruleId":"262","severity":1,"message":"308","line":16,"column":10,"nodeType":"264","messageId":"265","endLine":16,"endColumn":14},{"ruleId":"262","severity":1,"message":"267","line":20,"column":10,"nodeType":"264","messageId":"265","endLine":20,"endColumn":15},{"ruleId":"262","severity":1,"message":"309","line":9,"column":16,"nodeType":"264","messageId":"265","endLine":9,"endColumn":21},{"ruleId":"262","severity":1,"message":"307","line":13,"column":3,"nodeType":"264","messageId":"265","endLine":13,"endColumn":28},{"ruleId":"262","severity":1,"message":"266","line":14,"column":3,"nodeType":"264","messageId":"265","endLine":14,"endColumn":20},{"ruleId":"262","severity":1,"message":"267","line":19,"column":10,"nodeType":"264","messageId":"265","endLine":19,"endColumn":15},{"ruleId":"262","severity":1,"message":"307","line":4,"column":3,"nodeType":"264","messageId":"265","endLine":4,"endColumn":28},{"ruleId":"262","severity":1,"message":"310","line":5,"column":3,"nodeType":"264","messageId":"265","endLine":5,"endColumn":37},{"ruleId":"262","severity":1,"message":"267","line":13,"column":10,"nodeType":"264","messageId":"265","endLine":13,"endColumn":15},{"ruleId":"262","severity":1,"message":"311","line":8,"column":3,"nodeType":"264","messageId":"265","endLine":8,"endColumn":25},{"ruleId":"262","severity":1,"message":"312","line":9,"column":3,"nodeType":"264","messageId":"265","endLine":9,"endColumn":24},{"ruleId":"262","severity":1,"message":"313","line":30,"column":10,"nodeType":"264","messageId":"265","endLine":30,"endColumn":26},{"ruleId":"262","severity":1,"message":"283","line":30,"column":28,"nodeType":"264","messageId":"265","endLine":30,"endColumn":30},{"ruleId":"262","severity":1,"message":"267","line":41,"column":10,"nodeType":"264","messageId":"265","endLine":41,"endColumn":15},{"ruleId":"262","severity":1,"message":"314","line":475,"column":7,"nodeType":"264","messageId":"265","endLine":475,"endColumn":21},{"ruleId":"262","severity":1,"message":"267","line":18,"column":10,"nodeType":"264","messageId":"265","endLine":18,"endColumn":15},{"ruleId":"262","severity":1,"message":"315","line":23,"column":9,"nodeType":"264","messageId":"265","endLine":23,"endColumn":20},{"ruleId":"262","severity":1,"message":"316","line":56,"column":9,"nodeType":"264","messageId":"265","endLine":56,"endColumn":30},{"ruleId":"262","severity":1,"message":"317","line":60,"column":9,"nodeType":"264","messageId":"265","endLine":60,"endColumn":26},{"ruleId":"262","severity":1,"message":"318","line":81,"column":9,"nodeType":"264","messageId":"265","endLine":81,"endColumn":28},{"ruleId":"262","severity":1,"message":"319","line":4,"column":3,"nodeType":"264","messageId":"265","endLine":4,"endColumn":23},{"ruleId":"262","severity":1,"message":"320","line":6,"column":3,"nodeType":"264","messageId":"265","endLine":6,"endColumn":27},{"ruleId":"262","severity":1,"message":"321","line":8,"column":3,"nodeType":"264","messageId":"265","endLine":8,"endColumn":20},{"ruleId":"262","severity":1,"message":"311","line":9,"column":3,"nodeType":"264","messageId":"265","endLine":9,"endColumn":25},{"ruleId":"262","severity":1,"message":"312","line":10,"column":3,"nodeType":"264","messageId":"265","endLine":10,"endColumn":24},{"ruleId":"262","severity":1,"message":"322","line":13,"column":10,"nodeType":"264","messageId":"265","endLine":13,"endColumn":19},{"ruleId":"262","severity":1,"message":"323","line":21,"column":8,"nodeType":"264","messageId":"265","endLine":21,"endColumn":15},{"ruleId":"262","severity":1,"message":"324","line":27,"column":10,"nodeType":"264","messageId":"265","endLine":27,"endColumn":16},{"ruleId":"293","severity":1,"message":"294","line":41,"column":6,"nodeType":"295","endLine":41,"endColumn":8,"suggestions":"325"},{"ruleId":"262","severity":1,"message":"326","line":4,"column":8,"nodeType":"264","messageId":"265","endLine":4,"endColumn":13},{"ruleId":"293","severity":1,"message":"294","line":41,"column":6,"nodeType":"295","endLine":41,"endColumn":8,"suggestions":"327"},{"ruleId":"293","severity":1,"message":"294","line":42,"column":6,"nodeType":"295","endLine":42,"endColumn":8,"suggestions":"328"},{"ruleId":"293","severity":1,"message":"294","line":41,"column":6,"nodeType":"295","endLine":41,"endColumn":8,"suggestions":"329"},{"ruleId":"293","severity":1,"message":"294","line":41,"column":6,"nodeType":"295","endLine":41,"endColumn":8,"suggestions":"330"},{"ruleId":"293","severity":1,"message":"294","line":41,"column":6,"nodeType":"295","endLine":41,"endColumn":8,"suggestions":"331"},"no-unused-vars","'CometChatMessageBubble' is defined but never used.","Identifier","unusedVar","'CometChatMessages' is defined but never used.","'group' is assigned a value but never used.","'richMediaObject' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"332","text":"333"},"'Router' is defined but never used.","'useNavigate' is defined but never used.","'MessagesConfiguration' is defined but never used.","'CometChatTheme' is defined but never used.","'getExtensionsData' is defined but never used.","'MetadataConstants' is defined but never used.","'CustomMessage' is defined but never used.","'MessageStatus' is defined but never used.","'MessageListConfiguration' is defined but never used.","'ID' is defined but never used.","'messagePreviewContainerStyle' is defined but never used.","'previewTitleStyle' is defined but never used.","'previewImageStyle' is defined but never used.","'messageTextStyle' is defined but never used.","'linkPreviewStyle' is defined but never used.","'bitlyResponseUrl' is assigned a value but never used.","'setBitlyRespondUrl' is assigned a value but never used.","'customTextMessage' is assigned a value but never used.","'textTemplate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'setGroup' and 'setUser'. Either include them or remove the dependency array. If 'setGroup' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["334"],["335"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Route' is defined but never used.","'NavLink' is defined but never used.","'Routes' is defined but never used.","React Hook React.useEffect has missing dependencies: 'setGifList', 'setGiphy', 'setGroup', 'setStipop', and 'setUser'. Either include them or remove the dependency array. If 'setStipop' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["336"],"'CometChatConversationList' is defined but never used.","'Hook' is defined but never used.","'Hooks' is defined but never used.","'CometChatConversationsWithMessages' is defined but never used.","'CometChatMessageEvents' is defined but never used.","'CometChatSoundManager' is defined but never used.","'getUnixTimestamp' is defined but never used.","'defaultOptions' is assigned a value but never used.","'forceUpdate' is assigned a value but never used.","'defaultComposerConfig' is assigned a value but never used.","'messageListConfig' is assigned a value but never used.","'excludeMessageTypes' is assigned a value but never used.","'CometChatMessageList' is defined but never used.","'CometChatMessageTemplate' is defined but never used.","'CometChatBackdrop' is defined but never used.","'CometChat' is defined but never used.","'iconURL' is defined but never used.","'_group' is assigned a value but never used.",["337"],"'audio' is defined but never used.",["338"],["339"],["340"],["341"],["342"],[2144,2144]," rel=\"noreferrer\"",{"desc":"343","fix":"344"},{"desc":"343","fix":"345"},{"desc":"346","fix":"347"},{"desc":"343","fix":"348"},{"desc":"343","fix":"349"},{"desc":"343","fix":"350"},{"desc":"343","fix":"351"},{"desc":"343","fix":"352"},{"desc":"343","fix":"353"},"Update the dependencies array to be: [setGroup, setUser]",{"range":"354","text":"355"},{"range":"356","text":"355"},"Update the dependencies array to be: [setGifList, setGiphy, setGroup, setStipop, setUser]",{"range":"357","text":"358"},{"range":"359","text":"355"},{"range":"360","text":"355"},{"range":"361","text":"355"},{"range":"362","text":"355"},{"range":"363","text":"355"},{"range":"364","text":"355"},[1129,1131],"[setGroup, setUser]",[834,836],[2375,2377],"[setGifList, setGiphy, setGroup, setStipop, setUser]",[1051,1053],[878,880],[1096,1098],[1060,1062],[1051,1053],[881,883]]
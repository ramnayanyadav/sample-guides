{"ast":null,"code":"var _jsxFileName = \"/home/admin1/dev/react/sample-react-guides/src/app/guides/ExcludeMessageOptions/index.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatMessageList, MessageOptionConstants, CometChatPopover, CometChatMessageEvents, CometChatSoundManager, CometChatMessageTemplate } from \"react-ui-kit-testing\";\nimport { dateTimeStyle } from \"./style\";\nimport { Hook } from \"./hook\";\nimport { getUnixTimestamp, ID } from \"../../home/MessageConstant\";\nimport reminderURL from \"./resources/reminders.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExcludeMessageOptions = () => {\n  _s();\n  const [user, setUser] = React.useState(null);\n  const [group, setGroup] = React.useState(null);\n  const [launchReminder, setReminder] = React.useState(false);\n  const [time, setTime] = React.useState(\"\");\n  const [date, setDate] = React.useState(\"\");\n  const [messageObject, setMessageObject] = React.useState({});\n  const [remindeList, setReminderList] = React.useState([]);\n  React.useEffect(() => {\n    CometChat.callExtension(\"reminders\", \"GET\", \"v1/fetch\", null).then(response => {\n      // reminders array\n      //console.log(\"list of reminder\", response);\n      setReminderList(response.reminders);\n    }).catch(error => {\n      // Some error occured\n      console.log(\"list of reminder\", error);\n    });\n  }, []);\n  const playAudio = customOutgoingMessageSound => {\n    if (customOutgoingMessageSound) {\n      CometChatSoundManager.play(CometChatSoundManager.Sound.outgoingMessage, customOutgoingMessageSound);\n    } else {\n      CometChatSoundManager.play(CometChatSoundManager.Sound.outgoingMessage);\n    }\n  };\n  const messageStatus = Object.freeze({\n    inprogress: \"inprogress\",\n    success: \"success\"\n  });\n  console.log(\"message list\", remindeList);\n  const FetchApi = e => {\n    setMessageObject(e);\n    setReminder(!launchReminder);\n  };\n  const excludeMessageOptions = [\n  // MessageOptionConstants.reactToMessage,\n  MessageOptionConstants.editMessage, MessageOptionConstants.deleteMessage, MessageOptionConstants.copyMessage, MessageOptionConstants.translateMessage];\n  const customMessageOptions = [\n  // MessageOptionConstants.reactToMessage,\n  // MessageOptionConstants.editMessage,\n  // MessageOptionConstants.deleteMessage,\n  // MessageOptionConstants.copyMessage,\n  // MessageOptionConstants.translateMessage,\n  {\n    iconURL: reminderURL,\n    id: \"RemindToMessage\",\n    onClick: FetchApi,\n    optionFor: null,\n    title: \"Reminder\"\n  }];\n  const sentReminder = () => {\n    if (date.length && time.length) {\n      let reminderDate = date + \" \" + time;\n      let ms = Math.floor(new Date(`${reminderDate}`).getTime());\n      console.log(ms);\n      setReminder(!launchReminder);\n      CometChat.callExtension(\"reminders\", \"POST\", \"v1/reminder\", {\n        about: parseInt(messageObject.id),\n        isCustom: false,\n        timeInMS: ms\n      }).then(response => {\n        // Reminder created successfully\n        // Reminder details with reminderId.\n        console.log(\"reminder resp\", response);\n      }).catch(error => {\n        // Some error occured\n        console.log(\"reminder error\", error);\n      });\n    }\n  };\n  let reminderView = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          background: \"red\",\n          width: \"fit-content\",\n          padding: \"10px\"\n        },\n        children: \"Reminder for Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  };\n  let messageBubbleConfig = {\n    customView: reminderView\n  };\n  let customView = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: dateTimeStyle(),\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        margin: \"0\"\n      },\n      children: \"Date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      onChange: e => setDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        margin: \"0\"\n      },\n      children: \"Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"time\",\n      onChange: e => setTime(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sentReminder,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n  let messageTypes = [];\n  let liveStreamCustomTemplate = new CometChatMessageTemplate({\n    type: \"cc_reminder_bot\",\n    icon: null,\n    name: \"reminder\",\n    category: \"custom messages\",\n    customView: customView,\n    onActionClick: null\n  });\n  Hook(setGroup, setUser);\n  return user || group ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CometChatMessageList, {\n      user: user,\n      style: {\n        width: \"650px\",\n        height: \"450px\"\n      },\n      alignment: \"standard\" //['standard','leftAligned']\n      ,\n      excludeMessageOptions: excludeMessageOptions,\n      customMessageOptions: customMessageOptions,\n      sentMessageInputData: {\n        thumbnail: false,\n        title: false,\n        time: true,\n        readReceipt: true\n      },\n      messageBubbleConfiguration: messageBubbleConfig,\n      messageTypes: {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), launchReminder ? /*#__PURE__*/_jsxDEV(CometChatPopover, {\n      position: \"left\",\n      x: \"750\",\n      y: \"350\",\n      children: customView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true) : null;\n};\n_s(ExcludeMessageOptions, \"VoODTpkI/z/5zI8UoosF/H/nSoA=\");\n_c = ExcludeMessageOptions;\nexport { ExcludeMessageOptions };\nvar _c;\n$RefreshReg$(_c, \"ExcludeMessageOptions\");","map":{"version":3,"names":["React","CometChat","CometChatMessageList","MessageOptionConstants","CometChatPopover","CometChatMessageEvents","CometChatSoundManager","CometChatMessageTemplate","dateTimeStyle","Hook","getUnixTimestamp","ID","reminderURL","ExcludeMessageOptions","user","setUser","useState","group","setGroup","launchReminder","setReminder","time","setTime","date","setDate","messageObject","setMessageObject","remindeList","setReminderList","useEffect","callExtension","then","response","reminders","catch","error","console","log","playAudio","customOutgoingMessageSound","play","Sound","outgoingMessage","messageStatus","Object","freeze","inprogress","success","FetchApi","e","excludeMessageOptions","editMessage","deleteMessage","copyMessage","translateMessage","customMessageOptions","iconURL","id","onClick","optionFor","title","sentReminder","length","reminderDate","ms","Math","floor","Date","getTime","about","parseInt","isCustom","timeInMS","reminderView","background","width","padding","messageBubbleConfig","customView","margin","target","value","messageTypes","liveStreamCustomTemplate","type","icon","name","category","onActionClick","height","thumbnail","readReceipt"],"sources":["/home/admin1/dev/react/sample-react-guides/src/app/guides/ExcludeMessageOptions/index.js"],"sourcesContent":["import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\nimport {\n  CometChatMessageList,\n  MessageOptionConstants,\n  CometChatPopover,\n  CometChatMessageEvents,\n  CometChatSoundManager,\n  CometChatMessageTemplate,\n} from \"react-ui-kit-testing\";\n\nimport { dateTimeStyle } from \"./style\";\n\nimport { Hook } from \"./hook\";\n\nimport { getUnixTimestamp, ID } from \"../../home/MessageConstant\";\n\nimport reminderURL from \"./resources/reminders.svg\";\n\nconst ExcludeMessageOptions = () => {\n  const [user, setUser] = React.useState(null);\n  const [group, setGroup] = React.useState(null);\n  const [launchReminder, setReminder] = React.useState(false);\n  const [time, setTime] = React.useState(\"\");\n  const [date, setDate] = React.useState(\"\");\n  const [messageObject, setMessageObject] = React.useState({});\n  const [remindeList, setReminderList] = React.useState([]);\n\n  React.useEffect(() => {\n    CometChat.callExtension(\"reminders\", \"GET\", \"v1/fetch\", null)\n      .then((response) => {\n        // reminders array\n        //console.log(\"list of reminder\", response);\n        setReminderList(response.reminders);\n      })\n      .catch((error) => {\n        // Some error occured\n        console.log(\"list of reminder\", error);\n      });\n  }, []);\n\n  const playAudio = (customOutgoingMessageSound) => {\n    if (customOutgoingMessageSound) {\n      CometChatSoundManager.play(\n        CometChatSoundManager.Sound.outgoingMessage,\n        customOutgoingMessageSound\n      );\n    } else {\n      CometChatSoundManager.play(CometChatSoundManager.Sound.outgoingMessage);\n    }\n  };\n\n  const messageStatus = Object.freeze({\n    inprogress: \"inprogress\",\n    success: \"success\",\n  });\n\n  console.log(\"message list\", remindeList);\n\n  const FetchApi = (e) => {\n    setMessageObject(e);\n    setReminder(!launchReminder);\n  };\n\n  const excludeMessageOptions = [\n    // MessageOptionConstants.reactToMessage,\n    MessageOptionConstants.editMessage,\n    MessageOptionConstants.deleteMessage,\n    MessageOptionConstants.copyMessage,\n    MessageOptionConstants.translateMessage,\n  ];\n\n  const customMessageOptions = [\n    // MessageOptionConstants.reactToMessage,\n    // MessageOptionConstants.editMessage,\n    // MessageOptionConstants.deleteMessage,\n    // MessageOptionConstants.copyMessage,\n    // MessageOptionConstants.translateMessage,\n    {\n      iconURL: reminderURL,\n      id: \"RemindToMessage\",\n      onClick: FetchApi,\n      optionFor: null,\n      title: \"Reminder\",\n    },\n  ];\n\n  const sentReminder = () => {\n    if (date.length && time.length) {\n      let reminderDate = date + \" \" + time;\n\n      let ms = Math.floor(new Date(`${reminderDate}`).getTime());\n      console.log(ms);\n      setReminder(!launchReminder);\n      CometChat.callExtension(\"reminders\", \"POST\", \"v1/reminder\", {\n        about: parseInt(messageObject.id),\n        isCustom: false,\n        timeInMS: ms,\n      })\n        .then((response) => {\n          // Reminder created successfully\n          // Reminder details with reminderId.\n          console.log(\"reminder resp\", response);\n        })\n        .catch((error) => {\n          // Some error occured\n          console.log(\"reminder error\", error);\n        });\n    }\n  };\n\n  let reminderView = () => {\n    return (\n      <>\n        <h3\n          style={{ background: \"red\", width: \"fit-content\", padding: \"10px\" }}\n        >\n          Reminder for Message\n        </h3>\n      </>\n    );\n  };\n\n  let messageBubbleConfig = {\n    customView: reminderView,\n  };\n\n  let customView = (\n    <div style={dateTimeStyle()}>\n      <p style={{ margin: \"0\" }}>Date</p>\n      <input type=\"date\" onChange={(e) => setDate(e.target.value)} />\n      <p style={{ margin: \"0\" }}>Time</p>\n      <input type=\"time\" onChange={(e) => setTime(e.target.value)} />\n      <button onClick={sentReminder}>Submit</button>\n    </div>\n  );\n\n  let messageTypes = [];\n\n  let liveStreamCustomTemplate = new CometChatMessageTemplate({\n    type: \"cc_reminder_bot\",\n    icon: null,\n    name: \"reminder\",\n    category: \"custom messages\",\n    customView: customView,\n    onActionClick: null,\n  });\n\n  Hook(setGroup, setUser);\n\n  return user || group ? (\n    <>\n      <CometChatMessageList\n        user={user}\n        style={{ width: \"650px\", height: \"450px\" }}\n        alignment={\"standard\"} //['standard','leftAligned']\n        excludeMessageOptions={excludeMessageOptions}\n        customMessageOptions={customMessageOptions}\n        sentMessageInputData={{\n          thumbnail: false,\n          title: false,\n          time: true,\n          readReceipt: true,\n        }}\n        messageBubbleConfiguration={messageBubbleConfig}\n        messageTypes={{}}\n      />\n\n      {launchReminder ? (\n        <CometChatPopover position=\"left\" x=\"750\" y=\"350\">\n          {customView}\n        </CometChatPopover>\n      ) : null}\n    </>\n  ) : null;\n};\n\nexport { ExcludeMessageOptions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
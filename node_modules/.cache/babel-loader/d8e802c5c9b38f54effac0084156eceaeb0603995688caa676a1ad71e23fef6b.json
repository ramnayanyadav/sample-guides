{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { CometChatMessageEvents } from \"../../../\";\nimport { CometChatConversationEvents } from \"../CometChatConversationEvents\";\nexport const Hooks = (onConversationClickHandler, updateMessageList, backButtonClickHandler, conversationRef, activeConversation) => {\n  _s();\n  /**ids */\n  const onItemClickId = \"onItemClick_\" + new Date().getTime();\n  const onDeleteConversationId = \"onDeleteConversation_\" + new Date().getTime();\n  const onMessageReadId = \"onMessageRead_\" + new Date().getTime();\n  const onMessageSentId = \"onMessageSent_\" + new Date().getTime();\n  const onBackButtonClickId = \"onBackButtonClick_\" + new Date().getTime();\n  useEffect(() => {\n    CometChatConversationEvents.addListener(CometChatConversationEvents.onItemClick, onItemClickId, onConversationClickHandler);\n    CometChatConversationEvents.addListener(CometChatConversationEvents.onDeleteConversation, onDeleteConversationId, data => updateMessageList(data, activeConversation));\n    CometChatMessageEvents.addListener(CometChatMessageEvents.onMessageRead, onMessageReadId, data => {\n      var _conversationRef$curr, _conversationRef$curr2;\n      return conversationRef === null || conversationRef === void 0 ? void 0 : (_conversationRef$curr = conversationRef.current) === null || _conversationRef$curr === void 0 ? void 0 : (_conversationRef$curr2 = _conversationRef$curr.conversationListRef) === null || _conversationRef$curr2 === void 0 ? void 0 : _conversationRef$curr2.resetUnreadCount(data);\n    });\n    CometChatMessageEvents.addListener(CometChatMessageEvents.onMessageSent, onMessageSentId, data => {\n      var _conversationRef$curr3, _conversationRef$curr4;\n      return conversationRef === null || conversationRef === void 0 ? void 0 : (_conversationRef$curr3 = conversationRef.current) === null || _conversationRef$curr3 === void 0 ? void 0 : (_conversationRef$curr4 = _conversationRef$curr3.conversationListRef) === null || _conversationRef$curr4 === void 0 ? void 0 : _conversationRef$curr4.updateLastMessage(data === null || data === void 0 ? void 0 : data.message);\n    });\n    CometChatMessageEvents.addListener(CometChatMessageEvents.onBackButtonClick, onBackButtonClickId, backButtonClickHandler);\n    return () => {\n      CometChatConversationEvents.removeListener(CometChatConversationEvents.onItemClick, onItemClickId);\n      CometChatConversationEvents.removeListener(CometChatConversationEvents.onDeleteConversation, onDeleteConversationId);\n      CometChatConversationEvents.removeListener(CometChatMessageEvents.onMessageRead, onMessageReadId);\n      CometChatConversationEvents.removeListener(CometChatMessageEvents.onMessageSent, onMessageSentId);\n      CometChatConversationEvents.removeListener(CometChatMessageEvents.onBackButtonClick, onBackButtonClickId);\n    };\n  }, [activeConversation]);\n};\n_s(Hooks, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Hooks;\nvar _c;\n$RefreshReg$(_c, \"Hooks\");","map":{"version":3,"names":["React","useEffect","CometChatMessageEvents","CometChatConversationEvents","Hooks","onConversationClickHandler","updateMessageList","backButtonClickHandler","conversationRef","activeConversation","onItemClickId","Date","getTime","onDeleteConversationId","onMessageReadId","onMessageSentId","onBackButtonClickId","addListener","onItemClick","onDeleteConversation","data","onMessageRead","current","conversationListRef","resetUnreadCount","onMessageSent","updateLastMessage","message","onBackButtonClick","removeListener"],"sources":["/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Chats/CometChatConversationsWithMessages/hooks.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { CometChatMessageEvents } from \"../../../\";\nimport { CometChatConversationEvents } from \"../CometChatConversationEvents\"\n\nexport const Hooks = (\n    onConversationClickHandler,\n    updateMessageList,\n    backButtonClickHandler,\n    conversationRef,\n    activeConversation\n) => {\n\n    /**ids */\n    const onItemClickId = \"onItemClick_\" + new Date().getTime();\n    const onDeleteConversationId = \"onDeleteConversation_\" + new Date().getTime();\n    const onMessageReadId = \"onMessageRead_\" + new Date().getTime();\n    const onMessageSentId = \"onMessageSent_\" + new Date().getTime();\n    const onBackButtonClickId = \"onBackButtonClick_\" + new Date().getTime();\n\n    useEffect(() => {\n        CometChatConversationEvents.addListener(\n            CometChatConversationEvents.onItemClick,\n            onItemClickId,\n            onConversationClickHandler\n        );\n        CometChatConversationEvents.addListener(\n            CometChatConversationEvents.onDeleteConversation,\n            onDeleteConversationId,\n            (data) => updateMessageList(data, activeConversation)\n        );\n        CometChatMessageEvents.addListener(\n            CometChatMessageEvents.onMessageRead,\n            onMessageReadId,\n            (data) => conversationRef?.current?.conversationListRef?.resetUnreadCount(data)\n        );\n        CometChatMessageEvents.addListener(\n            CometChatMessageEvents.onMessageSent,\n            onMessageSentId,\n            (data) => conversationRef?.current?.conversationListRef?.updateLastMessage(data?.message)\n        );\n        CometChatMessageEvents.addListener(\n            CometChatMessageEvents.onBackButtonClick,\n            onBackButtonClickId,\n            backButtonClickHandler\n        );\n\n        return () => {\n            CometChatConversationEvents.removeListener(CometChatConversationEvents.onItemClick, onItemClickId);\n            CometChatConversationEvents.removeListener(CometChatConversationEvents.onDeleteConversation, onDeleteConversationId);\n            CometChatConversationEvents.removeListener(CometChatMessageEvents.onMessageRead, onMessageReadId);\n            CometChatConversationEvents.removeListener(CometChatMessageEvents.onMessageSent, onMessageSentId);\n            CometChatConversationEvents.removeListener(CometChatMessageEvents.onBackButtonClick, onBackButtonClickId);\n        }\n    }, [activeConversation]);\n};"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,sBAAsB,QAAQ,WAAW;AAClD,SAASC,2BAA2B,QAAQ,gCAAgC;AAE5E,OAAO,MAAMC,KAAK,GAAG,CACjBC,0BAA0B,EAC1BC,iBAAiB,EACjBC,sBAAsB,EACtBC,eAAe,EACfC,kBAAkB,KACjB;EAAA;EAED;EACA,MAAMC,aAAa,GAAG,cAAc,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;EAC3D,MAAMC,sBAAsB,GAAG,uBAAuB,GAAG,IAAIF,IAAI,EAAE,CAACC,OAAO,EAAE;EAC7E,MAAME,eAAe,GAAG,gBAAgB,GAAG,IAAIH,IAAI,EAAE,CAACC,OAAO,EAAE;EAC/D,MAAMG,eAAe,GAAG,gBAAgB,GAAG,IAAIJ,IAAI,EAAE,CAACC,OAAO,EAAE;EAC/D,MAAMI,mBAAmB,GAAG,oBAAoB,GAAG,IAAIL,IAAI,EAAE,CAACC,OAAO,EAAE;EAEvEX,SAAS,CAAC,MAAM;IACZE,2BAA2B,CAACc,WAAW,CACnCd,2BAA2B,CAACe,WAAW,EACvCR,aAAa,EACbL,0BAA0B,CAC7B;IACDF,2BAA2B,CAACc,WAAW,CACnCd,2BAA2B,CAACgB,oBAAoB,EAChDN,sBAAsB,EACrBO,IAAI,IAAKd,iBAAiB,CAACc,IAAI,EAAEX,kBAAkB,CAAC,CACxD;IACDP,sBAAsB,CAACe,WAAW,CAC9Bf,sBAAsB,CAACmB,aAAa,EACpCP,eAAe,EACdM,IAAI;MAAA;MAAA,OAAKZ,eAAe,aAAfA,eAAe,gDAAfA,eAAe,CAAEc,OAAO,oFAAxB,sBAA0BC,mBAAmB,2DAA7C,uBAA+CC,gBAAgB,CAACJ,IAAI,CAAC;IAAA,EAClF;IACDlB,sBAAsB,CAACe,WAAW,CAC9Bf,sBAAsB,CAACuB,aAAa,EACpCV,eAAe,EACdK,IAAI;MAAA;MAAA,OAAKZ,eAAe,aAAfA,eAAe,iDAAfA,eAAe,CAAEc,OAAO,qFAAxB,uBAA0BC,mBAAmB,2DAA7C,uBAA+CG,iBAAiB,CAACN,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEO,OAAO,CAAC;IAAA,EAC5F;IACDzB,sBAAsB,CAACe,WAAW,CAC9Bf,sBAAsB,CAAC0B,iBAAiB,EACxCZ,mBAAmB,EACnBT,sBAAsB,CACzB;IAED,OAAO,MAAM;MACTJ,2BAA2B,CAAC0B,cAAc,CAAC1B,2BAA2B,CAACe,WAAW,EAAER,aAAa,CAAC;MAClGP,2BAA2B,CAAC0B,cAAc,CAAC1B,2BAA2B,CAACgB,oBAAoB,EAAEN,sBAAsB,CAAC;MACpHV,2BAA2B,CAAC0B,cAAc,CAAC3B,sBAAsB,CAACmB,aAAa,EAAEP,eAAe,CAAC;MACjGX,2BAA2B,CAAC0B,cAAc,CAAC3B,sBAAsB,CAACuB,aAAa,EAAEV,eAAe,CAAC;MACjGZ,2BAA2B,CAAC0B,cAAc,CAAC3B,sBAAsB,CAAC0B,iBAAiB,EAAEZ,mBAAmB,CAAC;IAC7G,CAAC;EACL,CAAC,EAAE,CAACP,kBAAkB,CAAC,CAAC;AAC5B,CAAC;AAAC,GAlDWL,KAAK;AAAA,KAALA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
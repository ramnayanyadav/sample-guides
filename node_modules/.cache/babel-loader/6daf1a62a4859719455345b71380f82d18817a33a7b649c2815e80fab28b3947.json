{"ast":null,"code":"import translationAR from \"./resources/ar/translation.json\";\nimport translationDE from \"./resources/de/translation.json\";\nimport translationEN from \"./resources/en/translation.json\";\nimport translationES from \"./resources/es/translation.json\";\nimport translationFR from \"./resources/fr/translation.json\";\nimport translationHI from \"./resources/hi/translation.json\";\nimport translationMS from \"./resources/ms/translation.json\";\nimport translationPT from \"./resources/pt/translation.json\";\nimport translationRU from \"./resources/ru/translation.json\";\nimport translationZH from \"./resources/zh/translation.json\";\nimport translationZHTW from \"./resources/zh-tw/translation.json\";\nimport translationSV from \"./resources/sv/translation.json\";\nimport translationLT from \"./resources/lt/translation.json\";\n\n/**\n * @example\n * let resources = {\n        en: {\n            \"PARAGRAPH\": \"Cometchat is a powerful internationalization framework \",\n            \"CHATS\": \"Recent Chats\",\n        },\n        es: {\n            \"PARAGRAPH\": \"Cometchat es un poderoso marco de internacionalización\",\n            \"CHATS\": \"chats recientes\"\n        },\n    };\n    this.init({\n        lang: \"es\",\n        resources: resources\n    });\n * \n */\nclass CometChatLocalize {\n  /**Properties and constants */\n\n  /**\n   * Needs to be called at the start of the application in order to set the language\n   * @param {Object} - language & resources\n   */\n\n  /**\n   * Returns the browser language\n   * @returns {String} browser langauge i.e. en-US\n   */\n\n  /**\n   * Returns the language code\n   * @returns {String} language code i.e. en\n   */\n\n  /**\n   * Returns the active language. Return fallback language if translation is not available for the active language\n   * @returns {String} active language\n   */\n\n  /**\n   * Set the active language\n   * @param {String} language\n   */\n\n  /**\n   * Accepts the string to localize and return the localized string\n   * @param {String} str\n   * @returns {String} localized str\n   */\n  static localize(str) {\n    let language = this.getLocale();\n    return this.translations[language][str];\n  }\n\n  /**\n   * Sets the default lannguage if no language is passed in init method\n   */\n}\n\n/**\n * Returns localized string based on active language\n * @param {String} str\n * @returns {String} localized str\n */\nCometChatLocalize.fallbackLanguage = \"en\";\nCometChatLocalize.rtlLanguages = [\"ar\"];\nCometChatLocalize.direction = Object.freeze({\n  ltr: \"ltr\",\n  rtl: \"rtl\"\n});\nCometChatLocalize.translations = {\n  ar: translationAR,\n  de: translationDE,\n  en: translationEN,\n  es: translationES,\n  fr: translationFR,\n  hi: translationHI,\n  ms: translationMS,\n  pt: translationPT,\n  ru: translationRU,\n  zh: translationZH,\n  \"zh-tw\": translationZHTW,\n  sv: translationSV,\n  lt: translationLT\n};\nCometChatLocalize.init = _ref => {\n  let {\n    language,\n    resources\n  } = _ref;\n  if (language) {\n    CometChatLocalize.locale = language;\n  } else {\n    CometChatLocalize.setDefaultLanguage();\n  }\n\n  /**Override resources */\n  if (resources) {\n    for (const resource in resources) {\n      /**Add to the original array of translations if language code is not found */\n      if (!CometChatLocalize.translations[resource]) {\n        CometChatLocalize.translations[resource] = resources[resource];\n      } else {\n        for (const key in resources[resource]) {\n          CometChatLocalize.translations[resource][key] = resources[resource][key];\n        }\n      }\n    }\n  }\n};\nCometChatLocalize.getBrowserLanguage = () => {\n  return navigator.languages && navigator.languages[0] || navigator.language || navigator.userLanguage;\n};\nCometChatLocalize.getLanguageCode = () => {\n  const languageCode = CometChatLocalize.getBrowserLanguage().toLowerCase();\n\n  // check if the language set in the browser has hyphen(-), if yes split and take the first element of the array\n  if (languageCode.indexOf(\"-\") !== -1 && languageCode !== \"zh-tw\") {\n    return languageCode.split(\"-\")[0];\n  }\n  return languageCode;\n};\nCometChatLocalize.getLocale = () => {\n  let language = CometChatLocalize.locale;\n  if (!CometChatLocalize.translations.hasOwnProperty(language)) {\n    language = CometChatLocalize.fallbackLanguage;\n  }\n  return language;\n};\nCometChatLocalize.setLocale = language => {\n  CometChatLocalize.locale = language;\n};\nCometChatLocalize.setDefaultLanguage = () => {\n  // get the active language\n  const activeLanguage = CometChatLocalize.getLocale();\n  // get the browser language code\n  let browserLanguageCode = CometChatLocalize.getLanguageCode();\n\n  // if there is no active language or active language is different from browser language, update active language with browser language\n  if (!activeLanguage || activeLanguage !== browserLanguageCode) {\n    CometChatLocalize.setLocale(browserLanguageCode);\n  }\n};\nCometChatLocalize.isRTL = () => {\n  var _CometChatLocalize$rt;\n  if ((_CometChatLocalize$rt = CometChatLocalize.rtlLanguages) !== null && _CometChatLocalize$rt !== void 0 && _CometChatLocalize$rt.includes(CometChatLocalize.getLocale())) {\n    return true;\n  }\n  return false;\n};\nCometChatLocalize.getDir = () => {\n  var _CometChatLocalize$rt2;\n  if ((_CometChatLocalize$rt2 = CometChatLocalize.rtlLanguages) !== null && _CometChatLocalize$rt2 !== void 0 && _CometChatLocalize$rt2.includes(CometChatLocalize.getLocale())) {\n    return CometChatLocalize.direction.rtl;\n  }\n  return CometChatLocalize.direction.ltr;\n};\nconst localize = str => CometChatLocalize.localize(str);\nexport { CometChatLocalize, localize };","map":{"version":3,"names":["translationAR","translationDE","translationEN","translationES","translationFR","translationHI","translationMS","translationPT","translationRU","translationZH","translationZHTW","translationSV","translationLT","CometChatLocalize","localize","str","language","getLocale","translations","fallbackLanguage","rtlLanguages","direction","Object","freeze","ltr","rtl","ar","de","en","es","fr","hi","ms","pt","ru","zh","sv","lt","init","resources","locale","setDefaultLanguage","resource","key","getBrowserLanguage","navigator","languages","userLanguage","getLanguageCode","languageCode","toLowerCase","indexOf","split","hasOwnProperty","setLocale","activeLanguage","browserLanguageCode","isRTL","includes","getDir"],"sources":["/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Shared/PrimaryComponents/CometChatLocalize/index.js"],"sourcesContent":["import translationAR from \"./resources/ar/translation.json\";\nimport translationDE from \"./resources/de/translation.json\";\nimport translationEN from \"./resources/en/translation.json\";\nimport translationES from \"./resources/es/translation.json\";\nimport translationFR from \"./resources/fr/translation.json\";\nimport translationHI from \"./resources/hi/translation.json\";\nimport translationMS from \"./resources/ms/translation.json\";\nimport translationPT from \"./resources/pt/translation.json\";\nimport translationRU from \"./resources/ru/translation.json\";\nimport translationZH from \"./resources/zh/translation.json\";\nimport translationZHTW from \"./resources/zh-tw/translation.json\";\nimport translationSV from \"./resources/sv/translation.json\";\nimport translationLT from \"./resources/lt/translation.json\";\n\n/**\n * @example\n * let resources = {\n        en: {\n            \"PARAGRAPH\": \"Cometchat is a powerful internationalization framework \",\n            \"CHATS\": \"Recent Chats\",\n        },\n        es: {\n            \"PARAGRAPH\": \"Cometchat es un poderoso marco de internacionalización\",\n            \"CHATS\": \"chats recientes\"\n        },\n    };\n    this.init({\n        lang: \"es\",\n        resources: resources\n    });\n * \n */\nclass CometChatLocalize {\n  /**Properties and constants */\n  static fallbackLanguage = \"en\";\n  static locale;\n  static rtlLanguages = [\"ar\"];\n  static direction = Object.freeze({\n    ltr: \"ltr\",\n    rtl: \"rtl\",\n  });\n  static translations = {\n    ar: translationAR,\n    de: translationDE,\n    en: translationEN,\n    es: translationES,\n    fr: translationFR,\n    hi: translationHI,\n    ms: translationMS,\n    pt: translationPT,\n    ru: translationRU,\n    zh: translationZH,\n    \"zh-tw\": translationZHTW,\n    sv: translationSV,\n    lt: translationLT,\n  };\n\n  /**\n   * Needs to be called at the start of the application in order to set the language\n   * @param {Object} - language & resources\n   */\n  static init = ({ language, resources }) => {\n    if (language) {\n      this.locale = language;\n    } else {\n      this.setDefaultLanguage();\n    }\n\n    /**Override resources */\n    if (resources) {\n      for (const resource in resources) {\n        /**Add to the original array of translations if language code is not found */\n        if (!this.translations[resource]) {\n          this.translations[resource] = resources[resource];\n        } else {\n          for (const key in resources[resource]) {\n            this.translations[resource][key] = resources[resource][key];\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Returns the browser language\n   * @returns {String} browser langauge i.e. en-US\n   */\n  static getBrowserLanguage = () => {\n    return (\n      (navigator.languages && navigator.languages[0]) ||\n      navigator.language ||\n      navigator.userLanguage\n    );\n  };\n\n  /**\n   * Returns the language code\n   * @returns {String} language code i.e. en\n   */\n  static getLanguageCode = () => {\n    const languageCode = this.getBrowserLanguage().toLowerCase();\n\n    // check if the language set in the browser has hyphen(-), if yes split and take the first element of the array\n    if (languageCode.indexOf(\"-\") !== -1 && languageCode !== \"zh-tw\") {\n      return languageCode.split(\"-\")[0];\n    }\n\n    return languageCode;\n  };\n\n  /**\n   * Returns the active language. Return fallback language if translation is not available for the active language\n   * @returns {String} active language\n   */\n  static getLocale = () => {\n    let language = this.locale;\n\n    if (!this.translations.hasOwnProperty(language)) {\n      language = this.fallbackLanguage;\n    }\n    return language;\n  };\n\n  /**\n   * Set the active language\n   * @param {String} language\n   */\n  static setLocale = (language) => {\n    this.locale = language;\n  };\n\n  /**\n   * Accepts the string to localize and return the localized string\n   * @param {String} str\n   * @returns {String} localized str\n   */\n  static localize(str) {\n    let language = this.getLocale();\n    return this.translations[language][str];\n  }\n\n  /**\n   * Sets the default lannguage if no language is passed in init method\n   */\n  static setDefaultLanguage = () => {\n    // get the active language\n    const activeLanguage = this.getLocale();\n    // get the browser language code\n    let browserLanguageCode = this.getLanguageCode();\n\n    // if there is no active language or active language is different from browser language, update active language with browser language\n    if (!activeLanguage || activeLanguage !== browserLanguageCode) {\n      this.setLocale(browserLanguageCode);\n    }\n  };\n\n  /**\n   * Returns true if the active language is rtl otherwise return false\n   * @returns {Boolean} whether the language is rtl or not\n   */\n  static isRTL = () => {\n    if (this.rtlLanguages?.includes(this.getLocale())) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Returns rtl or ltr based on the active language\n   * @returns {String} the direction of the active langauge\n   */\n  static getDir = () => {\n    if (this.rtlLanguages?.includes(this.getLocale())) {\n      return this.direction.rtl;\n    }\n\n    return this.direction.ltr;\n  };\n}\n\n/**\n * Returns localized string based on active language\n * @param {String} str\n * @returns {String} localized str\n */\nconst localize = (str) => CometChatLocalize.localize(str);\n\nexport { CometChatLocalize, localize };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
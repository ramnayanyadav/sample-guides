{"ast":null,"code":"var _jsxFileName = \"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Messages/CometChatMessageList/index.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatMessageEvents, messageConstants, CometChatMessageBubble, CometChatCustomMessageTypes, CometChatSmartReplies, MessageListStyles, MessageInputData, getDefaultTypes, CometChatNewMessageIndicator, CometChatMessageTemplate, CometChatMessageOptions } from \"..\";\nimport { fontHelper, ReceiverTypeConstants, MessageOptionConstants, MessageOptionForConstants, MessageListAlignmentConstants, MessageBubbleAlignmentConstants, MessageCategoryConstants, CometChatEmojiKeyboard, CometChatPopover, CometChatDecoratorMessage, CometChatListItem, getExtensionsData, ExtensionConstants, ExtensionURLs, CometChatTheme, CometChatSoundManager, CometChatLocalize, localize, CustomView } from \"../..\";\nimport loadingIcon from \"./resources/spinner.svg\";\nimport { fetchMessages, Hooks } from \"./hooks\";\nimport { MessageListManager } from \"./controller\";\nimport { chatListStyle, listWrapperStyle, decoratorMsgStyle, decoratorMsgImgStyle, decoratorMsgTxtStyle, messageBubbleStyle, smartReplyStyle, emojiKeyBoardStyle, emojiBoardToolTipStyle, messageIndicatorStyle, messageDateContainerStyle, messageDateStyle } from \"./style\";\nimport { messageStatus } from \"../CometChatMessageConstants\";\nimport { CometChatDate, DateStyles } from \"../../Shared\";\nimport { EmojiKeyboardConfiguration } from \"../\";\nimport { SmartRepliesConfiguration } from \"../CometChatSmartReplies/SmartRepliesConfiguration\";\nimport { NewMessageIndicatorConfiguration } from \"../CometChatNewMessageIndicator/NewMessageIndicatorConfiguration\";\nimport { MessageBubbleConfiguration } from \"../Bubbles/CometChatMessageBubble/MessageBubbleConfiguration\";\nimport { DateConfiguration } from \"../../Shared/PrimaryComponents/CometChatConfiguration/DateConfiguration\";\nimport { getUnixTimestamp } from \"../CometChatMessageHelper\";\n/**\n *\n * CometChatMessageList component retrieves the latest messages and presents them inside a message bubble, that a CometChat logged-in user has been a part of.\n * The state of the component is communicated via 3 states i.e empty, loading and error\n *\n * @version 1.0.0\n * @author CometChatTeam\n * @copyright Â© 2022 CometChat Inc.\n *\n *\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CometChatMessageList = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n  /**\n   * Destructuring prop values\n   */\n  const {\n    limit,\n    user,\n    group,\n    alignment,\n    messageTypes,\n    excludeMessageOptions,\n    customMessageOptions,\n    excludeMessageTypes,\n    onlyUnread,\n    hideMessagesFromBlockedUsers,\n    hideDeletedMessages,\n    tags,\n    loadingIconURL,\n    customView,\n    emptyText,\n    errorText,\n    hideError,\n    customIncomingMessageSound,\n    enableSoundForMessages,\n    sentMessageInputData,\n    receivedMessageInputData,\n    style,\n    theme,\n    messageBubbleConfiguration,\n    emojiKeyboardConfiguration,\n    smartRepliesConfiguration,\n    newMessageIndicatorConfiguration,\n    dateConfiguration\n  } = props;\n  let lastScrollTop = 0;\n  const loggedInUserRef = React.useRef(null);\n  const [messageCount, setMessageCount] = React.useState(0);\n  const [messageList, setMessageList] = React.useState([]);\n  const [unreadMessageCount, setUnreadMessageCount] = React.useState(0);\n  const callbackDataRef = React.useRef(null);\n  const chatWithRef = React.useRef(null);\n  const chatWithTypeRef = React.useRef(null);\n  const [decoratorMessage, setDecoratorMessage] = React.useState(localize(\"LOADING\"));\n  const messageTypesRef = React.useRef(null);\n  const messageCategoryRef = React.useRef(null);\n  let messageListManagerRef = React.useRef(null);\n  const messageListEndRef = React.useRef(null);\n  const [viewEmojiTray, setViewEmojiTray] = React.useState({});\n  const [messageToReact, setMessageToReact] = React.useState(null);\n  const [newMessage, setnewMessage] = React.useState({});\n  const _theme = new CometChatTheme(theme !== null && theme !== void 0 ? theme : {});\n  const _messageBubbleConfiguration = messageBubbleConfiguration || new MessageBubbleConfiguration({});\n  const _emojiKeyboardConfiguration = emojiKeyboardConfiguration || new EmojiKeyboardConfiguration({});\n  const _newMessageIndicatorConfiguration = newMessageIndicatorConfiguration || new NewMessageIndicatorConfiguration({});\n  const _dateConfiguration = dateConfiguration || new DateConfiguration({\n    pattern: \"dayDateFormat\"\n  });\n\n  /**\n   * Update messagelist\n   */\n  React.useImperativeHandle(ref, () => ({\n    addMessage: addMessage,\n    updateMessage: updateMessage,\n    removeMessage: removeMessage,\n    deleteMessage: deleteMessage,\n    scrollToBottom: scrollToBottom,\n    translateMessage: translateMessage,\n    reactToMessages: reactToMessages\n  }));\n  const messageListCallback = function (listenerName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    callbackDataRef.current = {\n      name: listenerName,\n      args: [...args]\n    };\n    try {\n      var _callbackDataRef$curr, _callbackDataRef$curr2;\n      const handler = handlers[(_callbackDataRef$curr = callbackDataRef.current) === null || _callbackDataRef$curr === void 0 ? void 0 : _callbackDataRef$curr.name];\n      if (handler) return handler(...((_callbackDataRef$curr2 = callbackDataRef.current) === null || _callbackDataRef$curr2 === void 0 ? void 0 : _callbackDataRef$curr2.args));\n    } catch (e) {\n      throw e;\n    }\n  };\n  const errorHandler = errorCode => {\n    CometChatMessageEvents.emit(CometChatMessageEvents.onMessageError, errorCode);\n  };\n  const reInitializeMessageBuilder = () => {\n    resetChatWindow();\n    setDecoratorMessage(\"loading\");\n    messageListManagerRef.current.removeListeners();\n    messageListManagerRef.current = new MessageListManager(limit, user, group, onlyUnread, hideDeletedMessages, hideMessagesFromBlockedUsers, tags, messageTypesRef.current, messageCategoryRef.current);\n    fetchMessages(messageListManagerRef === null || messageListManagerRef === void 0 ? void 0 : messageListManagerRef.current).then(messagelist => {\n      messageHandler(messagelist, true);\n      setMessageList(messagelist);\n      messageListManagerRef.current.attachListeners(messageListCallback);\n    });\n  };\n\n  /**\n   * add new message to the messageList\n   */\n  const addMessage = message => {\n    setMessageList(prevMessageList => {\n      const messagelist = [...prevMessageList];\n      messagelist.push(message);\n      return [...messagelist];\n    });\n    // scrollToBottom()\n  };\n\n  /**\n   * Set unreadCount when new message is received\n   */\n  const updateUnreadMessageCount = () => {\n    setUnreadMessageCount(unreadMessageCount + 1);\n  };\n\n  /**\n   *\n   * @param {*} message\n   * Function to play notification sound if sound for messages is enabled.\n   * It checks for custom sound and if not provided plays default sound.\n   */\n  const playNotificationSound = message => {\n    var _message$metadata;\n    if ((message === null || message === void 0 ? void 0 : message.category) === MessageCategoryConstants.message) {\n      if (enableSoundForMessages) {\n        if (customIncomingMessageSound) {\n          CometChatSoundManager.play(CometChatSoundManager.Sound.incomingMessage, customIncomingMessageSound);\n        } else {\n          CometChatSoundManager.play(CometChatSoundManager.Sound.incomingMessage);\n        }\n      }\n    } else if ((message === null || message === void 0 ? void 0 : message.category) !== MessageCategoryConstants.message && message !== null && message !== void 0 && (_message$metadata = message.metadata) !== null && _message$metadata !== void 0 && _message$metadata.incrementUnreadCount) {\n      if (enableSoundForMessages) {\n        if (customIncomingMessageSound) {\n          CometChatSoundManager.play(customIncomingMessageSound);\n        } else {\n          CometChatSoundManager.play(CometChatSoundManager.Sound.incomingMessage);\n        }\n      }\n    }\n  };\n\n  /**\n   * Update message\n   */\n  const updateMessage = function (message) {\n    let withMuid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let messageKey;\n    const messagelist = [...messageList];\n    if (withMuid) {\n      messageKey = messagelist.findIndex(m => m.muid === message.muid);\n    } else {\n      messageKey = messagelist.findIndex(m => m.id === message.id);\n    }\n    if (messageKey > -1) {\n      const messageObject = {\n        ...messageList[messageKey],\n        ...message\n      };\n      messagelist.splice(messageKey, 1, messageObject);\n      setMessageCount(messagelist.length);\n      setMessageList(messagelist);\n    }\n  };\n\n  /**\n   * Update message as read; show double blue tick\n   */\n  const updateMessageAsRead = message => {\n    const messagelist = [...messageList];\n    let messageKey = messagelist.findIndex(m => m.id === message.messageId);\n    if (messageKey > -1) {\n      const messageObject = {\n        ...messageList[messageKey]\n      };\n      messageObject.readAt = message.getReadAt();\n      messagelist.splice(messageKey, 1, messageObject);\n      setMessageList(messagelist);\n    }\n    markAllMessageAsRead(message, messageKey);\n  };\n\n  /**\n   * Update message as deleted; show deleted message bubble\n   */\n  const removeMessage = message => {\n    const messages = [...messageList];\n    let messageKey = messages.findIndex(m => m.id === message.id);\n    if (messageKey > -1) {\n      if (hideDeletedMessages) {\n        messages.splice(messageKey, 1);\n      } else {\n        const messageObject = {\n          ...messages[messageKey],\n          ...message\n        };\n        messages.splice(messageKey, 1, messageObject);\n      }\n      setMessageList([...messages]);\n    }\n  };\n\n  /**\n   *\n   * @param {*} message\n   * emits markAsRead Event\n   */\n  const markMessageAsRead = message => {\n    if (!(message !== null && message !== void 0 && message.readAt)) {\n      CometChat.markAsRead(message).catch(error => {\n        errorHandler(error);\n      });\n    }\n  };\n  const handleNewMessages = message => {\n    var _chatWithRef$current;\n    //handling dom lag - increment count only for main message list\n\n    setnewMessage(message);\n    const messageReceivedHandler = message => {\n      //if the user has not scrolled in chat window(scroll is at the bottom of the chat window)\n      setMessageCount(messageCount + 1);\n      if (messageListEndRef.current.scrollHeight - messageListEndRef.current.scrollTop - messageListEndRef.current.clientHeight <= 1) {\n        if (messageCount > messageConstants.maximumNumOfMessages) {\n          reInitializeMessageBuilder();\n        } else {\n          playNotificationSound(message);\n          addMessage(message);\n          scrollToBottom();\n          markMessageAsRead(message);\n          CometChatMessageEvents.emit(CometChatMessageEvents.onMessageRead, message);\n        }\n      } else {\n        //if the user has scrolled up in chat window\n        playNotificationSound(message);\n        addMessage(message);\n        updateUnreadMessageCount();\n      }\n    };\n\n    /**\n     * message receiver is chat window group\n     */\n    if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === ReceiverTypeConstants.group && message.getReceiverType() === ReceiverTypeConstants.group && message.getReceiverId() === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current = chatWithRef.current) === null || _chatWithRef$current === void 0 ? void 0 : _chatWithRef$current.guid)) {\n      messageReceivedHandler(message);\n    } else if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === ReceiverTypeConstants.user && message.getReceiverType() === ReceiverTypeConstants.user) {\n      var _chatWithRef$current2, _loggedInUserRef$curr, _loggedInUserRef$curr2, _chatWithRef$current3;\n      /**\n       * If the message sender is chat window user and message receiver is logged-in user\n       * OR\n       * If the message sender is logged-in user and message receiver is chat window user\n       */\n      if (message.getSender().uid === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current2 = chatWithRef.current) === null || _chatWithRef$current2 === void 0 ? void 0 : _chatWithRef$current2.uid) && message.getReceiverId() === (loggedInUserRef === null || loggedInUserRef === void 0 ? void 0 : (_loggedInUserRef$curr = loggedInUserRef.current) === null || _loggedInUserRef$curr === void 0 ? void 0 : _loggedInUserRef$curr.uid) || message.getSender().uid === (loggedInUserRef === null || loggedInUserRef === void 0 ? void 0 : (_loggedInUserRef$curr2 = loggedInUserRef.current) === null || _loggedInUserRef$curr2 === void 0 ? void 0 : _loggedInUserRef$curr2.uid) && message.getReceiverId() === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current3 = chatWithRef.current) === null || _chatWithRef$current3 === void 0 ? void 0 : _chatWithRef$current3.uid)) {\n        messageReceivedHandler(message);\n      }\n    }\n  };\n  const handleNewCustomMessages = message => {\n    var _loggedInUserRef$curr3, _chatWithRef$current4, _chatWithRef$current5, _chatWithRef$current6, _loggedInUserRef$curr4, _chatWithRef$current7;\n    const customMessageReceivedHandler = message => {\n      setMessageCount(messageCount + 1);\n      //if the user has not scrolled in chat window(scroll is at the bottom of the chat window)\n      if (messageListEndRef.current.scrollHeight - messageListEndRef.current.scrollTop - messageListEndRef.current.clientHeight <= 1) {\n        if (messageCount > messageConstants.maximumNumOfMessages) {\n          reInitializeMessageBuilder();\n        } else {\n          playNotificationSound(message);\n          addMessage(message);\n          scrollToBottom();\n          markMessageAsRead(message);\n          CometChatMessageEvents.emit(CometChatMessageEvents.onMessageRead, message);\n        }\n      } else {\n        //if the user has scrolled in chat window\n        playNotificationSound(message);\n        addMessage(message);\n        updateUnreadMessageCount();\n      }\n    };\n    if (chatWithTypeRef.current === ReceiverTypeConstants.group && message.getReceiverType() === ReceiverTypeConstants.group && ((_loggedInUserRef$curr3 = loggedInUserRef.current) === null || _loggedInUserRef$curr3 === void 0 ? void 0 : _loggedInUserRef$curr3.uid) === message.getSender().uid && message.getReceiverId() === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current4 = chatWithRef.current) === null || _chatWithRef$current4 === void 0 ? void 0 : _chatWithRef$current4.guid) && (message.type === CometChatCustomMessageTypes.poll || message.type === CometChatCustomMessageTypes.document || message.type === CometChatCustomMessageTypes.whiteboard)) {\n      playNotificationSound();\n      addMessage(message);\n      scrollToBottom();\n    } else if (chatWithTypeRef.current === ReceiverTypeConstants.group && message.getReceiverType() === ReceiverTypeConstants.group && message.getReceiverId() === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current5 = chatWithRef.current) === null || _chatWithRef$current5 === void 0 ? void 0 : _chatWithRef$current5.guid)) {\n      customMessageReceivedHandler(message, ReceiverTypeConstants.group);\n    } else if (chatWithTypeRef.current === ReceiverTypeConstants.user && message.getReceiverType() === ReceiverTypeConstants.user && message.getSender().uid === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current6 = chatWithRef.current) === null || _chatWithRef$current6 === void 0 ? void 0 : _chatWithRef$current6.uid)) {\n      customMessageReceivedHandler(message, ReceiverTypeConstants.user);\n    } else if (chatWithTypeRef.current === ReceiverTypeConstants.user && message.getReceiverType() === ReceiverTypeConstants.user && ((_loggedInUserRef$curr4 = loggedInUserRef.current) === null || _loggedInUserRef$curr4 === void 0 ? void 0 : _loggedInUserRef$curr4.uid) === message.getSender().uid && message.getReceiverId() === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current7 = chatWithRef.current) === null || _chatWithRef$current7 === void 0 ? void 0 : _chatWithRef$current7.uid) && (message.type === CometChatCustomMessageTypes.poll || message.type === CometChatCustomMessageTypes.document || message.type === CometChatCustomMessageTypes.whiteboard)) {\n      playNotificationSound(message);\n      addMessage(message);\n      scrollToBottom();\n    }\n  };\n  const markAllMessageAsDelivered = (readMessage, messageKey) => {\n    for (let i = messageKey; i >= 0; i--) {\n      var _messageList$i;\n      if (!((_messageList$i = messageList[i]) !== null && _messageList$i !== void 0 && _messageList$i.deliveredAt)) {\n        messageList[i].deliveredAt = readMessage === null || readMessage === void 0 ? void 0 : readMessage.getDeliveredAt();\n      }\n    }\n  };\n  const markAllMessageAsRead = (readMessage, messageKey) => {\n    for (let i = messageKey; i >= 0; i--) {\n      var _messageList$i2;\n      if (!((_messageList$i2 = messageList[i]) !== null && _messageList$i2 !== void 0 && _messageList$i2.readAt)) {\n        messageList[i].readAt = readMessage === null || readMessage === void 0 ? void 0 : readMessage.getReadAt();\n      }\n    }\n  };\n  const handleMessageDeliveryAndReadReceipt = messageReceipt => {\n    var _messageReceipt$getSe, _chatWithRef$current8, _chatWithRef$current9;\n    //read receipts\n    if ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.getReceiverType()) === ReceiverTypeConstants.user && (messageReceipt === null || messageReceipt === void 0 ? void 0 : (_messageReceipt$getSe = messageReceipt.getSender()) === null || _messageReceipt$getSe === void 0 ? void 0 : _messageReceipt$getSe.getUid()) === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current8 = chatWithRef.current) === null || _chatWithRef$current8 === void 0 ? void 0 : _chatWithRef$current8.uid) && (messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.getReceiver()) === loggedInUserRef.current.uid) {\n      if ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.getReceiptType()) === \"delivery\") {\n        updateMessageAsDelivered(messageReceipt);\n      } else if ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.getReceiptType()) === \"read\") {\n        updateMessageAsRead(messageReceipt);\n      }\n    } else if ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.getReceiverType()) === ReceiverTypeConstants.group && (messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.getReceiver()) === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current9 = chatWithRef.current) === null || _chatWithRef$current9 === void 0 ? void 0 : _chatWithRef$current9.guid)) {}\n  };\n  const handleMessageDelete = message => {\n    var _chatWithRef$current10, _chatWithRef$current11;\n    if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === ReceiverTypeConstants.group && message.getReceiverType() === ReceiverTypeConstants.group && message.getReceiverId() === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current10 = chatWithRef.current) === null || _chatWithRef$current10 === void 0 ? void 0 : _chatWithRef$current10.guid)) {\n      removeMessage(message);\n    } else if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === ReceiverTypeConstants.user && message.getReceiverType() === ReceiverTypeConstants.user && message.getSender().uid === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current11 = chatWithRef.current) === null || _chatWithRef$current11 === void 0 ? void 0 : _chatWithRef$current11.uid)) {\n      removeMessage(message);\n    }\n  };\n  const handleMessageEdit = message => {\n    var _chatWithRef$current12, _chatWithRef$current13, _chatWithRef$current14;\n    if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === ReceiverTypeConstants.group && message.getReceiverType() === ReceiverTypeConstants.group && message.getReceiverId() === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current12 = chatWithRef.current) === null || _chatWithRef$current12 === void 0 ? void 0 : _chatWithRef$current12.guid)) {\n      updateMessage(message);\n    } else if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === ReceiverTypeConstants.user && message.getReceiverType() === ReceiverTypeConstants.user && loggedInUserRef.current.uid === message.getReceiverId() && message.getSender().uid === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current13 = chatWithRef.current) === null || _chatWithRef$current13 === void 0 ? void 0 : _chatWithRef$current13.uid)) {\n      updateMessage(message);\n    } else if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === ReceiverTypeConstants.user && message.getReceiverType() === ReceiverTypeConstants.user && loggedInUserRef.current.uid === message.getSender().uid && message.getReceiverId() === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current14 = chatWithRef.current) === null || _chatWithRef$current14 === void 0 ? void 0 : _chatWithRef$current14.uid)) {\n      updateMessage(message);\n    }\n  };\n  const handleNewGroupActionMessage = message => {\n    var _chatWithRef$current15;\n    if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === ReceiverTypeConstants.group && message.getReceiverType() === ReceiverTypeConstants.group && message.getReceiverId() === (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current15 = chatWithRef.current) === null || _chatWithRef$current15 === void 0 ? void 0 : _chatWithRef$current15.guid)) {\n      playNotificationSound(message);\n      addMessage(message);\n      // scrollToBottom();\n      markMessageAsRead(message);\n      CometChatMessageEvents.emit(CometChatMessageEvents.onMessageRead, message);\n    }\n  };\n\n  /**\n   * update message list\n   */\n  const prependMessages = messages => {\n    const messagelist = [...messages, ...messageList];\n    setMessageList(messagelist);\n    setMessageCount(messagelist.length);\n  };\n  const messageHandler = (messagelist, scroll, val) => {\n    messagelist.forEach(message => {\n      var _message$getSender, _loggedInUserRef$curr5;\n      //if the sender of the message is not the loggedin user, mark the message as read.\n      if ((message === null || message === void 0 ? void 0 : (_message$getSender = message.getSender()) === null || _message$getSender === void 0 ? void 0 : _message$getSender.getUid()) !== ((_loggedInUserRef$curr5 = loggedInUserRef.current) === null || _loggedInUserRef$curr5 === void 0 ? void 0 : _loggedInUserRef$curr5.uid) && !(message !== null && message !== void 0 && message.readAt)) {\n        if (message.getReceiverType() === ReceiverTypeConstants.user) {\n          markMessageAsRead(message);\n          CometChatMessageEvents.emit(CometChatMessageEvents.onMessageRead, message);\n        } else if (message.getReceiverType() === ReceiverTypeConstants.group) {\n          markMessageAsRead(message);\n          CometChatMessageEvents.emit(CometChatMessageEvents.onMessageRead, message);\n        }\n      }\n    });\n    if (scroll) {\n      const lastScrollPoint = val || 0;\n      scrollToBottom(lastScrollPoint);\n    }\n  };\n  const scrollToBottom = function () {\n    let scrollHeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    setTimeout(() => {\n      if (messageListEndRef && messageListEndRef.current) {\n        messageListEndRef.current.scrollTop = messageListEndRef.current.scrollHeight - scrollHeight;\n      }\n    }, 10);\n  };\n  const handleScroll = event => {\n    const scrollTop = event.currentTarget.scrollTop;\n    const scrollHeight = event.currentTarget.scrollHeight;\n    const clientHeight = event.currentTarget.clientHeight;\n    lastScrollTop = scrollHeight - scrollTop;\n    if (lastScrollTop - clientHeight <= 1) {\n      scrolledToBottom();\n    }\n    const top = Math.round(scrollTop) === 0;\n    if (top && messageList.length) {\n      fetchMessages(messageListManagerRef === null || messageListManagerRef === void 0 ? void 0 : messageListManagerRef.current).then(messageList => {\n        messageHandler(messageList, false);\n      }).catch(error => {\n        errorHandler(error);\n        setDecoratorMessage(localize(\"SOMETHING_WRONG\"));\n      });\n    }\n  };\n\n  /**\n   * Update message as delivered; show double grey tick\n   */\n  const updateMessageAsDelivered = message => {\n    const messagelist = [...messageList];\n    let messageKey = messagelist.findIndex(m => m.id === message.messageId);\n    if (messageKey > -1) {\n      const messageObject = {\n        ...messageList[messageKey]\n      };\n      messageObject.deliveredAt = message.getDeliveredAt();\n      messagelist === null || messagelist === void 0 ? void 0 : messagelist.splice(messageKey, 1, messageObject);\n      setMessageList(messagelist);\n    }\n    markAllMessageAsDelivered(message, messageKey);\n  };\n\n  /**\n   * Upon scrolling to bottom, reload the chat if messages cross the maximum count,\n   * or else render and update (mark them as read) the stored messages\n   */\n  const scrolledToBottom = () => {\n    if (unreadMessageCount <= 0) {\n      return false;\n    }\n    const totalMessageCount = messageList.length + unreadMessageCount;\n    const message = messageList[messageList.length - 1];\n    let messageKey = messageList[messageList.length - 1];\n    if (totalMessageCount > messageConstants.maximumNumOfMessages) {\n      reInitializeMessageBuilder();\n    } else {\n      setUnreadMessageCount(0);\n      scrollToBottom();\n      markMessageAsRead(message);\n      markAllMessageAsRead(message, messageKey);\n      CometChatMessageEvents.emit(CometChatMessageEvents.onMessageRead, message);\n    }\n  };\n\n  /**\n   * upon scrolling to the bottom, update the unread messagess\n   */\n\n  /**\n   * reset message list\n   */\n  const resetChatWindow = () => {\n    setMessageList([]);\n    setUnreadMessageCount(0);\n    setMessageCount(0);\n    setnewMessage({});\n  };\n  const handlers = {\n    onTextMessageReceived: handleNewMessages,\n    onMediaMessageReceived: handleNewMessages,\n    onCustomMessageReceived: handleNewCustomMessages,\n    onMessagesDelivered: handleMessageDeliveryAndReadReceipt,\n    onMessagesRead: handleMessageDeliveryAndReadReceipt,\n    onMessageDeleted: handleMessageDelete,\n    onMessageEdited: handleMessageEdit,\n    onGroupMemberScopeChanged: handleNewGroupActionMessage,\n    onGroupMemberKicked: handleNewGroupActionMessage,\n    onGroupMemberBanned: handleNewGroupActionMessage,\n    onGroupMemberUnbanned: handleNewGroupActionMessage,\n    onMemberAddedToGroup: handleNewGroupActionMessage,\n    onGroupMemberLeft: handleNewGroupActionMessage,\n    onGroupMemberJoined: handleNewGroupActionMessage\n  };\n  Hooks(limit, user, group, excludeMessageTypes, onlyUnread, hideDeletedMessages, hideMessagesFromBlockedUsers, tags, messageTypes, loggedInUserRef, messageList, setMessageList, setDecoratorMessage, messageHandler, messageListCallback, messageTypesRef, messageCategoryRef, messageListManagerRef, localize, errorHandler, chatWithRef, chatWithTypeRef, setMessageCount, setnewMessage);\n\n  /**\n   *\n   * @param {*} message\n   * returns translated text and push it into metadata of message Object\n   */\n  const translateMessage = message => {\n    const messageId = message.id;\n    const messageText = message.text;\n    let translateToLanguage = CometChatLocalize.getLocale();\n    let translateMessage = \"\";\n    CometChat.callExtension(ExtensionConstants.messageTranslation, \"POST\", ExtensionURLs.translate, {\n      msgId: messageId,\n      text: messageText,\n      languages: [translateToLanguage]\n    }).then(result => {\n      if (result !== null && result !== void 0 && result.hasOwnProperty(\"translations\") && result.translations.length) {\n        const messageTranslation = result.translations[0];\n        translateMessage = `${messageTranslation[\"message_translated\"]}`;\n        if (message.hasOwnProperty(\"metadata\")) {\n          Object.assign(message.metadata, {\n            translatedText: translateMessage\n          });\n        } else {\n          Object.assign(message, {\n            metadata: {\n              translatedText: translateMessage\n            }\n          });\n        }\n        updateMessage(message);\n      }\n    }).catch(error => {\n      errorHandler(error);\n    });\n  };\n\n  /**\n   *\n   * @param {*} message\n   * emits edit Message event\n   */\n  const editMessage = message => {\n    CometChatMessageEvents.emit(CometChatMessageEvents.onMessageEdit, {\n      message: message,\n      status: messageStatus.inprogress\n    });\n  };\n\n  /**\n   *\n   * @param {*} message\n   * copies message text to the clipboard\n   */\n  const copyMessage = message => {\n    navigator.clipboard.writeText(message.text);\n  };\n\n  /**\n   *\n   * @param {*} message\n   * Deletes the selected message\n   */\n  const deleteMessage = message => {\n    CometChat.deleteMessage(message.id).then(deletedMessage => {\n      removeMessage(deletedMessage);\n    }).catch(error => {\n      errorHandler(error);\n    });\n  };\n\n  /**\n   *\n   * @param {*} message\n   * @param {*} event\n   * set visibility of Emoji Tray to true\n   */\n  const onReactToMessages = (message, event, emoji) => {\n    // To remove reaction by clicking on the reacted emoji\n    if (emoji) {\n      reactToMessages(message, emoji);\n    }\n    // Open EmojiTray When clicked on Reaction messageOption or Add Reaction button\n    else {\n      setMessageToReact(message);\n      setViewEmojiTray(old => {\n        return {\n          emojiTrayPreview: !old.emojiTrayPreview,\n          event: event\n        };\n      });\n    }\n  };\n\n  /**\n   *\n   * @param {*} emojiObject\n   * triggers reactToMessages function after closing the emojiKeyboard\n   */\n  const onReactionSelected = emojiObject => {\n    setViewEmojiTray(old => {\n      return {\n        emojiTrayPreview: !old.emojiTrayPreview\n      };\n    });\n    reactToMessages(messageToReact, emojiObject);\n  };\n\n  /**\n   *\n   * @returns EmojiKeyboard inside tooltip\n   */\n  const emojiBoard = () => {\n    if (viewEmojiTray.emojiTrayPreview) {\n      var _viewEmojiTray$event, _viewEmojiTray$event2;\n      return /*#__PURE__*/_jsxDEV(CometChatPopover, {\n        position: \"top\",\n        x: viewEmojiTray === null || viewEmojiTray === void 0 ? void 0 : (_viewEmojiTray$event = viewEmojiTray.event) === null || _viewEmojiTray$event === void 0 ? void 0 : _viewEmojiTray$event.clientX,\n        y: viewEmojiTray === null || viewEmojiTray === void 0 ? void 0 : (_viewEmojiTray$event2 = viewEmojiTray.event) === null || _viewEmojiTray$event2 === void 0 ? void 0 : _viewEmojiTray$event2.clientY,\n        style: emojiBoardToolTipStyle(_theme),\n        children: /*#__PURE__*/_jsxDEV(CometChatEmojiKeyboard, {\n          style: emojiKeyBoardStyle(_theme),\n          hideSearch: _emojiKeyboardConfiguration.hideSearch,\n          theme: _theme,\n          onClick: onReactionSelected.bind(this) || _emojiKeyboardConfiguration.onClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 854,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  };\n\n  /**\n   *\n   * @param {*} message\n   * @param {*} emoji\n   * Calls extension reaction to Messages\n   */\n  const reactToMessages = (message, emoji) => {\n    var _loggedInUserRef$curr6, _loggedInUserRef$curr7, _loggedInUserRef$curr8, _loggedInUserRef$curr9;\n    let reactionObject = {};\n    let newMessageObject = {};\n    let messageObject = {\n      ...message\n    };\n    const userObject = {};\n    if (loggedInUserRef !== null && loggedInUserRef !== void 0 && (_loggedInUserRef$curr6 = loggedInUserRef.current) !== null && _loggedInUserRef$curr6 !== void 0 && (_loggedInUserRef$curr7 = _loggedInUserRef$curr6.avatar) !== null && _loggedInUserRef$curr7 !== void 0 && _loggedInUserRef$curr7.length) {\n      userObject[\"avatar\"] = loggedInUserRef.current.avatar;\n    }\n    if (loggedInUserRef !== null && loggedInUserRef !== void 0 && (_loggedInUserRef$curr8 = loggedInUserRef.current) !== null && _loggedInUserRef$curr8 !== void 0 && (_loggedInUserRef$curr9 = _loggedInUserRef$curr8.name) !== null && _loggedInUserRef$curr9 !== void 0 && _loggedInUserRef$curr9.length) {\n      userObject[\"name\"] = loggedInUserRef.current.name;\n    }\n    const emojiObject = {\n      [emoji]: {\n        [loggedInUserRef.current.uid]: userObject\n      }\n    };\n    const reactionExtensionsData = getExtensionsData(messageObject, ExtensionConstants.reactions);\n    if (reactionExtensionsData) {\n      if (reactionExtensionsData[emoji]) {\n        //if the reactions metadata has the selected emoji/reaction for the loggedin user\n        if (reactionExtensionsData[emoji][loggedInUserRef.current.uid]) {\n          reactionObject = {\n            ...messageObject[\"metadata\"][\"@injected\"][\"extensions\"][\"reactions\"]\n          };\n          delete reactionObject[emoji][loggedInUserRef.current.uid];\n        } else {\n          reactionObject = {\n            ...messageObject[\"metadata\"][\"@injected\"][\"extensions\"][\"reactions\"],\n            [emoji]: {\n              ...messageObject[\"metadata\"][\"@injected\"][\"extensions\"][\"reactions\"][emoji],\n              [loggedInUserRef.current.uid]: userObject\n            }\n          };\n        }\n      } else {\n        reactionObject = {\n          ...messageObject[\"metadata\"][\"@injected\"][\"extensions\"][\"reactions\"],\n          ...emojiObject\n        };\n      }\n    } else {\n      if (!messageObject.hasOwnProperty(\"metadata\")) {\n        messageObject[\"metadata\"] = {};\n      }\n      if (!messageObject[\"metadata\"].hasOwnProperty(\"@injected\")) {\n        messageObject[\"metadata\"][\"@injected\"] = {};\n      }\n      if (!messageObject[\"metadata\"][\"@injected\"].hasOwnProperty(\"extensions\")) {\n        messageObject[\"metadata\"][\"@injected\"][\"extensions\"] = {};\n      }\n      if (!messageObject[\"metadata\"][\"@injected\"][\"extensions\"].hasOwnProperty(\"reactions\")) {\n        messageObject[\"metadata\"][\"@injected\"][\"extensions\"][\"reactions\"] = {};\n      }\n      reactionObject = {\n        ...emojiObject\n      };\n    }\n    const metadataObject = {\n      metadata: {\n        ...messageObject[\"metadata\"],\n        \"@injected\": {\n          ...messageObject[\"metadata\"][\"@injected\"],\n          extensions: {\n            ...messageObject[\"metadata\"][\"@injected\"][\"extensions\"],\n            reactions: {\n              ...reactionObject\n            }\n          }\n        }\n      }\n    };\n    newMessageObject = {\n      ...messageObject,\n      data: {\n        ...messageObject,\n        ...metadataObject\n      },\n      ...metadataObject\n    };\n    updateMessage(newMessageObject);\n    CometChat.callExtension(ExtensionConstants.reactions, \"POST\", ExtensionURLs.reaction, {\n      msgId: message.id,\n      emoji: emoji\n    }).catch(error => {\n      errorHandler(error);\n      updateMessage(message);\n    });\n  };\n\n  /**\n   *\n   * @param {*} messageOptions\n   * Sets MessageOptions Onclick function\n   */\n  const setOptionsCallbackData = messageOptions => {\n    let optionsList = [...messageOptions];\n    optionsList.forEach(eachMessageOption => {\n      switch (eachMessageOption.id) {\n        case MessageOptionConstants.deleteMessage:\n          if (eachMessageOption.onClick === null) {\n            eachMessageOption.onClick = deleteMessage.bind(this);\n          }\n          break;\n        case MessageOptionConstants.editMessage:\n          if (eachMessageOption.onClick === null) {\n            eachMessageOption.onClick = editMessage.bind(this);\n          }\n          break;\n        case MessageOptionConstants.copyMessage:\n          if (eachMessageOption.onClick === null) {\n            eachMessageOption.onClick = copyMessage.bind(this);\n          }\n          break;\n        case MessageOptionConstants.reactToMessage:\n          if (eachMessageOption.onClick === null) {\n            eachMessageOption.onClick = onReactToMessages.bind(this);\n          }\n          break;\n        case MessageOptionConstants.translateMessage:\n          if (eachMessageOption.onClick === null) {\n            eachMessageOption.onClick = translateMessage.bind(this);\n          }\n          break;\n        default:\n          break;\n      }\n    });\n    return optionsList;\n  };\n\n  /**\n   *\n   * @param {*} messageObject\n   * @returns messageOptions according to the type of message and sender's identity\n   */\n  const filterMessageOptions = messageObject => {\n    let _messageTypes = messageTypes && messageTypes.length ? messageTypes : getDefaultTypes();\n    let messageOptions = [];\n    // If User sends messageTypes as\n    _messageTypes.forEach(messageTemplateObject => {\n      // Checking Message types for Template object and message object to set options\n      if (messageTemplateObject.type === messageObject.type) {\n        messageOptions = messageTemplateObject.options.filter(option => {\n          var _loggedInUserRef$curr10, _messageObject$sender, _loggedInUserRef$curr11, _messageObject$sender2;\n          return (\n            // Segregating Sender and receiver options.\n\n            ((_loggedInUserRef$curr10 = loggedInUserRef.current) === null || _loggedInUserRef$curr10 === void 0 ? void 0 : _loggedInUserRef$curr10.uid) === (messageObject === null || messageObject === void 0 ? void 0 : (_messageObject$sender = messageObject.sender) === null || _messageObject$sender === void 0 ? void 0 : _messageObject$sender.uid) && option.optionFor === MessageOptionForConstants.sender || option.optionFor === MessageOptionForConstants.both || ((_loggedInUserRef$curr11 = loggedInUserRef.current) === null || _loggedInUserRef$curr11 === void 0 ? void 0 : _loggedInUserRef$curr11.uid) !== (messageObject === null || messageObject === void 0 ? void 0 : (_messageObject$sender2 = messageObject.sender) === null || _messageObject$sender2 === void 0 ? void 0 : _messageObject$sender2.uid) && option.optionFor === MessageOptionForConstants.receiver || option.optionFor === MessageOptionForConstants.both\n          );\n        });\n      }\n    });\n\n    // If user exclude's an option from options list\n    if (excludeMessageOptions && excludeMessageOptions.length) {\n      excludeMessageOptions.forEach(excludeOption => {\n        messageOptions.forEach(option => {\n          if (option.id === excludeOption) {\n            const index = messageOptions.indexOf(option);\n            if (index > -1) {\n              messageOptions.splice(index, 1); // 2nd parameter means remove one item only\n            }\n          }\n        });\n      });\n    }\n\n    // If user sends in customMessageOptions\n    if (customMessageOptions !== null && customMessageOptions !== void 0 && customMessageOptions.length) {\n      customMessageOptions.forEach(option => {\n        messageOptions.push(option);\n      });\n    }\n\n    // Setting callback data for Message Option's onClick\n    return setOptionsCallbackData(messageOptions);\n  };\n\n  /**\n   *\n   * @param {*} message\n   * @returns filtering custom View from message Types sent in by the user\n   */\n  const filterCustomView = message => {\n    if (messageTypes !== null && messageTypes !== void 0 && messageTypes.length) {\n      var _templateObject$;\n      const templateObject = messageTypes.filter(messageTemplateObject => messageTemplateObject.type === message.type && messageTemplateObject.customView);\n      if ((_templateObject$ = templateObject[0]) !== null && _templateObject$ !== void 0 && _templateObject$.customView) {\n        return templateObject[0].customView;\n      }\n      return null;\n    }\n  };\n\n  /**\n   *\n   * @param {*} customView\n   * @returns customView for handling empty,error and loading states\n   */\n  const getCustomView = customView => {\n    return /*#__PURE__*/React.createElement(customView, props);\n  };\n  const getMessageContainer = () => {\n    var _localize;\n    let messageContainer = null;\n    if (messageList.length === 0 && (decoratorMessage === null || decoratorMessage === void 0 ? void 0 : decoratorMessage.toLowerCase()) === localize(\"LOADING\").toLowerCase()) {\n      messageContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: decoratorMsgStyle(style),\n        className: \"messagelist__decorator-message\",\n        children: customView !== null && customView !== void 0 && customView.loading ? getCustomView(customView === null || customView === void 0 ? void 0 : customView.loading, props) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: decoratorMsgImgStyle(style, loadingIconURL, _theme),\n          className: \"decorator-message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1141,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1134,\n        columnNumber: 9\n      }, this);\n    } else if (messageList.length === 0 && (decoratorMessage === null || decoratorMessage === void 0 ? void 0 : decoratorMessage.toLowerCase()) === localize(\"NO_MESSAGES_FOUND\").toLowerCase()) {\n      messageContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: decoratorMsgStyle(style),\n        className: \"messagelist__decorator-message\",\n        children: customView !== null && customView !== void 0 && customView.empty ? getCustomView(customView === null || customView === void 0 ? void 0 : customView.empty, props) : /*#__PURE__*/_jsxDEV(\"p\", {\n          style: decoratorMsgTxtStyle(style, fontHelper, _theme, decoratorMessage, localize),\n          className: \"decorator-message\",\n          children: emptyText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1161,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1154,\n        columnNumber: 9\n      }, this);\n    } else if ((decoratorMessage === null || decoratorMessage === void 0 ? void 0 : decoratorMessage.toLowerCase()) === ((_localize = localize(\"NO_MESSAGE_TYPE_SET\")) === null || _localize === void 0 ? void 0 : _localize.toLowerCase())) {\n      messageContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: decoratorMsgStyle(style),\n        className: \"messagelist__decorator-message\",\n        children: customView !== null && customView !== void 0 && customView.empty ? getCustomView(customView === null || customView === void 0 ? void 0 : customView.empty, props) : /*#__PURE__*/_jsxDEV(\"p\", {\n          style: decoratorMsgTxtStyle(style, fontHelper, _theme, decoratorMessage, localize),\n          className: \"decorator-message\",\n          children: decoratorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1188,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 9\n      }, this);\n    } else if (!hideError && (decoratorMessage === null || decoratorMessage === void 0 ? void 0 : decoratorMessage.toLowerCase()) === localize(\"SOMETHING_WRONG\").toLowerCase()) {\n      messageContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: decoratorMsgStyle(style),\n        className: \"messagelist__decorator-message\",\n        children: customView !== null && customView !== void 0 && customView.error ? getCustomView(customView === null || customView === void 0 ? void 0 : customView.error, props) : /*#__PURE__*/_jsxDEV(\"p\", {\n          style: decoratorMsgTxtStyle(style, fontHelper, _theme, decoratorMessage, localize),\n          className: \"decorator-message\",\n          children: errorText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1216,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1209,\n        columnNumber: 9\n      }, this);\n    }\n    return messageContainer;\n  };\n\n  /**\n   * Empty new Message Received State to close Smart reply Preview\n   */\n  const onClose = () => {\n    setnewMessage({});\n  };\n  const _smartRepliesConfiguration = smartRepliesConfiguration || new SmartRepliesConfiguration({\n    onClose: onClose\n  });\n  /**\n   *\n   * @returns smart suggestions to the user as per the message received\n   */\n  const getSmartReplies = () => {\n    if (Object.keys(newMessage).length) {\n      return /*#__PURE__*/_jsxDEV(CometChatSmartReplies, {\n        messageObject: newMessage,\n        customOutgoingMessageSound: _smartRepliesConfiguration.customOutgoingMessageSound,\n        enableSoundForMessages: _smartRepliesConfiguration.enableSoundForMessages,\n        loggedInUser: loggedInUserRef.current,\n        onClick: _smartRepliesConfiguration.onClick,\n        style: smartReplyStyle(_theme),\n        onClose: onClose.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1252,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  /**\n   *\n   * @returns new Message Indicator banner\n   */\n  const newMessageIndicator = () => {\n    if (unreadMessageCount >= 1) {\n      const text = unreadMessageCount > 1 ? `${unreadMessageCount} ${localize(\"NEW_MESSAGES\")}` : `${unreadMessageCount} ${localize(\"NEW_MESSAGE\")}`;\n      return /*#__PURE__*/_jsxDEV(CometChatNewMessageIndicator, {\n        text: text,\n        onClick: scrolledToBottom.bind(this) || _newMessageIndicatorConfiguration.onClick,\n        Icon: _newMessageIndicatorConfiguration.Icon,\n        style: messageIndicatorStyle(_theme)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1281,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  /**\n   *\n   * @returns Items to render in Message List Component\n   */\n  const renderItems = () => {\n    // to hold date value for first message\n    let previousMessageDate = null;\n    return messageList.map(eachMessage => {\n      var _previousMessageDate, _previousMessageDate2, _previousMessageDate3, _dateConfiguration$st, _theme$palette, _theme$palette2, _dateConfiguration$st2, _theme$typography, _loggedInUserRef$curr12, _eachMessage$sender, _loggedInUserRef$curr13, _eachMessage$sender2;\n      // date label component\n      let dateSeparator = null;\n\n      // Converting Unix  timeStamp to readable date format\n      const currentMessageDate = new Date(eachMessage.sentAt * 1000);\n      const currentDate = currentMessageDate.getDate() + \"-\" + currentMessageDate.getMonth + \"-\" + currentMessageDate.getFullYear();\n      const previousDate = ((_previousMessageDate = previousMessageDate) === null || _previousMessageDate === void 0 ? void 0 : _previousMessageDate.getDate()) + \"-\" + ((_previousMessageDate2 = previousMessageDate) === null || _previousMessageDate2 === void 0 ? void 0 : _previousMessageDate2.getMonth) + \"-\" + ((_previousMessageDate3 = previousMessageDate) === null || _previousMessageDate3 === void 0 ? void 0 : _previousMessageDate3.getFullYear());\n      const pattern = _dateConfiguration === null || _dateConfiguration === void 0 ? void 0 : _dateConfiguration.pattern;\n      const customPattern = _dateConfiguration === null || _dateConfiguration === void 0 ? void 0 : _dateConfiguration.customPattern;\n      const dateStyle = new DateStyles({\n        ...(_dateConfiguration === null || _dateConfiguration === void 0 ? void 0 : _dateConfiguration.style),\n        textColor: (_dateConfiguration === null || _dateConfiguration === void 0 ? void 0 : (_dateConfiguration$st = _dateConfiguration.style) === null || _dateConfiguration$st === void 0 ? void 0 : _dateConfiguration$st.textColor) || (_theme === null || _theme === void 0 ? void 0 : (_theme$palette = _theme.palette) === null || _theme$palette === void 0 ? void 0 : _theme$palette.accent500[_theme === null || _theme === void 0 ? void 0 : (_theme$palette2 = _theme.palette) === null || _theme$palette2 === void 0 ? void 0 : _theme$palette2.mode]),\n        textFont: (_dateConfiguration === null || _dateConfiguration === void 0 ? void 0 : (_dateConfiguration$st2 = _dateConfiguration.style) === null || _dateConfiguration$st2 === void 0 ? void 0 : _dateConfiguration$st2.textFont) || fontHelper(_theme === null || _theme === void 0 ? void 0 : (_theme$typography = _theme.typography) === null || _theme$typography === void 0 ? void 0 : _theme$typography.caption2)\n      });\n\n      // Comparing Date, Month, Year of the two dates\n      if (previousDate !== currentDate) {\n        dateSeparator = /*#__PURE__*/_jsxDEV(\"div\", {\n          style: messageDateContainerStyle(_theme),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: messageDateStyle(_theme),\n            children: /*#__PURE__*/_jsxDEV(CometChatDate, {\n              timestamp: eachMessage === null || eachMessage === void 0 ? void 0 : eachMessage.sentAt,\n              pattern: pattern,\n              customPattern: customPattern,\n              style: dateStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1340,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1339,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1338,\n          columnNumber: 11\n        }, this);\n      }\n      previousMessageDate = currentMessageDate;\n      const messageKey = eachMessage.id || eachMessage.muid;\n      const className = `message__${eachMessage.type} message__kit__background`;\n      let alignmentValue = MessageBubbleAlignmentConstants.left;\n      let background;\n      let messageBubbleData = {};\n      if (alignment === (MessageListAlignmentConstants === null || MessageListAlignmentConstants === void 0 ? void 0 : MessageListAlignmentConstants.standard) && ((_loggedInUserRef$curr12 = loggedInUserRef.current) === null || _loggedInUserRef$curr12 === void 0 ? void 0 : _loggedInUserRef$curr12.uid) === (eachMessage === null || eachMessage === void 0 ? void 0 : (_eachMessage$sender = eachMessage.sender) === null || _eachMessage$sender === void 0 ? void 0 : _eachMessage$sender.uid)) {\n        alignmentValue = MessageBubbleAlignmentConstants.right;\n        background = {\n          background: _theme.palette.primary[_theme.palette.mode]\n        };\n        messageBubbleData = sentMessageInputData;\n      } else if (alignment === (MessageListAlignmentConstants === null || MessageListAlignmentConstants === void 0 ? void 0 : MessageListAlignmentConstants.left) && ((_loggedInUserRef$curr13 = loggedInUserRef.current) === null || _loggedInUserRef$curr13 === void 0 ? void 0 : _loggedInUserRef$curr13.uid) === (eachMessage === null || eachMessage === void 0 ? void 0 : (_eachMessage$sender2 = eachMessage.sender) === null || _eachMessage$sender2 === void 0 ? void 0 : _eachMessage$sender2.uid)) {\n        alignmentValue = MessageBubbleAlignmentConstants.left;\n        background = {\n          background: _theme.palette.secondary[_theme.palette.mode]\n        };\n        messageBubbleData = sentMessageInputData;\n      } else {\n        alignmentValue = MessageBubbleAlignmentConstants.left;\n        background = {\n          background: _theme.palette.secondary[_theme.palette.mode]\n        };\n        messageBubbleData = receivedMessageInputData;\n      }\n      let style = {\n        width: \"100%\",\n        height: \"100%\",\n        border: \"0 none\",\n        borderRadius: \"12px\",\n        nameTextFont: fontHelper(_theme.typography.caption1),\n        timestampFont: fontHelper(_theme.typography.caption2),\n        ...background,\n        nameTextColor: _theme.palette.accent500[_theme.palette.mode],\n        timestampColor: _theme.palette.accent[_theme.palette.mode]\n      };\n      return !eachMessage.action ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [dateSeparator, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          style: messageBubbleStyle(alignment, loggedInUserRef.current, eachMessage),\n          children: /*#__PURE__*/_jsxDEV(CometChatMessageBubble, {\n            messageBubbleData: messageBubbleData || _messageBubbleConfiguration.messageBubbleData,\n            alignment: alignmentValue,\n            timeAlignment: _messageBubbleConfiguration.timeAlignment,\n            messageObject: eachMessage,\n            messageOptions: filterMessageOptions(eachMessage),\n            loggedInUser: loggedInUserRef.current,\n            customView: filterCustomView(eachMessage),\n            style: {\n              ...style\n            },\n            theme: _theme,\n            updateReaction: onReactToMessages.bind(this)\n          }, messageKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1407,\n            columnNumber: 15\n          }, this)\n        }, messageKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1397,\n          columnNumber: 11\n        }, this)]\n      }, messageKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1395,\n        columnNumber: 9\n      }, this) : null;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message__list\",\n    style: chatListStyle(style, _theme),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list__wrapper\",\n      style: listWrapperStyle(style, _theme),\n      ref: messageListEndRef,\n      onScroll: handleScroll,\n      children: [getMessageContainer(), newMessageIndicator(), emojiBoard(), renderItems()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1432,\n      columnNumber: 7\n    }, this), getSmartReplies()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1431,\n    columnNumber: 5\n  }, this);\n}, \"vUdOjXwS/W81zV41L7iLXDIRUOk=\")), \"vUdOjXwS/W81zV41L7iLXDIRUOk=\");\n_c2 = CometChatMessageList;\nCometChatMessageList.defaultProps = {\n  limit: 30,\n  user: null,\n  group: null,\n  alignment: \"standard\",\n  messageTypes: null,\n  excludeMessageTypes: null,\n  excludeMessageOptions: null,\n  customMessageOptions: null,\n  onlyUnread: false,\n  hideMessagesFromBlockedUsers: false,\n  hideDeletedMessages: false,\n  tags: null,\n  loadingIconURL: loadingIcon,\n  customView: {\n    loading: \"\",\n    empty: \"\",\n    error: \"\"\n  },\n  emptyText: \"No messages here yet...\",\n  errorText: \"Something went wrong\",\n  hideError: false,\n  customIncomingMessageSound: \"\",\n  enableSoundForMessages: true,\n  sentMessageInputData: {\n    thumbnail: true,\n    title: true,\n    timestamp: true,\n    readReceipt: true\n  },\n  receivedMessageInputData: {\n    thumbnail: true,\n    title: true,\n    timestamp: true,\n    readReceipt: false\n  },\n  style: {\n    width: \"100%\",\n    height: \"100%\",\n    border: \"\",\n    borderRadius: \"8px\",\n    background: \"\",\n    textFont: \"400 12px Inter, sans-serif\",\n    textColor: \"rgb(20,20,20)\"\n  },\n  messageBubbleConfiguration: null,\n  emojiKeyboardConfiguration: null,\n  smartRepliesConfiguration: null,\n  newMessageIndicatorConfiguration: null,\n  dateConfiguration: null\n};\nCometChatMessageList.propTypes = {\n  limit: PropTypes.number,\n  user: PropTypes.object,\n  group: PropTypes.object,\n  alignment: PropTypes.string,\n  messageTypes: PropTypes.array,\n  excludeMessageTypes: PropTypes.array,\n  excludeMessageOptions: PropTypes.array,\n  customMessageOptions: PropTypes.array,\n  onlyUnread: PropTypes.bool,\n  hideMessagesFromBlockedUsers: PropTypes.bool,\n  hideDeletedMessages: PropTypes.bool,\n  tags: PropTypes.array,\n  loadingIconURL: PropTypes.string,\n  customView: PropTypes.object,\n  emptyText: PropTypes.string,\n  errorText: PropTypes.string,\n  hideError: PropTypes.bool,\n  customIncomingMessageSound: PropTypes.string,\n  enableSoundForMessages: PropTypes.bool,\n  sentMessageInputData: PropTypes.object,\n  receivedMessageInputData: PropTypes.object,\n  style: PropTypes.object,\n  messageBubbleConfiguration: PropTypes.object,\n  emojiKeyboardConfiguration: PropTypes.object,\n  smartRepliesConfiguration: PropTypes.object,\n  newMessageIndicatorConfiguration: PropTypes.object,\n  dateConfiguration: PropTypes.object\n};\nexport { CometChatMessageList };\nvar _c, _c2;\n$RefreshReg$(_c, \"CometChatMessageList$React.forwardRef\");\n$RefreshReg$(_c2, \"CometChatMessageList\");","map":{"version":3,"names":["React","PropTypes","CometChat","CometChatMessageEvents","messageConstants","CometChatMessageBubble","CometChatCustomMessageTypes","CometChatSmartReplies","MessageListStyles","MessageInputData","getDefaultTypes","CometChatNewMessageIndicator","CometChatMessageTemplate","CometChatMessageOptions","fontHelper","ReceiverTypeConstants","MessageOptionConstants","MessageOptionForConstants","MessageListAlignmentConstants","MessageBubbleAlignmentConstants","MessageCategoryConstants","CometChatEmojiKeyboard","CometChatPopover","CometChatDecoratorMessage","CometChatListItem","getExtensionsData","ExtensionConstants","ExtensionURLs","CometChatTheme","CometChatSoundManager","CometChatLocalize","localize","CustomView","loadingIcon","fetchMessages","Hooks","MessageListManager","chatListStyle","listWrapperStyle","decoratorMsgStyle","decoratorMsgImgStyle","decoratorMsgTxtStyle","messageBubbleStyle","smartReplyStyle","emojiKeyBoardStyle","emojiBoardToolTipStyle","messageIndicatorStyle","messageDateContainerStyle","messageDateStyle","messageStatus","CometChatDate","DateStyles","EmojiKeyboardConfiguration","SmartRepliesConfiguration","NewMessageIndicatorConfiguration","MessageBubbleConfiguration","DateConfiguration","getUnixTimestamp","CometChatMessageList","forwardRef","props","ref","limit","user","group","alignment","messageTypes","excludeMessageOptions","customMessageOptions","excludeMessageTypes","onlyUnread","hideMessagesFromBlockedUsers","hideDeletedMessages","tags","loadingIconURL","customView","emptyText","errorText","hideError","customIncomingMessageSound","enableSoundForMessages","sentMessageInputData","receivedMessageInputData","style","theme","messageBubbleConfiguration","emojiKeyboardConfiguration","smartRepliesConfiguration","newMessageIndicatorConfiguration","dateConfiguration","lastScrollTop","loggedInUserRef","useRef","messageCount","setMessageCount","useState","messageList","setMessageList","unreadMessageCount","setUnreadMessageCount","callbackDataRef","chatWithRef","chatWithTypeRef","decoratorMessage","setDecoratorMessage","messageTypesRef","messageCategoryRef","messageListManagerRef","messageListEndRef","viewEmojiTray","setViewEmojiTray","messageToReact","setMessageToReact","newMessage","setnewMessage","_theme","_messageBubbleConfiguration","_emojiKeyboardConfiguration","_newMessageIndicatorConfiguration","_dateConfiguration","pattern","useImperativeHandle","addMessage","updateMessage","removeMessage","deleteMessage","scrollToBottom","translateMessage","reactToMessages","messageListCallback","listenerName","args","current","name","handler","handlers","e","errorHandler","errorCode","emit","onMessageError","reInitializeMessageBuilder","resetChatWindow","removeListeners","then","messagelist","messageHandler","attachListeners","message","prevMessageList","push","updateUnreadMessageCount","playNotificationSound","category","play","Sound","incomingMessage","metadata","incrementUnreadCount","withMuid","messageKey","findIndex","m","muid","id","messageObject","splice","length","updateMessageAsRead","messageId","readAt","getReadAt","markAllMessageAsRead","messages","markMessageAsRead","markAsRead","catch","error","handleNewMessages","messageReceivedHandler","scrollHeight","scrollTop","clientHeight","maximumNumOfMessages","onMessageRead","getReceiverType","getReceiverId","guid","getSender","uid","handleNewCustomMessages","customMessageReceivedHandler","type","poll","document","whiteboard","markAllMessageAsDelivered","readMessage","i","deliveredAt","getDeliveredAt","handleMessageDeliveryAndReadReceipt","messageReceipt","getUid","getReceiver","getReceiptType","updateMessageAsDelivered","handleMessageDelete","handleMessageEdit","handleNewGroupActionMessage","prependMessages","scroll","val","forEach","lastScrollPoint","setTimeout","handleScroll","event","currentTarget","scrolledToBottom","top","Math","round","totalMessageCount","onTextMessageReceived","onMediaMessageReceived","onCustomMessageReceived","onMessagesDelivered","onMessagesRead","onMessageDeleted","onMessageEdited","onGroupMemberScopeChanged","onGroupMemberKicked","onGroupMemberBanned","onGroupMemberUnbanned","onMemberAddedToGroup","onGroupMemberLeft","onGroupMemberJoined","messageText","text","translateToLanguage","getLocale","callExtension","messageTranslation","translate","msgId","languages","result","hasOwnProperty","translations","Object","assign","translatedText","editMessage","onMessageEdit","status","inprogress","copyMessage","navigator","clipboard","writeText","deletedMessage","onReactToMessages","emoji","old","emojiTrayPreview","onReactionSelected","emojiObject","emojiBoard","clientX","clientY","hideSearch","bind","onClick","reactionObject","newMessageObject","userObject","avatar","reactionExtensionsData","reactions","metadataObject","extensions","data","reaction","setOptionsCallbackData","messageOptions","optionsList","eachMessageOption","reactToMessage","filterMessageOptions","_messageTypes","messageTemplateObject","options","filter","option","sender","optionFor","both","receiver","excludeOption","index","indexOf","filterCustomView","templateObject","getCustomView","createElement","getMessageContainer","messageContainer","toLowerCase","loading","empty","onClose","_smartRepliesConfiguration","getSmartReplies","keys","customOutgoingMessageSound","newMessageIndicator","Icon","renderItems","previousMessageDate","map","eachMessage","dateSeparator","currentMessageDate","Date","sentAt","currentDate","getDate","getMonth","getFullYear","previousDate","customPattern","dateStyle","textColor","palette","accent500","mode","textFont","typography","caption2","className","alignmentValue","left","background","messageBubbleData","standard","right","primary","secondary","width","height","border","borderRadius","nameTextFont","caption1","timestampFont","nameTextColor","timestampColor","accent","action","timeAlignment","defaultProps","thumbnail","title","timestamp","readReceipt","propTypes","number","object","string","array","bool"],"sources":["/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Messages/CometChatMessageList/index.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport {\n  CometChatMessageEvents,\n  messageConstants,\n  CometChatMessageBubble,\n  CometChatCustomMessageTypes,\n  CometChatSmartReplies,\n  MessageListStyles,\n  MessageInputData,\n  getDefaultTypes,\n  CometChatNewMessageIndicator,\n  CometChatMessageTemplate,\n  CometChatMessageOptions,\n} from \"..\";\n\nimport {\n  fontHelper,\n  ReceiverTypeConstants,\n  MessageOptionConstants,\n  MessageOptionForConstants,\n  MessageListAlignmentConstants,\n  MessageBubbleAlignmentConstants,\n  MessageCategoryConstants,\n  CometChatEmojiKeyboard,\n  CometChatPopover,\n  CometChatDecoratorMessage,\n  CometChatListItem,\n  getExtensionsData,\n  ExtensionConstants,\n  ExtensionURLs,\n  CometChatTheme,\n  CometChatSoundManager,\n  CometChatLocalize,\n  localize,\n  CustomView,\n} from \"../..\";\n\nimport loadingIcon from \"./resources/spinner.svg\";\n\nimport { fetchMessages, Hooks } from \"./hooks\";\n\nimport { MessageListManager } from \"./controller\";\n\nimport {\n  chatListStyle,\n  listWrapperStyle,\n  decoratorMsgStyle,\n  decoratorMsgImgStyle,\n  decoratorMsgTxtStyle,\n  messageBubbleStyle,\n  smartReplyStyle,\n  emojiKeyBoardStyle,\n  emojiBoardToolTipStyle,\n  messageIndicatorStyle,\n  messageDateContainerStyle,\n  messageDateStyle,\n} from \"./style\";\nimport { messageStatus } from \"../CometChatMessageConstants\";\n\nimport { CometChatDate, DateStyles } from \"../../Shared\";\n\nimport { EmojiKeyboardConfiguration } from \"../\";\n\nimport { SmartRepliesConfiguration } from \"../CometChatSmartReplies/SmartRepliesConfiguration\";\nimport { NewMessageIndicatorConfiguration } from \"../CometChatNewMessageIndicator/NewMessageIndicatorConfiguration\";\nimport { MessageBubbleConfiguration } from \"../Bubbles/CometChatMessageBubble/MessageBubbleConfiguration\";\nimport { DateConfiguration } from \"../../Shared/PrimaryComponents/CometChatConfiguration/DateConfiguration\";\nimport { getUnixTimestamp } from \"../CometChatMessageHelper\";\n/**\n *\n * CometChatMessageList component retrieves the latest messages and presents them inside a message bubble, that a CometChat logged-in user has been a part of.\n * The state of the component is communicated via 3 states i.e empty, loading and error\n *\n * @version 1.0.0\n * @author CometChatTeam\n * @copyright Â© 2022 CometChat Inc.\n *\n *\n */\n\nconst CometChatMessageList = React.forwardRef((props, ref) => {\n  /**\n   * Destructuring prop values\n   */\n  const {\n    limit,\n    user,\n    group,\n    alignment,\n    messageTypes,\n    excludeMessageOptions,\n    customMessageOptions,\n    excludeMessageTypes,\n    onlyUnread,\n    hideMessagesFromBlockedUsers,\n    hideDeletedMessages,\n    tags,\n    loadingIconURL,\n    customView,\n    emptyText,\n    errorText,\n    hideError,\n    customIncomingMessageSound,\n    enableSoundForMessages,\n    sentMessageInputData,\n    receivedMessageInputData,\n    style,\n    theme,\n    messageBubbleConfiguration,\n    emojiKeyboardConfiguration,\n    smartRepliesConfiguration,\n    newMessageIndicatorConfiguration,\n    dateConfiguration,\n  } = props;\n\n  let lastScrollTop = 0;\n  const loggedInUserRef = React.useRef(null);\n  const [messageCount, setMessageCount] = React.useState(0);\n  const [messageList, setMessageList] = React.useState([]);\n  const [unreadMessageCount, setUnreadMessageCount] = React.useState(0);\n  const callbackDataRef = React.useRef(null);\n  const chatWithRef = React.useRef(null);\n  const chatWithTypeRef = React.useRef(null);\n  const [decoratorMessage, setDecoratorMessage] = React.useState(\n    localize(\"LOADING\")\n  );\n  const messageTypesRef = React.useRef(null);\n  const messageCategoryRef = React.useRef(null);\n  let messageListManagerRef = React.useRef(null);\n  const messageListEndRef = React.useRef(null);\n  const [viewEmojiTray, setViewEmojiTray] = React.useState({});\n  const [messageToReact, setMessageToReact] = React.useState(null);\n\n  const [newMessage, setnewMessage] = React.useState({});\n\n  const _theme = new CometChatTheme(theme ?? {});\n\n  const _messageBubbleConfiguration =\n    messageBubbleConfiguration || new MessageBubbleConfiguration({});\n\n  const _emojiKeyboardConfiguration =\n    emojiKeyboardConfiguration || new EmojiKeyboardConfiguration({});\n\n  const _newMessageIndicatorConfiguration =\n    newMessageIndicatorConfiguration ||\n    new NewMessageIndicatorConfiguration({});\n\n  const _dateConfiguration =\n    dateConfiguration || new DateConfiguration({ pattern: \"dayDateFormat\" });\n\n  /**\n   * Update messagelist\n   */\n  React.useImperativeHandle(ref, () => ({\n    addMessage: addMessage,\n    updateMessage: updateMessage,\n    removeMessage: removeMessage,\n    deleteMessage: deleteMessage,\n    scrollToBottom: scrollToBottom,\n    translateMessage: translateMessage,\n    reactToMessages: reactToMessages,\n  }));\n\n  const messageListCallback = (listenerName, ...args) => {\n    callbackDataRef.current = { name: listenerName, args: [...args] };\n   try {\n    const handler = handlers[callbackDataRef.current?.name];\n\n    if (handler) return handler(...callbackDataRef.current?.args);\n  } catch (e) {\n    throw e;\n  }\n  };\n\n  const errorHandler = (errorCode) => {\n    CometChatMessageEvents.emit(\n      CometChatMessageEvents.onMessageError,\n      errorCode\n    );\n  };\n\n  const reInitializeMessageBuilder = () => {\n    resetChatWindow();\n\n    setDecoratorMessage(\"loading\");\n    messageListManagerRef.current.removeListeners();\n\n    messageListManagerRef.current = new MessageListManager(\n      limit,\n      user,\n      group,\n      onlyUnread,\n      hideDeletedMessages,\n      hideMessagesFromBlockedUsers,\n      tags,\n      messageTypesRef.current,\n      messageCategoryRef.current\n    );\n\n    fetchMessages(messageListManagerRef?.current).then((messagelist) => {\n      messageHandler(messagelist, true);\n      setMessageList(messagelist);\n      messageListManagerRef.current.attachListeners(messageListCallback);\n    });\n  };\n\n  /**\n   * add new message to the messageList\n   */\n  const addMessage = (message) => {\n    \n    setMessageList(prevMessageList => {\n      const messagelist = [...prevMessageList];\n      messagelist.push(message);\n      return [...messagelist]\n    }\n      );\n    // scrollToBottom()\n  };\n\n  /**\n   * Set unreadCount when new message is received\n   */\n  const updateUnreadMessageCount = () => {\n    setUnreadMessageCount(unreadMessageCount + 1);\n  };\n\n  /**\n   *\n   * @param {*} message\n   * Function to play notification sound if sound for messages is enabled.\n   * It checks for custom sound and if not provided plays default sound.\n   */\n  const playNotificationSound = (message) => {\n    if (message?.category === MessageCategoryConstants.message) {\n      if (enableSoundForMessages) {\n        if (customIncomingMessageSound) {\n          CometChatSoundManager.play(\n            CometChatSoundManager.Sound.incomingMessage,\n            customIncomingMessageSound\n          );\n        } else {\n          CometChatSoundManager.play(\n            CometChatSoundManager.Sound.incomingMessage\n          );\n        }\n      }\n    } else if (\n      message?.category !== MessageCategoryConstants.message &&\n      message?.metadata?.incrementUnreadCount\n    ) {\n      if (enableSoundForMessages) {\n        if (customIncomingMessageSound) {\n          CometChatSoundManager.play(customIncomingMessageSound);\n        } else {\n          CometChatSoundManager.play(\n            CometChatSoundManager.Sound.incomingMessage\n          );\n        }\n      }\n    }\n  };\n\n  /**\n   * Update message\n   */\n  const updateMessage = (message, withMuid = false) => {\n    let messageKey;\n    const messagelist = [...messageList];\n    if (withMuid) {\n      messageKey = messagelist.findIndex((m) => m.muid === message.muid);\n    } else {\n      messageKey = messagelist.findIndex((m) => m.id === message.id);\n    }\n    if (messageKey > -1) {\n      const messageObject = { ...messageList[messageKey], ...message };\n\n      messagelist.splice(messageKey, 1, messageObject);\n\n      setMessageCount(messagelist.length);\n      setMessageList(messagelist);\n    }\n  };\n\n  /**\n   * Update message as read; show double blue tick\n   */\n  const updateMessageAsRead = (message) => {\n    const messagelist = [...messageList];\n    let messageKey = messagelist.findIndex((m) => m.id === message.messageId);\n\n    if (messageKey > -1) {\n      const messageObject = { ...messageList[messageKey] };\n      messageObject.readAt = message.getReadAt();\n      messagelist.splice(messageKey, 1, messageObject);\n      setMessageList(messagelist);\n    }\n\n    markAllMessageAsRead(message, messageKey);\n  };\n\n  /**\n   * Update message as deleted; show deleted message bubble\n   */\n  const removeMessage = (message) => {\n    const messages = [...messageList];\n    let messageKey = messages.findIndex((m) => m.id === message.id);\n    if (messageKey > -1) {\n      if (hideDeletedMessages) {\n        messages.splice(messageKey, 1);\n      } else {\n        const messageObject = { ...messages[messageKey], ...message };\n        messages.splice(messageKey, 1, messageObject);\n      }\n      setMessageList([...messages]);\n    }\n  };\n\n  /**\n   *\n   * @param {*} message\n   * emits markAsRead Event\n   */\n  const markMessageAsRead = (message) => {\n    if (!message?.readAt) {\n      CometChat.markAsRead(message).catch((error) => {\n        errorHandler(error);\n      });\n    }\n  };\n\n  const handleNewMessages = (message) => {\n    //handling dom lag - increment count only for main message list\n\n    setnewMessage(message);\n\n    const messageReceivedHandler = (message) => {\n      //if the user has not scrolled in chat window(scroll is at the bottom of the chat window)\n      setMessageCount(messageCount + 1);\n      if (\n        messageListEndRef.current.scrollHeight -\n          messageListEndRef.current.scrollTop -\n          messageListEndRef.current.clientHeight <=\n        1\n      ) {\n        if (messageCount > messageConstants.maximumNumOfMessages) {\n          reInitializeMessageBuilder();\n        } else {\n          playNotificationSound(message);\n          addMessage(message);\n          scrollToBottom();\n          markMessageAsRead(message);\n          CometChatMessageEvents.emit(\n            CometChatMessageEvents.onMessageRead,\n            message\n          );\n        }\n      } else {\n        //if the user has scrolled up in chat window\n        playNotificationSound(message);\n        addMessage(message);\n        updateUnreadMessageCount();\n      }\n    };\n\n    /**\n     * message receiver is chat window group\n     */\n    if (\n      chatWithTypeRef?.current === ReceiverTypeConstants.group &&\n      message.getReceiverType() === ReceiverTypeConstants.group &&\n      message.getReceiverId() === chatWithRef?.current?.guid\n    ) {\n      messageReceivedHandler(message);\n    } else if (\n      chatWithTypeRef?.current === ReceiverTypeConstants.user &&\n      message.getReceiverType() === ReceiverTypeConstants.user\n    ) {\n      /**\n       * If the message sender is chat window user and message receiver is logged-in user\n       * OR\n       * If the message sender is logged-in user and message receiver is chat window user\n       */\n      if (\n        (message.getSender().uid === chatWithRef?.current?.uid &&\n          message.getReceiverId() === loggedInUserRef?.current?.uid) ||\n        (message.getSender().uid === loggedInUserRef?.current?.uid &&\n          message.getReceiverId() === chatWithRef?.current?.uid)\n      ) {\n        messageReceivedHandler(message);\n      }\n    }\n  };\n\n  const handleNewCustomMessages = (message) => {\n    const customMessageReceivedHandler = (message) => {\n      setMessageCount(messageCount + 1);\n      //if the user has not scrolled in chat window(scroll is at the bottom of the chat window)\n      if (\n        messageListEndRef.current.scrollHeight -\n          messageListEndRef.current.scrollTop -\n          messageListEndRef.current.clientHeight <=\n        1\n      ) {\n        if (messageCount > messageConstants.maximumNumOfMessages) {\n          reInitializeMessageBuilder();\n        } else {\n          playNotificationSound(message);\n          addMessage(message);\n          scrollToBottom();\n          markMessageAsRead(message);\n          CometChatMessageEvents.emit(\n            CometChatMessageEvents.onMessageRead,\n            message\n          );\n        }\n      } else {\n        //if the user has scrolled in chat window\n        playNotificationSound(message);\n        addMessage(message);\n        updateUnreadMessageCount();\n      }\n    };\n\n    if (\n      chatWithTypeRef.current === ReceiverTypeConstants.group &&\n      message.getReceiverType() === ReceiverTypeConstants.group &&\n      loggedInUserRef.current?.uid === message.getSender().uid &&\n      message.getReceiverId() === chatWithRef?.current?.guid &&\n      (message.type === CometChatCustomMessageTypes.poll ||\n        message.type === CometChatCustomMessageTypes.document ||\n        message.type === CometChatCustomMessageTypes.whiteboard)\n    ) {\n      playNotificationSound();\n      addMessage(message);\n      scrollToBottom();\n    } else if (\n      chatWithTypeRef.current === ReceiverTypeConstants.group &&\n      message.getReceiverType() === ReceiverTypeConstants.group &&\n      message.getReceiverId() === chatWithRef?.current?.guid\n    ) {\n      customMessageReceivedHandler(message, ReceiverTypeConstants.group);\n    } else if (\n      chatWithTypeRef.current === ReceiverTypeConstants.user &&\n      message.getReceiverType() === ReceiverTypeConstants.user &&\n      message.getSender().uid === chatWithRef?.current?.uid\n    ) {\n      customMessageReceivedHandler(message, ReceiverTypeConstants.user);\n    } else if (\n      chatWithTypeRef.current === ReceiverTypeConstants.user &&\n      message.getReceiverType() === ReceiverTypeConstants.user &&\n      loggedInUserRef.current?.uid === message.getSender().uid &&\n      message.getReceiverId() === chatWithRef?.current?.uid &&\n      (message.type === CometChatCustomMessageTypes.poll ||\n        message.type === CometChatCustomMessageTypes.document ||\n        message.type === CometChatCustomMessageTypes.whiteboard)\n    ) {\n      playNotificationSound(message);\n      addMessage(message);\n      scrollToBottom();\n    }\n  };\n\n  const markAllMessageAsDelivered = (readMessage, messageKey) => {\n    for (let i = messageKey; i >= 0; i--) {\n      if (!messageList[i]?.deliveredAt) {\n        messageList[i].deliveredAt = readMessage?.getDeliveredAt();\n      }\n    }\n  };\n\n  const markAllMessageAsRead = (readMessage, messageKey) => {\n    for (let i = messageKey; i >= 0; i--) {\n      if (!messageList[i]?.readAt) {\n        messageList[i].readAt = readMessage?.getReadAt();\n      }\n    }\n  };\n\n  const handleMessageDeliveryAndReadReceipt = (messageReceipt) => {\n    //read receipts\n    if (\n      messageReceipt?.getReceiverType() === ReceiverTypeConstants.user &&\n      messageReceipt?.getSender()?.getUid() === chatWithRef?.current?.uid &&\n      messageReceipt?.getReceiver() === loggedInUserRef.current.uid\n    ) {\n      if (messageReceipt?.getReceiptType() === \"delivery\") {\n        updateMessageAsDelivered(messageReceipt);\n      } else if (messageReceipt?.getReceiptType() === \"read\") {\n        updateMessageAsRead(messageReceipt);\n      }\n    } else if (\n      messageReceipt?.getReceiverType() === ReceiverTypeConstants.group &&\n      messageReceipt?.getReceiver() === chatWithRef?.current?.guid\n    ) {\n    }\n  };\n\n  const handleMessageDelete = (message) => {\n    if (\n      chatWithTypeRef?.current === ReceiverTypeConstants.group &&\n      message.getReceiverType() === ReceiverTypeConstants.group &&\n      message.getReceiverId() === chatWithRef?.current?.guid\n    ) {\n      removeMessage(message);\n    } else if (\n      chatWithTypeRef?.current === ReceiverTypeConstants.user &&\n      message.getReceiverType() === ReceiverTypeConstants.user &&\n      message.getSender().uid === chatWithRef?.current?.uid\n    ) {\n      removeMessage(message);\n    }\n  };\n\n  const handleMessageEdit = (message) => {\n    if (\n      chatWithTypeRef?.current === ReceiverTypeConstants.group &&\n      message.getReceiverType() === ReceiverTypeConstants.group &&\n      message.getReceiverId() === chatWithRef?.current?.guid\n    ) {\n      updateMessage(message);\n    } else if (\n      chatWithTypeRef?.current === ReceiverTypeConstants.user &&\n      message.getReceiverType() === ReceiverTypeConstants.user &&\n      loggedInUserRef.current.uid === message.getReceiverId() &&\n      message.getSender().uid === chatWithRef?.current?.uid\n    ) {\n      updateMessage(message);\n    } else if (\n      chatWithTypeRef?.current === ReceiverTypeConstants.user &&\n      message.getReceiverType() === ReceiverTypeConstants.user &&\n      loggedInUserRef.current.uid === message.getSender().uid &&\n      message.getReceiverId() === chatWithRef?.current?.uid\n    ) {\n      updateMessage(message);\n    }\n  };\n\n  const handleNewGroupActionMessage = (message) => {\n    if (\n      chatWithTypeRef?.current === ReceiverTypeConstants.group &&\n      message.getReceiverType() === ReceiverTypeConstants.group &&\n      message.getReceiverId() === chatWithRef?.current?.guid\n    ) {\n      playNotificationSound(message);\n      addMessage(message);\n      // scrollToBottom();\n      markMessageAsRead(message);\n      CometChatMessageEvents.emit(\n        CometChatMessageEvents.onMessageRead,\n        message\n      );\n    }\n  };\n\n  /**\n   * update message list\n   */\n  const prependMessages = (messages) => {\n    const messagelist = [...messages, ...messageList];\n    setMessageList(messagelist);\n    setMessageCount(messagelist.length);\n  };\n\n  const messageHandler = (messagelist, scroll, val) => {\n    messagelist.forEach((message) => {\n      //if the sender of the message is not the loggedin user, mark the message as read.\n      if (\n        message?.getSender()?.getUid() !== loggedInUserRef.current?.uid &&\n        !message?.readAt\n      ) {\n        if (message.getReceiverType() === ReceiverTypeConstants.user) {\n          markMessageAsRead(message);\n          CometChatMessageEvents.emit(\n            CometChatMessageEvents.onMessageRead,\n            message\n          );\n        } else if (message.getReceiverType() === ReceiverTypeConstants.group) {\n          markMessageAsRead(message);\n          CometChatMessageEvents.emit(\n            CometChatMessageEvents.onMessageRead,\n            message\n          );\n        }\n      }\n    });\n\n    if (scroll) {\n      const lastScrollPoint = val || 0;\n      scrollToBottom(lastScrollPoint);\n    }\n  };\n\n  const scrollToBottom = (scrollHeight = 0) => {\n    setTimeout(() => {\n      if (messageListEndRef && messageListEndRef.current) {\n        messageListEndRef.current.scrollTop =\n          messageListEndRef.current.scrollHeight - scrollHeight;\n      }\n    }, 10);\n  };\n\n  const handleScroll = (event) => {\n    const scrollTop = event.currentTarget.scrollTop;\n    const scrollHeight = event.currentTarget.scrollHeight;\n    const clientHeight = event.currentTarget.clientHeight;\n\n    lastScrollTop = scrollHeight - scrollTop;\n\n    if (lastScrollTop - clientHeight <= 1) {\n      scrolledToBottom();\n    }\n\n    const top = Math.round(scrollTop) === 0;\n    if (top && messageList.length) {\n      fetchMessages(messageListManagerRef?.current)\n        .then((messageList) => {\n          messageHandler(messageList, false);\n        })\n        .catch((error) => {\n          errorHandler(error);\n          setDecoratorMessage(localize(\"SOMETHING_WRONG\"));\n        });\n    }\n  };\n\n  /**\n   * Update message as delivered; show double grey tick\n   */\n  const updateMessageAsDelivered = (message) => {\n    const messagelist = [...messageList];\n    let messageKey = messagelist.findIndex((m) => m.id === message.messageId);\n    if (messageKey > -1) {\n      const messageObject = { ...messageList[messageKey] };\n      messageObject.deliveredAt = message.getDeliveredAt();\n      messagelist?.splice(messageKey, 1, messageObject);\n      setMessageList(messagelist);\n    }\n    markAllMessageAsDelivered(message, messageKey);\n  };\n\n  /**\n   * Upon scrolling to bottom, reload the chat if messages cross the maximum count,\n   * or else render and update (mark them as read) the stored messages\n   */\n  const scrolledToBottom = () => {\n    if (unreadMessageCount <= 0) {\n      return false;\n    }\n    const totalMessageCount = messageList.length + unreadMessageCount;\n    const message = messageList[messageList.length - 1];\n    let messageKey = messageList[messageList.length - 1];\n    if (totalMessageCount > messageConstants.maximumNumOfMessages) {\n      reInitializeMessageBuilder();\n    } else {\n      setUnreadMessageCount(0);\n      scrollToBottom();\n      markMessageAsRead(message);\n      markAllMessageAsRead(message, messageKey);\n      CometChatMessageEvents.emit(\n        CometChatMessageEvents.onMessageRead,\n        message\n      );\n    }\n  };\n\n  /**\n   * upon scrolling to the bottom, update the unread messagess\n   */\n\n  /**\n   * reset message list\n   */\n  const resetChatWindow = () => {\n    setMessageList([]);\n    setUnreadMessageCount(0);\n    setMessageCount(0);\n    setnewMessage({});\n  };\n\n  const handlers = {\n    onTextMessageReceived: handleNewMessages,\n    onMediaMessageReceived: handleNewMessages,\n    onCustomMessageReceived: handleNewCustomMessages,\n    onMessagesDelivered: handleMessageDeliveryAndReadReceipt,\n    onMessagesRead: handleMessageDeliveryAndReadReceipt,\n    onMessageDeleted: handleMessageDelete,\n    onMessageEdited: handleMessageEdit,\n    onGroupMemberScopeChanged: handleNewGroupActionMessage,\n    onGroupMemberKicked: handleNewGroupActionMessage,\n    onGroupMemberBanned: handleNewGroupActionMessage,\n    onGroupMemberUnbanned: handleNewGroupActionMessage,\n    onMemberAddedToGroup: handleNewGroupActionMessage,\n    onGroupMemberLeft: handleNewGroupActionMessage,\n    onGroupMemberJoined: handleNewGroupActionMessage,\n  };\n\n  Hooks(\n    limit,\n    user,\n    group,\n    excludeMessageTypes,\n    onlyUnread,\n    hideDeletedMessages,\n    hideMessagesFromBlockedUsers,\n    tags,\n    messageTypes,\n    loggedInUserRef,\n    messageList,\n    setMessageList,\n    setDecoratorMessage,\n    messageHandler,\n    messageListCallback,\n    messageTypesRef,\n    messageCategoryRef,\n    messageListManagerRef,\n    localize,\n    errorHandler,\n    chatWithRef,\n    chatWithTypeRef,\n    setMessageCount,\n    setnewMessage\n  );\n\n  /**\n   *\n   * @param {*} message\n   * returns translated text and push it into metadata of message Object\n   */\n  const translateMessage = (message) => {\n    const messageId = message.id;\n    const messageText = message.text;\n\n    let translateToLanguage = CometChatLocalize.getLocale();\n    let translateMessage = \"\";\n    CometChat.callExtension(\n      ExtensionConstants.messageTranslation,\n      \"POST\",\n      ExtensionURLs.translate,\n      {\n        msgId: messageId,\n        text: messageText,\n        languages: [translateToLanguage],\n      }\n    )\n      .then((result) => {\n        if (\n          result?.hasOwnProperty(\"translations\") &&\n          result.translations.length\n        ) {\n          const messageTranslation = result.translations[0];\n          translateMessage = `${messageTranslation[\"message_translated\"]}`;\n          if (message.hasOwnProperty(\"metadata\")) {\n            Object.assign(message.metadata, {\n              translatedText: translateMessage,\n            });\n          } else {\n            Object.assign(message, {\n              metadata: {\n                translatedText: translateMessage,\n              },\n            });\n          }\n          updateMessage(message);\n        }\n      })\n      .catch((error) => {\n        errorHandler(error);\n      });\n  };\n\n  /**\n   *\n   * @param {*} message\n   * emits edit Message event\n   */\n  const editMessage = (message) => {\n    CometChatMessageEvents.emit(CometChatMessageEvents.onMessageEdit, {\n      message: message,\n      status: messageStatus.inprogress,\n    });\n  };\n\n  /**\n   *\n   * @param {*} message\n   * copies message text to the clipboard\n   */\n  const copyMessage = (message) => {\n    navigator.clipboard.writeText(message.text);\n  };\n\n  /**\n   *\n   * @param {*} message\n   * Deletes the selected message\n   */\n  const deleteMessage = (message) => {\n    CometChat.deleteMessage(message.id)\n      .then((deletedMessage) => {\n        removeMessage(deletedMessage);\n      })\n      .catch((error) => {\n        errorHandler(error);\n      });\n  };\n\n  /**\n   *\n   * @param {*} message\n   * @param {*} event\n   * set visibility of Emoji Tray to true\n   */\n  const onReactToMessages = (message, event, emoji) => {\n    // To remove reaction by clicking on the reacted emoji\n    if (emoji) {\n      reactToMessages(message, emoji);\n    }\n    // Open EmojiTray When clicked on Reaction messageOption or Add Reaction button\n    else {\n      setMessageToReact(message);\n      setViewEmojiTray((old) => {\n        return {\n          emojiTrayPreview: !old.emojiTrayPreview,\n          event: event,\n        };\n      });\n    }\n  };\n\n  /**\n   *\n   * @param {*} emojiObject\n   * triggers reactToMessages function after closing the emojiKeyboard\n   */\n  const onReactionSelected = (emojiObject) => {\n    setViewEmojiTray((old) => {\n      return {\n        emojiTrayPreview: !old.emojiTrayPreview,\n      };\n    });\n    reactToMessages(messageToReact, emojiObject);\n  };\n\n  /**\n   *\n   * @returns EmojiKeyboard inside tooltip\n   */\n  const emojiBoard = () => {\n    if (viewEmojiTray.emojiTrayPreview) {\n      return (\n        <CometChatPopover\n          position=\"top\"\n          x={viewEmojiTray?.event?.clientX}\n          y={viewEmojiTray?.event?.clientY}\n          style={emojiBoardToolTipStyle(_theme)}\n        >\n          <CometChatEmojiKeyboard\n            style={emojiKeyBoardStyle(_theme)}\n            hideSearch={_emojiKeyboardConfiguration.hideSearch}\n            theme={_theme}\n            onClick={\n              onReactionSelected.bind(this) ||\n              _emojiKeyboardConfiguration.onClick\n            }\n          />\n        </CometChatPopover>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  /**\n   *\n   * @param {*} message\n   * @param {*} emoji\n   * Calls extension reaction to Messages\n   */\n  const reactToMessages = (message, emoji) => {\n    let reactionObject = {};\n    let newMessageObject = {};\n    let messageObject = { ...message };\n    const userObject = {};\n\n    if (loggedInUserRef?.current?.avatar?.length) {\n      userObject[\"avatar\"] = loggedInUserRef.current.avatar;\n    }\n\n    if (loggedInUserRef?.current?.name?.length) {\n      userObject[\"name\"] = loggedInUserRef.current.name;\n    }\n\n    const emojiObject = {\n      [emoji]: {\n        [loggedInUserRef.current.uid]: userObject,\n      },\n    };\n\n    const reactionExtensionsData = getExtensionsData(\n      messageObject,\n      ExtensionConstants.reactions\n    );\n\n    if (reactionExtensionsData) {\n      if (reactionExtensionsData[emoji]) {\n        //if the reactions metadata has the selected emoji/reaction for the loggedin user\n        if (reactionExtensionsData[emoji][loggedInUserRef.current.uid]) {\n          reactionObject = {\n            ...messageObject[\"metadata\"][\"@injected\"][\"extensions\"][\n              \"reactions\"\n            ],\n          };\n          delete reactionObject[emoji][loggedInUserRef.current.uid];\n        } else {\n          reactionObject = {\n            ...messageObject[\"metadata\"][\"@injected\"][\"extensions\"][\n              \"reactions\"\n            ],\n            [emoji]: {\n              ...messageObject[\"metadata\"][\"@injected\"][\"extensions\"][\n                \"reactions\"\n              ][emoji],\n              [loggedInUserRef.current.uid]: userObject,\n            },\n          };\n        }\n      } else {\n        reactionObject = {\n          ...messageObject[\"metadata\"][\"@injected\"][\"extensions\"][\"reactions\"],\n          ...emojiObject,\n        };\n      }\n    } else {\n      if (!messageObject.hasOwnProperty(\"metadata\")) {\n        messageObject[\"metadata\"] = {};\n      }\n\n      if (!messageObject[\"metadata\"].hasOwnProperty(\"@injected\")) {\n        messageObject[\"metadata\"][\"@injected\"] = {};\n      }\n      if (\n        !messageObject[\"metadata\"][\"@injected\"].hasOwnProperty(\"extensions\")\n      ) {\n        messageObject[\"metadata\"][\"@injected\"][\"extensions\"] = {};\n      }\n      if (\n        !messageObject[\"metadata\"][\"@injected\"][\"extensions\"].hasOwnProperty(\n          \"reactions\"\n        )\n      ) {\n        messageObject[\"metadata\"][\"@injected\"][\"extensions\"][\"reactions\"] = {};\n      }\n\n      reactionObject = {\n        ...emojiObject,\n      };\n    }\n\n    const metadataObject = {\n      metadata: {\n        ...messageObject[\"metadata\"],\n        \"@injected\": {\n          ...messageObject[\"metadata\"][\"@injected\"],\n          extensions: {\n            ...messageObject[\"metadata\"][\"@injected\"][\"extensions\"],\n            reactions: {\n              ...reactionObject,\n            },\n          },\n        },\n      },\n    };\n\n    newMessageObject = {\n      ...messageObject,\n      data: {\n        ...messageObject,\n        ...metadataObject,\n      },\n      ...metadataObject,\n    };\n\n    updateMessage(newMessageObject);\n\n    CometChat.callExtension(\n      ExtensionConstants.reactions,\n      \"POST\",\n      ExtensionURLs.reaction,\n      {\n        msgId: message.id,\n        emoji: emoji,\n      }\n    ).catch((error) => {\n      errorHandler(error);\n      updateMessage(message);\n    });\n  };\n\n  /**\n   *\n   * @param {*} messageOptions\n   * Sets MessageOptions Onclick function\n   */\n  const setOptionsCallbackData = (messageOptions) => {\n    let optionsList = [...messageOptions];\n\n    optionsList.forEach((eachMessageOption) => {\n      switch (eachMessageOption.id) {\n        case MessageOptionConstants.deleteMessage:\n          if (eachMessageOption.onClick === null) {\n            eachMessageOption.onClick = deleteMessage.bind(this);\n          }\n          break;\n        case MessageOptionConstants.editMessage:\n          if (eachMessageOption.onClick === null) {\n            eachMessageOption.onClick = editMessage.bind(this);\n          }\n          break;\n        case MessageOptionConstants.copyMessage:\n          if (eachMessageOption.onClick === null) {\n            eachMessageOption.onClick = copyMessage.bind(this);\n          }\n          break;\n        case MessageOptionConstants.reactToMessage:\n          if (eachMessageOption.onClick === null) {\n            eachMessageOption.onClick = onReactToMessages.bind(this);\n          }\n          break;\n        case MessageOptionConstants.translateMessage:\n          if (eachMessageOption.onClick === null) {\n            eachMessageOption.onClick = translateMessage.bind(this);\n          }\n          break;\n        default:\n          break;\n      }\n    });\n    return optionsList;\n  };\n\n  /**\n   *\n   * @param {*} messageObject\n   * @returns messageOptions according to the type of message and sender's identity\n   */\n  const filterMessageOptions = (messageObject) => {\n    let _messageTypes =\n      messageTypes && messageTypes.length ? messageTypes : getDefaultTypes();\n\n    let messageOptions = [];\n    // If User sends messageTypes as\n    _messageTypes.forEach((messageTemplateObject) => {\n      // Checking Message types for Template object and message object to set options\n      if (messageTemplateObject.type === messageObject.type) {\n        messageOptions = messageTemplateObject.options.filter(\n          (option) =>\n            // Segregating Sender and receiver options.\n\n            (loggedInUserRef.current?.uid === messageObject?.sender?.uid &&\n              option.optionFor === MessageOptionForConstants.sender) ||\n            option.optionFor === MessageOptionForConstants.both ||\n            (loggedInUserRef.current?.uid !== messageObject?.sender?.uid &&\n              option.optionFor === MessageOptionForConstants.receiver) ||\n            option.optionFor === MessageOptionForConstants.both\n        );\n      }\n    });\n\n    // If user exclude's an option from options list\n    if (excludeMessageOptions && excludeMessageOptions.length) {\n      excludeMessageOptions.forEach((excludeOption) => {\n        messageOptions.forEach((option) => {\n          if (option.id === excludeOption) {\n            const index = messageOptions.indexOf(option);\n            if (index > -1) {\n              messageOptions.splice(index, 1); // 2nd parameter means remove one item only\n            }\n          }\n        });\n      });\n    }\n\n    // If user sends in customMessageOptions\n    if (customMessageOptions?.length) {\n      customMessageOptions.forEach((option) => {\n        messageOptions.push(option);\n      });\n    }\n\n    // Setting callback data for Message Option's onClick\n    return setOptionsCallbackData(messageOptions);\n  };\n\n  /**\n   *\n   * @param {*} message\n   * @returns filtering custom View from message Types sent in by the user\n   */\n  const filterCustomView = (message) => {\n    if (messageTypes?.length) {\n      const templateObject = messageTypes.filter(\n        (messageTemplateObject) =>\n          messageTemplateObject.type === message.type &&\n          messageTemplateObject.customView\n      );\n\n      if (templateObject[0]?.customView) {\n        return templateObject[0].customView;\n      }\n\n      return null;\n    }\n  };\n\n  /**\n   *\n   * @param {*} customView\n   * @returns customView for handling empty,error and loading states\n   */\n  const getCustomView = (customView) => {\n    return React.createElement(customView, props);\n  };\n\n  const getMessageContainer = () => {\n    let messageContainer = null;\n    if (\n      messageList.length === 0 &&\n      decoratorMessage?.toLowerCase() === localize(\"LOADING\").toLowerCase()\n    ) {\n      messageContainer = (\n        <div\n          style={decoratorMsgStyle(style)}\n          className=\"messagelist__decorator-message\"\n        >\n          {customView?.loading ? (\n            getCustomView(customView?.loading, props)\n          ) : (\n            <div\n              style={decoratorMsgImgStyle(style, loadingIconURL, _theme)}\n              className=\"decorator-message\"\n            ></div>\n          )}\n        </div>\n      );\n    } else if (\n      messageList.length === 0 &&\n      decoratorMessage?.toLowerCase() ===\n        localize(\"NO_MESSAGES_FOUND\").toLowerCase()\n    ) {\n      messageContainer = (\n        <div\n          style={decoratorMsgStyle(style)}\n          className=\"messagelist__decorator-message\"\n        >\n          {customView?.empty ? (\n            getCustomView(customView?.empty, props)\n          ) : (\n            <p\n              style={decoratorMsgTxtStyle(\n                style,\n                fontHelper,\n                _theme,\n                decoratorMessage,\n                localize\n              )}\n              className=\"decorator-message\"\n            >\n              {emptyText}\n            </p>\n          )}\n        </div>\n      );\n    } else if (\n      decoratorMessage?.toLowerCase() ===\n      localize(\"NO_MESSAGE_TYPE_SET\")?.toLowerCase()\n    ) {\n      messageContainer = (\n        <div\n          style={decoratorMsgStyle(style)}\n          className=\"messagelist__decorator-message\"\n        >\n          {customView?.empty ? (\n            getCustomView(customView?.empty, props)\n          ) : (\n            <p\n              style={decoratorMsgTxtStyle(\n                style,\n                fontHelper,\n                _theme,\n                decoratorMessage,\n                localize\n              )}\n              className=\"decorator-message\"\n            >\n              {decoratorMessage}\n            </p>\n          )}\n        </div>\n      );\n    } else if (\n      !hideError &&\n      decoratorMessage?.toLowerCase() ===\n        localize(\"SOMETHING_WRONG\").toLowerCase()\n    ) {\n      messageContainer = (\n        <div\n          style={decoratorMsgStyle(style)}\n          className=\"messagelist__decorator-message\"\n        >\n          {customView?.error ? (\n            getCustomView(customView?.error, props)\n          ) : (\n            <p\n              style={decoratorMsgTxtStyle(\n                style,\n                fontHelper,\n                _theme,\n                decoratorMessage,\n                localize\n              )}\n              className=\"decorator-message\"\n            >\n              {errorText}\n            </p>\n          )}\n        </div>\n      );\n    }\n    return messageContainer;\n  };\n\n  /**\n   * Empty new Message Received State to close Smart reply Preview\n   */\n  const onClose = () => {\n    setnewMessage({});\n  };\n\n  const _smartRepliesConfiguration =\n    smartRepliesConfiguration ||\n    new SmartRepliesConfiguration({ onClose: onClose });\n  /**\n   *\n   * @returns smart suggestions to the user as per the message received\n   */\n  const getSmartReplies = () => {\n    if (Object.keys(newMessage).length) {\n      return (\n        <CometChatSmartReplies\n          messageObject={newMessage}\n          customOutgoingMessageSound={\n            _smartRepliesConfiguration.customOutgoingMessageSound\n          }\n          enableSoundForMessages={\n            _smartRepliesConfiguration.enableSoundForMessages\n          }\n          loggedInUser={loggedInUserRef.current}\n          onClick={_smartRepliesConfiguration.onClick}\n          style={smartReplyStyle(_theme)}\n          onClose={onClose.bind(this)}\n        />\n      );\n    }\n  };\n\n  /**\n   *\n   * @returns new Message Indicator banner\n   */\n  const newMessageIndicator = () => {\n    if (unreadMessageCount >= 1) {\n      const text =\n        unreadMessageCount > 1\n          ? `${unreadMessageCount} ${localize(\"NEW_MESSAGES\")}`\n          : `${unreadMessageCount} ${localize(\"NEW_MESSAGE\")}`;\n\n      return (\n        <CometChatNewMessageIndicator\n          text={text}\n          onClick={\n            scrolledToBottom.bind(this) ||\n            _newMessageIndicatorConfiguration.onClick\n          }\n          Icon={_newMessageIndicatorConfiguration.Icon}\n          style={messageIndicatorStyle(_theme)}\n        />\n      );\n    }\n    return null;\n  };\n\n  /**\n   *\n   * @returns Items to render in Message List Component\n   */\n  const renderItems = () => {\n    // to hold date value for first message\n    let previousMessageDate = null;\n\n    return messageList.map((eachMessage) => {\n      // date label component\n      let dateSeparator = null;\n\n      // Converting Unix  timeStamp to readable date format\n      const currentMessageDate = new Date(eachMessage.sentAt * 1000);\n\n      const currentDate =\n        currentMessageDate.getDate() +\n        \"-\" +\n        currentMessageDate.getMonth +\n        \"-\" +\n        currentMessageDate.getFullYear();\n      const previousDate =\n        previousMessageDate?.getDate() +\n        \"-\" +\n        previousMessageDate?.getMonth +\n        \"-\" +\n        previousMessageDate?.getFullYear();\n\n      const pattern = _dateConfiguration?.pattern;\n      const customPattern = _dateConfiguration?.customPattern;\n      const dateStyle = new DateStyles({\n        ..._dateConfiguration?.style,\n        textColor:\n          _dateConfiguration?.style?.textColor ||\n          _theme?.palette?.accent500[_theme?.palette?.mode],\n        textFont:\n          _dateConfiguration?.style?.textFont ||\n          fontHelper(_theme?.typography?.caption2),\n      });\n\n      // Comparing Date, Month, Year of the two dates\n      if (previousDate !== currentDate) {\n        dateSeparator = (\n          <div style={messageDateContainerStyle(_theme)}>\n            <div style={messageDateStyle(_theme)}>\n              <CometChatDate\n                timestamp={eachMessage?.sentAt}\n                pattern={pattern}\n                customPattern={customPattern}\n                style={dateStyle}\n              />\n            </div>\n          </div>\n        );\n      }\n      previousMessageDate = currentMessageDate;\n\n      const messageKey = eachMessage.id || eachMessage.muid;\n      const className = `message__${eachMessage.type} message__kit__background`;\n      let alignmentValue = MessageBubbleAlignmentConstants.left;\n      let background;\n      let messageBubbleData = {};\n      if (\n        alignment === MessageListAlignmentConstants?.standard &&\n        loggedInUserRef.current?.uid === eachMessage?.sender?.uid\n      ) {\n        alignmentValue = MessageBubbleAlignmentConstants.right;\n        background = {\n          background: _theme.palette.primary[_theme.palette.mode],\n        };\n        messageBubbleData = sentMessageInputData;\n      } else if (\n        alignment === MessageListAlignmentConstants?.left &&\n        loggedInUserRef.current?.uid === eachMessage?.sender?.uid\n      ) {\n        alignmentValue = MessageBubbleAlignmentConstants.left;\n        background = {\n          background: _theme.palette.secondary[_theme.palette.mode],\n        };\n        messageBubbleData = sentMessageInputData;\n      } else {\n        alignmentValue = MessageBubbleAlignmentConstants.left;\n        background = {\n          background: _theme.palette.secondary[_theme.palette.mode],\n        };\n        messageBubbleData = receivedMessageInputData;\n      }\n      let style = {\n        width: \"100%\",\n        height: \"100%\",\n        border: \"0 none\",\n        borderRadius: \"12px\",\n        nameTextFont: fontHelper(_theme.typography.caption1),\n        timestampFont: fontHelper(_theme.typography.caption2),\n        ...background,\n        nameTextColor: _theme.palette.accent500[_theme.palette.mode],\n        timestampColor: _theme.palette.accent[_theme.palette.mode],\n      };\n\n      return !eachMessage.action ? (\n        <React.Fragment key={messageKey}>\n          {dateSeparator}\n          <div\n            key={messageKey}\n            className={className}\n            style={messageBubbleStyle(\n              alignment,\n              loggedInUserRef.current,\n              eachMessage\n            )}\n          >\n            {\n              <CometChatMessageBubble\n                key={messageKey}\n                messageBubbleData={\n                  messageBubbleData ||\n                  _messageBubbleConfiguration.messageBubbleData\n                }\n                alignment={alignmentValue}\n                timeAlignment={_messageBubbleConfiguration.timeAlignment}\n                messageObject={eachMessage}\n                messageOptions={filterMessageOptions(eachMessage)}\n                loggedInUser={loggedInUserRef.current}\n                customView={filterCustomView(eachMessage)}\n                style={{ ...style }}\n                theme={_theme}\n                updateReaction={onReactToMessages.bind(this)}\n              />\n            }\n          </div>\n        </React.Fragment>\n      ) : null;\n    });\n  };\n\n  return (\n    <div className=\"message__list\" style={chatListStyle(style, _theme)}>\n      <div\n        className=\"list__wrapper\"\n        style={listWrapperStyle(style, _theme)}\n        ref={messageListEndRef}\n        onScroll={handleScroll}\n      >\n        {getMessageContainer()}\n        {newMessageIndicator()}\n        {emojiBoard()}\n        {renderItems()}\n      </div>\n      {getSmartReplies()}\n    </div>\n  );\n});\n\nCometChatMessageList.defaultProps = {\n  limit: 30,\n  user: null,\n  group: null,\n  alignment: \"standard\",\n  messageTypes: null,\n  excludeMessageTypes: null,\n  excludeMessageOptions: null,\n  customMessageOptions: null,\n  onlyUnread: false,\n  hideMessagesFromBlockedUsers: false,\n  hideDeletedMessages: false,\n  tags: null,\n  loadingIconURL: loadingIcon,\n  customView: {\n    loading: \"\",\n    empty: \"\",\n    error: \"\",\n  },\n  emptyText: \"No messages here yet...\",\n  errorText: \"Something went wrong\",\n  hideError: false,\n  customIncomingMessageSound: \"\",\n  enableSoundForMessages: true,\n  sentMessageInputData: {\n    thumbnail: true,\n    title: true,\n    timestamp: true,\n    readReceipt: true,\n  },\n  receivedMessageInputData: {\n    thumbnail: true,\n    title: true,\n    timestamp: true,\n    readReceipt: false,\n  },\n  style: {\n    width: \"100%\",\n    height: \"100%\",\n    border: \"\",\n    borderRadius: \"8px\",\n    background: \"\",\n    textFont: \"400 12px Inter, sans-serif\",\n    textColor: \"rgb(20,20,20)\",\n  },\n  messageBubbleConfiguration: null,\n  emojiKeyboardConfiguration: null,\n  smartRepliesConfiguration: null,\n  newMessageIndicatorConfiguration: null,\n  dateConfiguration: null,\n};\n\nCometChatMessageList.propTypes = {\n  limit: PropTypes.number,\n  user: PropTypes.object,\n  group: PropTypes.object,\n  alignment: PropTypes.string,\n  messageTypes: PropTypes.array,\n  excludeMessageTypes: PropTypes.array,\n  excludeMessageOptions: PropTypes.array,\n  customMessageOptions: PropTypes.array,\n  onlyUnread: PropTypes.bool,\n  hideMessagesFromBlockedUsers: PropTypes.bool,\n  hideDeletedMessages: PropTypes.bool,\n  tags: PropTypes.array,\n  loadingIconURL: PropTypes.string,\n  customView: PropTypes.object,\n  emptyText: PropTypes.string,\n  errorText: PropTypes.string,\n  hideError: PropTypes.bool,\n  customIncomingMessageSound: PropTypes.string,\n  enableSoundForMessages: PropTypes.bool,\n  sentMessageInputData: PropTypes.object,\n  receivedMessageInputData: PropTypes.object,\n  style: PropTypes.object,\n  messageBubbleConfiguration: PropTypes.object,\n  emojiKeyboardConfiguration: PropTypes.object,\n  smartRepliesConfiguration: PropTypes.object,\n  newMessageIndicatorConfiguration: PropTypes.object,\n  dateConfiguration: PropTypes.object,\n};\n\nexport { CometChatMessageList };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { CometChat } from \"@cometchat-pro/chat\";\nimport { ConversationTypeConstants } from \"../../Shared/Constants/UIKitConstants\";\nexport class ConversationListManager {\n  constructor(_ref) {\n    let {\n      conversationType = \"both\",\n      limit = 30,\n      tags = [],\n      userAndGroupTags = false\n    } = _ref;\n    this.conversationRequest = null;\n    this.conversationListenerId = \"chatlist_\" + new Date().getTime();\n    this.userListenerId = \"chatlist_user_\" + new Date().getTime();\n    this.groupListenerId = \"chatlist_group_\" + new Date().getTime();\n    switch (conversationType) {\n      case ConversationTypeConstants[ConversationTypeConstants.users]:\n        this.conversationRequest = new CometChat.ConversationsRequestBuilder().setConversationType(conversationType).setLimit(limit).withTags(tags.length === 0 ? false : true).setTags(tags).withUserAndGroupTags(userAndGroupTags).build();\n        break;\n      case ConversationTypeConstants[ConversationTypeConstants.groups]:\n        this.conversationRequest = new CometChat.ConversationsRequestBuilder().setConversationType(conversationType).setLimit(limit).withTags(tags.length === 0 ? false : true).setTags(tags).withUserAndGroupTags(userAndGroupTags).build();\n        break;\n      default:\n        this.conversationRequest = new CometChat.ConversationsRequestBuilder().setLimit(limit).withTags(tags.length === 0 ? false : true).setTags(tags).withUserAndGroupTags(userAndGroupTags).build();\n        break;\n    }\n  }\n  fetchNextConversation() {\n    return this.conversationRequest.fetchNext();\n  }\n  attachListeners(callback) {\n    CometChat.addUserListener(this.userListenerId, new CometChat.UserListener({\n      onUserOnline: onlineUser => {\n        callback(\"onUserOnline\", onlineUser);\n      },\n      onUserOffline: offlineUser => {\n        callback(\"onUserOffline\", offlineUser);\n      }\n    }));\n    CometChat.addGroupListener(this.groupListenerId, new CometChat.GroupListener({\n      onGroupMemberScopeChanged: (message, changedUser, newScope, oldScope, changedGroup) => {\n        callback(\"onGroupMemberScopeChanged\", message, changedUser, newScope, oldScope, changedGroup);\n      },\n      onGroupMemberKicked: (message, kickedUser, kickedBy, kickedFrom) => {\n        callback(\"onGroupMemberKicked\", message, kickedUser, kickedBy, kickedFrom);\n      },\n      onGroupMemberLeft: (message, leavingUser, group) => {\n        callback(\"onGroupMemberLeft\", message, leavingUser, null, group);\n      },\n      onGroupMemberBanned: (message, bannedUser, bannedBy, bannedFrom) => {\n        callback(\"onGroupMemberBanned\", message, bannedUser, bannedBy, bannedFrom);\n      },\n      onMemberAddedToGroup: (message, userAdded, userAddedBy, userAddedIn) => {\n        callback(\"onMemberAddedToGroup\", message, userAdded, userAddedBy, userAddedIn);\n      },\n      onGroupMemberJoined: (message, joinedUser, joinedGroup) => {\n        callback(\"onGroupMemberJoined\", message, joinedUser, null, joinedGroup);\n      }\n    }));\n    CometChat.addMessageListener(this.conversationListenerId, new CometChat.MessageListener({\n      onTextMessageReceived: textMessage => {\n        callback(\"onTextMessageReceived\", textMessage);\n      },\n      onMediaMessageReceived: mediaMessage => {\n        callback(\"onMediaMessageReceived\", mediaMessage);\n      },\n      onCustomMessageReceived: customMessage => {\n        callback(\"onCustomMessageReceived\", customMessage);\n      },\n      onMessageDeleted: deletedMessage => {\n        callback(\"onMessageDeleted\", deletedMessage);\n      },\n      onMessageEdited: editedMessage => {\n        callback(\"onMessageEdited\", editedMessage);\n      },\n      onMessagesRead: messageReceipt => {\n        callback(\"onMessagesRead\", messageReceipt);\n      },\n      onTypingStarted: typingIndicator => {\n        callback(\"onTypingStarted\", typingIndicator, true);\n      },\n      onTypingEnded: typingIndicator => {\n        callback(\"onTypingEnded\", typingIndicator, false);\n      }\n    }));\n  }\n  removeListeners() {\n    CometChat.removeMessageListener(this.conversationListenerId);\n    CometChat.removeUserListener(this.userListenerId);\n    CometChat.removeGroupListener(this.groupListenerId);\n  }\n}","map":{"version":3,"names":["CometChat","ConversationTypeConstants","ConversationListManager","constructor","conversationType","limit","tags","userAndGroupTags","conversationRequest","conversationListenerId","Date","getTime","userListenerId","groupListenerId","users","ConversationsRequestBuilder","setConversationType","setLimit","withTags","length","setTags","withUserAndGroupTags","build","groups","fetchNextConversation","fetchNext","attachListeners","callback","addUserListener","UserListener","onUserOnline","onlineUser","onUserOffline","offlineUser","addGroupListener","GroupListener","onGroupMemberScopeChanged","message","changedUser","newScope","oldScope","changedGroup","onGroupMemberKicked","kickedUser","kickedBy","kickedFrom","onGroupMemberLeft","leavingUser","group","onGroupMemberBanned","bannedUser","bannedBy","bannedFrom","onMemberAddedToGroup","userAdded","userAddedBy","userAddedIn","onGroupMemberJoined","joinedUser","joinedGroup","addMessageListener","MessageListener","onTextMessageReceived","textMessage","onMediaMessageReceived","mediaMessage","onCustomMessageReceived","customMessage","onMessageDeleted","deletedMessage","onMessageEdited","editedMessage","onMessagesRead","messageReceipt","onTypingStarted","typingIndicator","onTypingEnded","removeListeners","removeMessageListener","removeUserListener","removeGroupListener"],"sources":["/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Chats/CometChatConversationList/controller.js"],"sourcesContent":["import { CometChat } from \"@cometchat-pro/chat\";\nimport { ConversationTypeConstants } from \"../../Shared/Constants/UIKitConstants\";\n\nexport class ConversationListManager {\n  conversationRequest = null;\n\n  conversationListenerId = \"chatlist_\" + new Date().getTime();\n  userListenerId = \"chatlist_user_\" + new Date().getTime();\n  groupListenerId = \"chatlist_group_\" + new Date().getTime();\n\n  constructor({\n    conversationType = \"both\",\n    limit = 30,\n    tags = [],\n    userAndGroupTags = false,\n  }) {\n    switch (conversationType) {\n      case ConversationTypeConstants[ConversationTypeConstants.users]:\n        this.conversationRequest = new CometChat.ConversationsRequestBuilder()\n          .setConversationType(conversationType)\n          .setLimit(limit)\n          .withTags(tags.length === 0 ? false : true)\n          .setTags(tags)\n          .withUserAndGroupTags(userAndGroupTags)\n          .build();\n\n        break;\n      case ConversationTypeConstants[ConversationTypeConstants.groups]:\n        this.conversationRequest = new CometChat.ConversationsRequestBuilder()\n          .setConversationType(conversationType)\n          .setLimit(limit)\n          .withTags(tags.length === 0 ? false : true)\n          .setTags(tags)\n          .withUserAndGroupTags(userAndGroupTags)\n          .build();\n        break;\n      default:\n        this.conversationRequest = new CometChat.ConversationsRequestBuilder()\n          .setLimit(limit)\n          .withTags(tags.length === 0 ? false : true)\n          .setTags(tags)\n          .withUserAndGroupTags(userAndGroupTags)\n          .build();\n\n        break;\n    }\n  }\n\n  fetchNextConversation() {\n    return this.conversationRequest.fetchNext();\n  }\n\n  attachListeners(callback) {\n    CometChat.addUserListener(\n      this.userListenerId,\n      new CometChat.UserListener({\n        onUserOnline: (onlineUser) => {\n          callback(\"onUserOnline\", onlineUser);\n        },\n        onUserOffline: (offlineUser) => {\n          callback(\"onUserOffline\", offlineUser);\n        },\n      })\n    );\n\n    CometChat.addGroupListener(\n      this.groupListenerId,\n      new CometChat.GroupListener({\n        onGroupMemberScopeChanged: (\n          message,\n          changedUser,\n          newScope,\n          oldScope,\n          changedGroup\n        ) => {\n          callback(\n            \"onGroupMemberScopeChanged\",\n            message,\n            changedUser,\n            newScope,\n            oldScope,\n            changedGroup\n          );\n        },\n        onGroupMemberKicked: (message, kickedUser, kickedBy, kickedFrom) => {\n          callback(\n            \"onGroupMemberKicked\",\n            message,\n            kickedUser,\n            kickedBy,\n            kickedFrom\n          );\n        },\n        onGroupMemberLeft: (message, leavingUser, group) => {\n          callback(\"onGroupMemberLeft\", message, leavingUser, null, group);\n        },\n        onGroupMemberBanned: (message, bannedUser, bannedBy, bannedFrom) => {\n          callback(\n            \"onGroupMemberBanned\",\n            message,\n            bannedUser,\n            bannedBy,\n            bannedFrom\n          );\n        },\n        onMemberAddedToGroup: (\n          message,\n          userAdded,\n          userAddedBy,\n          userAddedIn\n        ) => {\n          callback(\n            \"onMemberAddedToGroup\",\n            message,\n            userAdded,\n            userAddedBy,\n            userAddedIn\n          );\n        },\n        onGroupMemberJoined: (message, joinedUser, joinedGroup) => {\n          callback(\n            \"onGroupMemberJoined\",\n            message,\n            joinedUser,\n            null,\n            joinedGroup\n          );\n        },\n      })\n    );\n\n    CometChat.addMessageListener(\n      this.conversationListenerId,\n      new CometChat.MessageListener({\n        onTextMessageReceived: (textMessage) => {\n          callback(\"onTextMessageReceived\", textMessage);\n        },\n        onMediaMessageReceived: (mediaMessage) => {\n          callback(\"onMediaMessageReceived\", mediaMessage);\n        },\n        onCustomMessageReceived: (customMessage) => {\n          callback(\"onCustomMessageReceived\", customMessage);\n        },\n        onMessageDeleted: (deletedMessage) => {\n          callback(\"onMessageDeleted\", deletedMessage);\n        },\n        onMessageEdited: (editedMessage) => {\n          callback(\"onMessageEdited\", editedMessage);\n        },\n        onMessagesRead: (messageReceipt) => {\n          callback(\"onMessagesRead\", messageReceipt);\n        },\n        onTypingStarted: (typingIndicator) => {\n          callback(\"onTypingStarted\", typingIndicator, true);\n        },\n        onTypingEnded: (typingIndicator) => {\n          callback(\"onTypingEnded\", typingIndicator, false);\n        },\n      })\n    );\n  }\n  removeListeners() {\n    CometChat.removeMessageListener(this.conversationListenerId);\n    CometChat.removeUserListener(this.userListenerId);\n    CometChat.removeGroupListener(this.groupListenerId);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
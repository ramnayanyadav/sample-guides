{"ast":null,"code":"import { CometChat } from \"@cometchat-pro/chat\";\nexport class MessageListManager {\n  constructor(limit, user, group, onlyUnread, hideDeletedMessages, hideMessagesFromBlockedUsers, tags, messageTypesRef, messageCategoryRef) {\n    this.parentMessageId = null;\n    this.messageRequest = null;\n    this.messageListenerId = \"message_\" + new Date().getTime();\n    this.groupListenerId = \"group_\" + new Date().getTime();\n    this.user = null;\n    this.group = null;\n    const types = messageTypesRef;\n    const categories = messageCategoryRef;\n    if (user && user.uid) {\n      this.messageRequest = new CometChat.MessagesRequestBuilder().setLimit(limit).setUID(user.uid).setCategories(categories).setTypes(types).setUnread(onlyUnread).hideMessagesFromBlockedUsers(hideMessagesFromBlockedUsers).setTags(tags).hideDeletedMessages(hideDeletedMessages).build();\n    } else if (group && group.guid) {\n      this.messageRequest = new CometChat.MessagesRequestBuilder().setGUID(group.guid).setLimit(limit).setCategories(categories).setTypes(types).setUnread(onlyUnread).hideMessagesFromBlockedUsers(hideMessagesFromBlockedUsers).setTags(tags).hideDeletedMessages(hideDeletedMessages).build();\n    }\n  }\n  fetchPreviousMessages() {\n    return this.messageRequest.fetchPrevious();\n  }\n  attachListeners(callback) {\n    CometChat.addMessageListener(this.messageListenerId, new CometChat.MessageListener({\n      onTextMessageReceived: textMessage => {\n        callback(\"onTextMessageReceived\", textMessage);\n      },\n      onMediaMessageReceived: mediaMessage => {\n        callback(\"onMediaMessageReceived\", mediaMessage);\n      },\n      onCustomMessageReceived: customMessage => {\n        callback(\"onCustomMessageReceived\", customMessage);\n      },\n      onMessagesDelivered: messageReceipt => {\n        callback(\"onMessagesDelivered\", messageReceipt);\n      },\n      onMessagesRead: messageReceipt => {\n        callback(\"onMessagesRead\", messageReceipt);\n      },\n      onMessageDeleted: deletedMessage => {\n        callback(\"onMessageDeleted\", deletedMessage);\n      },\n      onMessageEdited: editedMessage => {\n        callback(\"onMessageEdited\", editedMessage);\n      }\n    }));\n    CometChat.addGroupListener(this.groupListenerId, new CometChat.GroupListener({\n      onGroupMemberScopeChanged: (message, changedUser, newScope, oldScope, changedGroup) => {\n        callback(\"onGroupMemberScopeChanged\", message, changedUser, newScope, oldScope, changedGroup);\n      },\n      onGroupMemberLeft: (message, leavingUser, group) => {\n        callback(\"onGroupMemberLeft\", message, leavingUser, group);\n      },\n      onGroupMemberKicked: (message, kickedUser, kickedBy, kickedFrom) => {\n        callback(\"onGroupMemberKicked\", message, kickedUser, kickedBy, kickedFrom);\n      },\n      onGroupMemberBanned: (message, bannedUser, bannedBy, bannedFrom) => {\n        callback(\"onGroupMemberBanned\", message, bannedUser, bannedBy, bannedFrom);\n      },\n      onGroupMemberUnbanned: (message, unbannedUser, unbannedBy, unbannedFrom) => {\n        callback(\"onGroupMemberUnbanned\", message, unbannedUser, unbannedBy, unbannedFrom);\n      },\n      onMemberAddedToGroup: (message, userAdded, userAddedBy, userAddedIn) => {\n        callback(\"onMemberAddedToGroup\", message, userAdded, userAddedBy, userAddedIn);\n      },\n      onGroupMemberJoined: (message, joinedUser, joinedGroup) => {\n        callback(\"onGroupMemberJoined\", message, joinedUser, null, joinedGroup);\n      }\n    }));\n  }\n  removeListeners() {\n    CometChat.removeMessageListener(this.messageListenerId);\n    CometChat.removeGroupListener(this.groupListenerId);\n  }\n}","map":{"version":3,"names":["CometChat","MessageListManager","constructor","limit","user","group","onlyUnread","hideDeletedMessages","hideMessagesFromBlockedUsers","tags","messageTypesRef","messageCategoryRef","parentMessageId","messageRequest","messageListenerId","Date","getTime","groupListenerId","types","categories","uid","MessagesRequestBuilder","setLimit","setUID","setCategories","setTypes","setUnread","setTags","build","guid","setGUID","fetchPreviousMessages","fetchPrevious","attachListeners","callback","addMessageListener","MessageListener","onTextMessageReceived","textMessage","onMediaMessageReceived","mediaMessage","onCustomMessageReceived","customMessage","onMessagesDelivered","messageReceipt","onMessagesRead","onMessageDeleted","deletedMessage","onMessageEdited","editedMessage","addGroupListener","GroupListener","onGroupMemberScopeChanged","message","changedUser","newScope","oldScope","changedGroup","onGroupMemberLeft","leavingUser","onGroupMemberKicked","kickedUser","kickedBy","kickedFrom","onGroupMemberBanned","bannedUser","bannedBy","bannedFrom","onGroupMemberUnbanned","unbannedUser","unbannedBy","unbannedFrom","onMemberAddedToGroup","userAdded","userAddedBy","userAddedIn","onGroupMemberJoined","joinedUser","joinedGroup","removeListeners","removeMessageListener","removeGroupListener"],"sources":["/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Messages/CometChatMessageList/controller.js"],"sourcesContent":["import { CometChat } from \"@cometchat-pro/chat\";\n\nexport class MessageListManager {\n  parentMessageId = null;\n  messageRequest = null;\n\n  messageListenerId = \"message_\" + new Date().getTime();\n  groupListenerId = \"group_\" + new Date().getTime();\n  user = null;\n  group = null;\n\n  constructor(\n    limit,\n    user,\n    group,\n    onlyUnread,\n    hideDeletedMessages,\n    hideMessagesFromBlockedUsers,\n    tags,\n    messageTypesRef,\n    messageCategoryRef\n  ) {\n    const types = messageTypesRef;\n    const categories = messageCategoryRef;\n\n    if (user && user.uid) {\n      this.messageRequest = new CometChat.MessagesRequestBuilder()\n        .setLimit(limit)\n        .setUID(user.uid)\n        .setCategories(categories)\n        .setTypes(types)\n        .setUnread(onlyUnread)\n        .hideMessagesFromBlockedUsers(hideMessagesFromBlockedUsers)\n        .setTags(tags)\n        .hideDeletedMessages(hideDeletedMessages)\n        .build();\n    } else if (group && group.guid) {\n      this.messageRequest = new CometChat.MessagesRequestBuilder()\n        .setGUID(group.guid)\n        .setLimit(limit)\n        .setCategories(categories)\n        .setTypes(types)\n        .setUnread(onlyUnread)\n        .hideMessagesFromBlockedUsers(hideMessagesFromBlockedUsers)\n        .setTags(tags)\n        .hideDeletedMessages(hideDeletedMessages)\n        .build();\n    }\n  }\n\n  fetchPreviousMessages() {\n    return this.messageRequest.fetchPrevious();\n  }\n\n  attachListeners(callback) {\n    CometChat.addMessageListener(\n      this.messageListenerId,\n      new CometChat.MessageListener({\n        onTextMessageReceived: (textMessage) => {\n          callback(\"onTextMessageReceived\", textMessage);\n        },\n        onMediaMessageReceived: (mediaMessage) => {\n          callback(\"onMediaMessageReceived\", mediaMessage);\n        },\n        onCustomMessageReceived: (customMessage) => {\n          callback(\"onCustomMessageReceived\", customMessage);\n        },\n        onMessagesDelivered: (messageReceipt) => {\n          callback(\"onMessagesDelivered\", messageReceipt);\n        },\n        onMessagesRead: (messageReceipt) => {\n          callback(\"onMessagesRead\", messageReceipt);\n        },\n        onMessageDeleted: (deletedMessage) => {\n          callback(\"onMessageDeleted\", deletedMessage);\n        },\n        onMessageEdited: (editedMessage) => {\n          callback(\"onMessageEdited\", editedMessage);\n        },\n      })\n    );\n\n    CometChat.addGroupListener(\n      this.groupListenerId,\n      new CometChat.GroupListener({\n        onGroupMemberScopeChanged: (\n          message,\n          changedUser,\n          newScope,\n          oldScope,\n          changedGroup\n        ) => {\n          callback(\n            \"onGroupMemberScopeChanged\",\n            message,\n            changedUser,\n            newScope,\n            oldScope,\n            changedGroup\n          );\n        },\n        onGroupMemberLeft: (message, leavingUser, group) => {\n          callback(\"onGroupMemberLeft\", message, leavingUser, group);\n        },\n        onGroupMemberKicked: (message, kickedUser, kickedBy, kickedFrom) => {\n          callback(\n            \"onGroupMemberKicked\",\n            message,\n            kickedUser,\n            kickedBy,\n            kickedFrom\n          );\n        },\n        onGroupMemberBanned: (message, bannedUser, bannedBy, bannedFrom) => {\n          callback(\n            \"onGroupMemberBanned\",\n            message,\n            bannedUser,\n            bannedBy,\n            bannedFrom\n          );\n        },\n        onGroupMemberUnbanned: (\n          message,\n          unbannedUser,\n          unbannedBy,\n          unbannedFrom\n        ) => {\n          callback(\n            \"onGroupMemberUnbanned\",\n            message,\n            unbannedUser,\n            unbannedBy,\n            unbannedFrom\n          );\n        },\n        onMemberAddedToGroup: (\n          message,\n          userAdded,\n          userAddedBy,\n          userAddedIn\n        ) => {\n          callback(\n            \"onMemberAddedToGroup\",\n            message,\n            userAdded,\n            userAddedBy,\n            userAddedIn\n          );\n        },\n        onGroupMemberJoined: (message, joinedUser, joinedGroup) => {\n          callback(\n            \"onGroupMemberJoined\",\n            message,\n            joinedUser,\n            null,\n            joinedGroup\n          );\n        },\n      })\n    );\n  }\n\n  removeListeners() {\n    CometChat.removeMessageListener(this.messageListenerId);\n    CometChat.removeGroupListener(this.groupListenerId);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
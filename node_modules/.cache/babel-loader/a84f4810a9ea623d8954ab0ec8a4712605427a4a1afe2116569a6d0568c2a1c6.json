{"ast":null,"code":"var _jsxFileName = \"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Chats/CometChatConversationList/index.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport PropTypes from \"prop-types\";\nimport { ConversationListManager } from \"./controller\";\nimport { Hooks } from \"./hooks\";\nimport * as styles from \"./style\";\nimport loadingIcon from \"./resources/spinner.svg\";\nimport { CometChatSoundManager, CometChatConversationListItem, localize, CometChatTheme, ReceiverTypeConstants, MessageCategoryConstants, ConversationTypeConstants, CometChatBackdrop, CometChatConfirmDialog, ConversationListItemConfiguration, ConversationOptionConstants, ConversationListItemStyles } from \"../../Shared\";\nimport { CometChatConversationEvents } from \"../\";\nimport { ConversationListStyles, CometChatConversationOptions } from \"../../Chats\";\nimport { ConversationListCustomView } from \"../ConversationListCustomView\";\nimport deleteIcon from \"./resources/delete.svg\";\n\n/**\n *\n * @version 1.0.0\n * @author CometChatTeam\n * @description CometChatConversationList component retrieves the latest conversations that a CometChat logged-in user has been a part of.\n * The state of the component is communicated via 3 states i.e empty, loading and error.\n *\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationList = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  var _theme$palette, _theme$palette2;\n  _s();\n  /**\n   * Props destructuring\n   */\n  const {\n    activeConversation,\n    emptyText,\n    errorText,\n    conversationType,\n    limit,\n    hideError,\n    tags,\n    userAndGroupTags,\n    loadingIconURL,\n    style,\n    enableSoundForMessages,\n    customIncomingMessageSound,\n    customView,\n    conversationListItemConfiguration,\n    theme\n  } = props;\n\n  /**\n   * Component internal state\n   */\n  const loggedInUser = useRef(null);\n  const conversationListManager = useRef(new ConversationListManager({\n    conversationType: conversationType,\n    limit: limit,\n    tags: tags,\n    userAndGroupTags: userAndGroupTags\n  }));\n  const [conversationList, setConversationList] = useState([]);\n  const [message, setMessage] = useState(localize(\"LOADING\"));\n  const [showConfirm, setShowConfirm] = useState({\n    show: false,\n    message: localize(\"CONFIRM_DELETE_CONVERSATION\"),\n    confirmButtonText: localize(\"DELETE\"),\n    conversation: null,\n    onCancel: () => {}\n  });\n  const activeConversationRef = React.useRef(null);\n  const callbackDataRef = React.useRef(null);\n\n  /**\n   * Component private scoping\n   */\n  const _conversationListItemConfiguration = new ConversationListItemConfiguration(conversationListItemConfiguration !== null && conversationListItemConfiguration !== void 0 ? conversationListItemConfiguration : {});\n  const _theme = new CometChatTheme(theme !== null && theme !== void 0 ? theme : {});\n  activeConversationRef.current = activeConversation;\n\n  /**\n   * Component internal handlers/methods\n   */\n\n  const conversationCallback = function (listenerName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    callbackDataRef.current = {\n      name: listenerName,\n      args: [...args]\n    };\n    try {\n      var _callbackDataRef$curr, _callbackDataRef$curr2;\n      const handler = handlers[(_callbackDataRef$curr = callbackDataRef.current) === null || _callbackDataRef$curr === void 0 ? void 0 : _callbackDataRef$curr.name];\n      if (handler) return handler(...((_callbackDataRef$curr2 = callbackDataRef.current) === null || _callbackDataRef$curr2 === void 0 ? void 0 : _callbackDataRef$curr2.args));\n    } catch (e) {\n      throw e;\n    }\n  };\n\n  /**\n   * Mark the incoming message as delivered\n   */\n  const markMessageAsDelivered = message => {\n    if (message.hasOwnProperty(\"deliveredAt\") === false) {\n      CometChat.markAsDelivered(message);\n    }\n  };\n\n  /**\n   *\n   * If the incoming message is 1-1 conversation, and the conversation type filter is set to groups return false\n   * If the incoming message is group conversation, and the conversation type filter is set to users return false\n   * else return true\n   *\n   */\n  React.useImperativeHandle(ref, () => ({\n    resetUnreadCount: resetUnreadCount,\n    updateLastMessage: updateLastMessage,\n    removeConversation: removeConversation,\n    deleteConversation: deleteConversation,\n    updateConversation: updateConversation\n  }));\n  const filterByConversationType = message => {\n    if (conversationType !== ConversationTypeConstants.both) {\n      if (conversationType === ConversationTypeConstants.users && (message === null || message === void 0 ? void 0 : message.receiverType) === ReceiverTypeConstants.group || conversationType === ConversationTypeConstants.groups && (message === null || message === void 0 ? void 0 : message.receiverType) === ReceiverTypeConstants.user) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   *\n   * Converting message object received in the listener callback to conversation object\n   */\n  const getConversationFromMessage = message => {\n    return new Promise((resolve, reject) => {\n      CometChat.CometChatHelper.getConversationFromMessage(message).then(conversation => {\n        let conversationKey = conversationList.findIndex(c => c.conversationId === conversation.conversationId);\n        if (conversationKey > -1) {\n          resolve({\n            conversationKey: conversationKey,\n            conversationId: conversation.conversationId,\n            conversationType: conversation.conversationType,\n            conversationWith: conversation.conversationWith,\n            conversation: conversationList[conversationKey],\n            conversations: [...conversationList]\n          });\n        }\n        resolve({\n          conversationKey: conversationKey,\n          conversationId: conversation.conversationId,\n          conversationType: conversation.conversationType,\n          conversationWith: conversation.conversationWith,\n          conversation: conversation,\n          conversations: [...conversationList]\n        });\n      }).catch(error => {\n        CometChatConversationEvents.emit(CometChatConversationEvents.onError, error);\n        reject(error);\n      });\n    });\n  };\n  const getUnreadMessageCount = function (message) {\n    var _activeConversationRe;\n    let conversation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let activeConversation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let unreadMessageCount = conversation !== null && conversation !== void 0 && conversation.unreadMessageCount ? Number(conversation === null || conversation === void 0 ? void 0 : conversation.unreadMessageCount) : 0;\n    unreadMessageCount = shouldIncrementCount(message) ? ++unreadMessageCount : unreadMessageCount;\n    console.log(\"activeConversation\", activeConversationRef, \"conversation\", conversation);\n    unreadMessageCount = ((_activeConversationRe = activeConversationRef.current) === null || _activeConversationRe === void 0 ? void 0 : _activeConversationRe.conversationId) === (conversation === null || conversation === void 0 ? void 0 : conversation.conversationId) ? 0 : unreadMessageCount;\n    console.log(\"unreadMessageCount\", unreadMessageCount);\n    return unreadMessageCount;\n  };\n\n  /**\n   *\n   * If the message is sent by the logged in user, return false\n   * If the message has category message or has incrementUnreadCount key in the metadata with value set to true, return true else return false\n   *\n   */\n  const shouldIncrementCount = message => {\n    var _message$sender, _loggedInUser$current, _message$metadata;\n    if ((message === null || message === void 0 ? void 0 : (_message$sender = message.sender) === null || _message$sender === void 0 ? void 0 : _message$sender.uid) === (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current = loggedInUser.current) === null || _loggedInUser$current === void 0 ? void 0 : _loggedInUser$current.uid)) {\n      return false;\n    }\n    if ((message === null || message === void 0 ? void 0 : message.category) === MessageCategoryConstants.message || (message === null || message === void 0 ? void 0 : (_message$metadata = message.metadata) === null || _message$metadata === void 0 ? void 0 : _message$metadata.incrementUnreadCount) === true) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * play notification sound for incoming messages\n   */\n  const playNotificationSound = message => {\n    /**\n     * If unreadcount is not incremented, don't play notification sound\n     */\n    if (!shouldIncrementCount(message)) {\n      return false;\n    }\n    /**\n          * If customIncomingMessageSound url is present then CometChatSoundManager will play this sound\n          else play the default sound\n          */\n    if (enableSoundForMessages && activeConversation !== null && activeConversation !== void 0 && activeConversation.conversationType && activeConversation !== null && activeConversation !== void 0 && activeConversation.conversationWith) {\n      var _message$getSender, _activeConversation$c, _activeConversation$c2;\n      const receiverType = message.getReceiverType();\n      const receiverId = receiverType === ReceiverTypeConstants.user ? message === null || message === void 0 ? void 0 : (_message$getSender = message.getSender()) === null || _message$getSender === void 0 ? void 0 : _message$getSender.getUid() : message === null || message === void 0 ? void 0 : message.getReceiverId();\n      if (receiverId !== (activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$c = activeConversation.conversationWith) === null || _activeConversation$c === void 0 ? void 0 : _activeConversation$c.uid) && receiverId !== (activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$c2 = activeConversation.conversationWith) === null || _activeConversation$c2 === void 0 ? void 0 : _activeConversation$c2.guid)) {\n        if (customIncomingMessageSound) {\n          CometChatSoundManager.play(customIncomingMessageSound);\n        } else {\n          CometChatSoundManager.play(CometChatSoundManager.Sound.incomingMessageFromOther);\n        }\n      }\n    }\n  };\n\n  /**\n   *\n   * When a user goes online/ offline\n   */\n  const handleUsers = user => {\n    const conversationKey = conversationList.findIndex(eachConversation => eachConversation.conversationType && eachConversation.conversationType === ReceiverTypeConstants.user && eachConversation.conversationWith && eachConversation.conversationWith.uid && eachConversation.conversationWith.uid === user.uid);\n    if (conversationKey > -1) {\n      let conversations = [...conversationList];\n      let conversation = conversations[conversationKey];\n      let conversationWith = {\n        ...conversation.conversationWith,\n        status: user.getStatus()\n      };\n      let newConversation = {\n        ...conversation,\n        conversationWith: conversationWith\n      };\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   *\n   * When a text message / media message / custom message is received\n   */\n  const handleMessages = function () {\n    const message = arguments.length <= 0 ? undefined : arguments[0];\n    /**\n     * marking the incoming messages as read\n     */\n    markMessageAsDelivered(message);\n    /**\n     * If the incoming message is 1-1 and the conversation type filter is set to group, return false\n     * OR\n     * If the incoming message is group and the conversation type filter is set to \"users\", return false\n     * ELSE\n     * return true\n     */\n    if (filterByConversationType() === false) {\n      return false;\n    }\n    CometChat.CometChatHelper.getConversationFromMessage(message).then(conversation => {\n      setConversationList(prevConversationList => {\n        const list = [...prevConversationList];\n        let conversationKey = prevConversationList.findIndex(c => c.conversationId === conversation.conversationId);\n\n        //  const lastMessage = { ...conversation?.lastMessage, ...message, data: {...message.data} };\n\n        if (conversationKey > -1) {\n          const latestConversation = prevConversationList[conversationKey];\n          const lastMessage = {\n            ...(latestConversation === null || latestConversation === void 0 ? void 0 : latestConversation.lastMessage),\n            ...message,\n            data: {\n              ...message.data\n            }\n          };\n          const unreadMessageCount = getUnreadMessageCount(message, latestConversation);\n          const newConversation = {\n            ...latestConversation,\n            conversationId: latestConversation.conversationId,\n            conversationType: latestConversation.conversationType,\n            conversationWith: {\n              ...latestConversation.conversationWith\n            },\n            unreadMessageCount: unreadMessageCount,\n            lastMessage: {\n              ...lastMessage\n            }\n          };\n\n          //play notification sound\n          playNotificationSound(message);\n          list.splice(conversationKey, 1);\n          list.unshift(newConversation);\n          return [...list];\n        } else {\n          const lastMessage = {\n            ...(conversation === null || conversation === void 0 ? void 0 : conversation.lastMessage),\n            ...message,\n            data: {\n              ...message.data\n            }\n          };\n          const unreadMessageCount = getUnreadMessageCount(message, conversation);\n          const newConversation = new CometChat.Conversation(conversation.conversationId, conversation.conversationType, lastMessage, conversation.conversationWith, unreadMessageCount);\n          list.unshift(newConversation);\n          return [...list];\n        }\n      });\n    }).catch(error => CometChatConversationEvents.emit(CometChatConversationEvents.onError, error));\n  };\n\n  /**\n   * Listener callback when a message is edited, deleted or updated\n   */\n  const handleMessageActions = function () {\n    const message = arguments.length <= 0 ? undefined : arguments[0];\n    getConversationFromMessage(message).then(response => {\n      const {\n        conversationKey,\n        conversationId,\n        conversationType,\n        conversationWith,\n        conversation,\n        conversations\n      } = response;\n      if (conversationKey > -1 && conversation.lastMessage.id === message.id) {\n        const lastMessage = {\n          ...conversation.lastMessage,\n          ...message\n        };\n        const unreadMessageCount = getUnreadMessageCount(message, conversation);\n        const newConversation = new CometChat.Conversation(conversationId, conversationType, lastMessage, conversationWith, unreadMessageCount);\n        conversations.splice(conversationKey, 1, newConversation);\n        setConversationList([...conversations]);\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a message is read\n   */\n  const handleMessageReadActions = function () {\n    const messageReceipt = arguments.length <= 0 ? undefined : arguments[0];\n    let conversationKey = conversationList.findIndex(conversation => {\n      var _conversation$convers, _conversation$convers2;\n      return (messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.receiverType) === (conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) && ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.receiver) === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers = conversation.conversationWith) === null || _conversation$convers === void 0 ? void 0 : _conversation$convers.uid) || (messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.receiver) === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers2 = conversation.conversationWith) === null || _conversation$convers2 === void 0 ? void 0 : _conversation$convers2.guid));\n    });\n    if (conversationKey > -1) {\n      var _conversation$lastMes;\n      const conversations = {\n        ...conversationList\n      };\n      const conversation = conversations[conversationKey];\n      let unreadMessageCount = getUnreadMessageCount(message, conversation);\n\n      /**\n       * If the message id in the read receipt is greater than or equal to the lastmessage id, set unreadmessagecount to 0\n       */\n      if ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.messageId) >= (conversation === null || conversation === void 0 ? void 0 : (_conversation$lastMes = conversation.lastMessage) === null || _conversation$lastMes === void 0 ? void 0 : _conversation$lastMes.id)) {\n        unreadMessageCount = 0;\n      }\n      const newConversation = new CometChat.Conversation(conversation.conversationId, conversation.conversationType, conversation.lastMessage, conversation.conversationWith, unreadMessageCount);\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   *\n   * Listener callback when a user joins/added to the group\n   */\n  const handleGroupMemberAddition = function () {\n    const message = arguments.length <= 0 ? undefined : arguments[0];\n    const newUser = arguments.length <= 1 ? undefined : arguments[1];\n    const group = arguments.length <= 3 ? undefined : arguments[3];\n    getConversationFromMessage(message).then(response => {\n      var _loggedInUser$current2;\n      const {\n        conversationKey,\n        conversationId,\n        conversationType,\n        conversationWith,\n        conversation,\n        conversations\n      } = response;\n      if (conversationKey > -1) {\n        const lastMessage = {\n          ...conversation.lastMessage,\n          ...message\n        };\n        const newConversationWith = {\n          ...conversationWith,\n          ...group\n        };\n        const unreadMessageCount = getUnreadMessageCount(message, conversation);\n        const newConversation = new CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n        conversations.splice(conversationKey, 1, newConversation);\n        setConversationList(conversations);\n      } else if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current2 = loggedInUser.current) === null || _loggedInUser$current2 === void 0 ? void 0 : _loggedInUser$current2.uid) === newUser.uid) {\n        /**\n         * If the loggedin user is added to the group, add the conversation to the chats list\n         */\n        const lastMessage = {\n          ...message\n        };\n        const newConversationWith = {\n          ...conversationWith,\n          ...group,\n          hasJoined: true\n        };\n        const unreadMessageCount = getUnreadMessageCount(message, conversation);\n        const newConversation = new CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n        conversations.unshift(newConversation);\n        setConversationList(conversations);\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a member is kicked from / has left the group\n   */\n  const handleGroupMemberRemoval = function () {\n    const message = arguments.length <= 0 ? undefined : arguments[0];\n    const removedUser = arguments.length <= 1 ? undefined : arguments[1];\n    const group = arguments.length <= 3 ? undefined : arguments[3];\n    getConversationFromMessage(message).then(response => {\n      const {\n        conversationKey,\n        conversationId,\n        conversationType,\n        conversationWith,\n        conversation,\n        conversations\n      } = response;\n      if (conversationKey > -1) {\n        var _loggedInUser$current3;\n        /**\n         * If the loggedin user is removed from the group, remove the conversation from the chats list\n         */\n        if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current3 = loggedInUser.current) === null || _loggedInUser$current3 === void 0 ? void 0 : _loggedInUser$current3.uid) === removedUser.uid) {\n          conversations.splice(conversationKey, 1);\n          setConversationList(conversations);\n        } else {\n          const lastMessage = {\n            ...conversation.lastMessage,\n            ...message\n          };\n          const newConversationWith = {\n            ...conversationWith,\n            ...group\n          };\n          const unreadMessageCount = getUnreadMessageCount(message, conversation);\n          const newConversation = new CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n          conversations.splice(conversationKey, 1, newConversation);\n          setConversationList(conversations);\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a member is banned from the group\n   */\n  const handleGroupMemberBan = function () {\n    const message = arguments.length <= 0 ? undefined : arguments[0];\n    const removedUser = arguments.length <= 1 ? undefined : arguments[1];\n    const group = arguments.length <= 3 ? undefined : arguments[3];\n    getConversationFromMessage(message).then(response => {\n      const {\n        conversationKey,\n        conversationId,\n        conversationType,\n        conversationWith,\n        conversation,\n        conversations\n      } = response;\n      if (conversationKey > -1) {\n        var _loggedInUser$current4;\n        /**\n         * If the loggedin user is banned from the group, remove the conversation from the chats list\n         */\n        if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current4 = loggedInUser.current) === null || _loggedInUser$current4 === void 0 ? void 0 : _loggedInUser$current4.uid) === removedUser.uid) {\n          conversations.splice(conversationKey, 1);\n          setConversationList(conversations);\n        } else {\n          const lastMessage = {\n            ...conversation.lastMessage,\n            ...message\n          };\n          const newConversationWith = {\n            ...conversationWith,\n            ...group\n          };\n          const unreadMessageCount = getUnreadMessageCount(message, conversation);\n          const newConversation = new CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n          conversations.splice(conversationKey, 1, newConversation);\n          setConversationList(conversations);\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a group member scope is updated\n   */\n  const handleGroupMemberScopeChange = function () {\n    const message = arguments.length <= 0 ? undefined : arguments[0];\n    const user = arguments.length <= 1 ? undefined : arguments[1];\n    const newScope = arguments.length <= 2 ? undefined : arguments[2];\n    const group = arguments.length <= 4 ? undefined : arguments[4];\n    getConversationFromMessage(message).then(response => {\n      const {\n        conversationKey,\n        conversationId,\n        conversationType,\n        conversationWith,\n        conversation,\n        conversations\n      } = response;\n      if (conversationKey > -1) {\n        var _loggedInUser$current5;\n        const lastMessage = {\n          ...conversation.lastMessage,\n          ...message\n        };\n        const unreadMessageCount = getUnreadMessageCount(message, conversation);\n        if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current5 = loggedInUser.current) === null || _loggedInUser$current5 === void 0 ? void 0 : _loggedInUser$current5.uid) === user.uid) {\n          const newConversationWith = {\n            ...conversationWith,\n            ...group,\n            scope: newScope\n          };\n          const newConversation = new CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n          conversations.splice(conversationKey, 1);\n          conversations.unshift(newConversation);\n          setConversationList(conversations);\n        } else {\n          let newConversationWith = {\n            ...conversationWith,\n            ...group\n          };\n          const newConversation = new CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n          conversations.splice(conversationKey, 1, newConversation);\n          setConversationList(conversations);\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback for typing events\n   */\n  const handleTyping = function () {\n    const typingData = arguments.length <= 0 ? undefined : arguments[0];\n    const typingStarted = arguments.length <= 1 ? undefined : arguments[1];\n    const conversations = [...conversationList];\n    let conversationKey = conversations.findIndex(conversation => {\n      var _conversation$convers3, _typingData$sender, _conversation$convers4;\n      return (conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === (typingData === null || typingData === void 0 ? void 0 : typingData.receiverType) && ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === ReceiverTypeConstants.user && ((_conversation$convers3 = conversation.conversationWith) === null || _conversation$convers3 === void 0 ? void 0 : _conversation$convers3.uid) === (typingData === null || typingData === void 0 ? void 0 : (_typingData$sender = typingData.sender) === null || _typingData$sender === void 0 ? void 0 : _typingData$sender.uid) || conversation.conversationType === ReceiverTypeConstants.group && ((_conversation$convers4 = conversation.conversationWith) === null || _conversation$convers4 === void 0 ? void 0 : _conversation$convers4.guid) === (typingData === null || typingData === void 0 ? void 0 : typingData.receiverId));\n    });\n    if (conversationKey > -1) {\n      let typingIndicatorText = \"\";\n      if (typingStarted) {\n        var _typingData$sender2;\n        typingIndicatorText = (typingData === null || typingData === void 0 ? void 0 : typingData.receiverType) === ReceiverTypeConstants.group ? `${typingData === null || typingData === void 0 ? void 0 : (_typingData$sender2 = typingData.sender) === null || _typingData$sender2 === void 0 ? void 0 : _typingData$sender2.name} ${localize(\"IS_TYPING\")}` : localize(\"IS_TYPING\");\n      }\n      const conversation = conversationList[conversationKey];\n      const newConversation = {\n        ...conversation,\n        showTypingIndicator: typingStarted,\n        typingIndicatorText\n      };\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   *\n   * @param {Object} conversation\n   * Public method to update the conversation list programmatically\n   */\n  const updateConversation = conversation => {\n    const conversationKey = conversationList.findIndex(eachConversation => {\n      var _conversation$convers5;\n      return eachConversation.conversationWith && eachConversation.conversationWith.uid && eachConversation.conversationWith.uid === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers5 = conversation.conversationWith) === null || _conversation$convers5 === void 0 ? void 0 : _conversation$convers5.uid);\n    });\n    if (conversationKey > -1) {\n      let conversations = [...conversationList];\n      let conversation = conversations[conversationKey];\n      let conversationWith = {\n        ...conversation.conversationWith\n      };\n      let newConversation = {\n        ...conversation,\n        conversationWith: conversationWith\n      };\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n  const handlers = {\n    onUserOnline: handleUsers,\n    onUserOffline: handleUsers,\n    onTextMessageReceived: handleMessages,\n    onMediaMessageReceived: handleMessages,\n    onCustomMessageReceived: handleMessages,\n    onIncomingCallReceived: handleMessages,\n    onIncomingCallCancelled: handleMessages,\n    messageEdited: handleMessageActions,\n    onMessageDeleted: handleMessageActions,\n    messageRead: handleMessageReadActions,\n    onMemberAddedToGroup: handleGroupMemberAddition,\n    onGroupMemberJoined: handleGroupMemberAddition,\n    onGroupMemberKicked: handleGroupMemberRemoval,\n    onGroupMemberLeft: handleGroupMemberRemoval,\n    onGroupMemberBanned: handleGroupMemberBan,\n    onGroupMemberScopeChanged: handleGroupMemberScopeChange,\n    onTypingStarted: handleTyping,\n    onTypingEnded: handleTyping\n  };\n  const handleConversations = () => {\n    getConversations().then(conversations => {\n      if (conversationList.length === 0 && conversations.length === 0) {\n        setMessage(\"NO_CHATS_FOUND\");\n      } else {\n        setMessage(\"\");\n      }\n      setConversationList(conversationList => {\n        return [...conversationList, ...conversations];\n      });\n    }).catch(error => {\n      CometChatConversationEvents.emit(CometChatConversationEvents.onError, error);\n      setMessage(\"SOMETHING_WENT_WRONG\");\n    });\n  };\n  const getConversations = () => {\n    return new Promise((resolve, reject) => {\n      conversationListManager === null || conversationListManager === void 0 ? void 0 : conversationListManager.current.fetchNextConversation().then(conversations => resolve(conversations)).catch(error => {\n        CometChatConversationEvents.emit(CometChatConversationEvents.onError, error);\n        reject(error);\n      });\n    });\n  };\n  const handleScroll = event => {\n    const bottom = Math.round(event.currentTarget.scrollHeight - event.currentTarget.scrollTop) === Math.round(event.currentTarget.clientHeight);\n    if (bottom) {\n      handleConversations();\n    }\n  };\n\n  /**\n   * reset un read count\n   */\n  const resetUnreadCount = conversation => {\n    const conversations = [...conversationList];\n    const conversationKey = conversations.findIndex(conversationObject => conversationObject.conversationId === conversation.conversationId);\n    if (conversationKey > -1) {\n      let conversation = conversations[conversationKey];\n      let newConversation = {\n        ...conversation,\n        unreadMessageCount: 0\n      };\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   * update last message\n   */\n  const updateLastMessage = message => {\n    getConversationFromMessage(message).then(response => {\n      const {\n        conversationKey,\n        conversations,\n        conversation\n      } = response;\n      if (conversationKey > -1) {\n        let newConversation = {\n          ...conversation,\n          lastMessage: message\n        };\n        conversations.splice(conversationKey, 1, newConversation);\n        setConversationList([...conversations]);\n      }\n    });\n  };\n\n  /**\n   * Remove conversation from the conversationlist upon delete\n   */\n  const removeConversation = conversation => {\n    const conversationKey = conversationList.findIndex(c => c.conversationId === conversation.conversationId);\n    if (conversationKey > -1) {\n      const newConversationList = [...conversationList];\n      newConversationList.splice(conversationKey, 1);\n      setConversationList(newConversationList);\n    }\n  };\n  const deleteConversation = conversationToBeDeleted => {\n    return new Promise((resolve, reject) => {\n      var _conversationToBeDele, _conversationToBeDele2;\n      const conversationWith = (conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : conversationToBeDeleted.conversationType) === ReceiverTypeConstants.group ? conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : (_conversationToBeDele = conversationToBeDeleted.conversationWith) === null || _conversationToBeDele === void 0 ? void 0 : _conversationToBeDele.guid : conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : (_conversationToBeDele2 = conversationToBeDeleted.conversationWith) === null || _conversationToBeDele2 === void 0 ? void 0 : _conversationToBeDele2.uid;\n      CometChat.deleteConversation(conversationWith, conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : conversationToBeDeleted.conversationType).then(deletedConversation => {\n        setShowConfirm({\n          ...showConfirm,\n          show: false\n        });\n        removeConversation(conversationToBeDeleted);\n        resolve(deletedConversation);\n        CometChatConversationEvents.emit(CometChatConversationEvents.onDeleteConversation, conversationToBeDeleted);\n      }).catch(error => {\n        CometChatConversationEvents.emit(CometChatConversationEvents.onError, conversationToBeDeleted);\n        reject(error);\n      });\n    });\n  };\n  const cancelDelete = () => setShowConfirm({\n    ...showConfirm,\n    show: false\n  });\n  const confirmDelete = conversation => {\n    setShowConfirm({\n      ...showConfirm,\n      show: true,\n      conversation: conversation,\n      onCancel: cancelDelete\n    });\n  };\n  const itemClickhandler = e => {\n    CometChatConversationEvents.emit(CometChatConversationEvents.onItemClick, e);\n  };\n\n  /**\n   * Component hooks\n   */\n\n  Hooks(conversationType, limit, tags, userAndGroupTags, setConversationList, conversationCallback, conversationListManager, loggedInUser, handleConversations);\n\n  /**\n   * Component template scoping\n   */\n\n  const getCustomView = (customView, props) => {\n    return /*#__PURE__*/React.createElement(customView, props);\n  };\n  const getMessageContainer = () => {\n    let messageContainer = null;\n    if (conversationList.length === 0 && message.toLowerCase() === localize(\"LOADING\")) {\n      /**Loading custom view */\n      messageContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.messageContainerStyle(style),\n        className: \"chats__message\",\n        children: customView.loading ? getCustomView(customView.loading, props) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.messageImgStyle(style, _theme, loadingIconURL),\n          className: \"message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 949,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 942,\n        columnNumber: 5\n      }, this);\n    } else if (conversationList.length === 0 && message.toLowerCase() === \"no chats found\") {\n      /**Empty custom view */\n      messageContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.messageContainerStyle(style),\n        className: \"chats__message\",\n        children: customView.empty ? getCustomView(customView.empty, props) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.messageTextStyle(style, _theme, message),\n          className: \"message\",\n          children: emptyText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 969,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 5\n      }, this);\n    } else if (!hideError && message.toLowerCase() === \"something went wrong\") {\n      /**Error custom view */\n      messageContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.messageContainerStyle(style),\n        className: \"chats__message\",\n        children: customView.error ? getCustomView(customView.error, props) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.messageTextStyle(style, _theme, message),\n          className: \"message\",\n          children: errorText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 988,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 5\n      }, this);\n    }\n    return messageContainer;\n  };\n  const renderItems = conversationList.map(conversation => {\n    var _conversationOptions;\n    const typingIndicatorText = conversation !== null && conversation !== void 0 && conversation.typingIndicatorText ? conversation === null || conversation === void 0 ? void 0 : conversation.typingIndicatorText : \"\";\n    let isActive = (conversation === null || conversation === void 0 ? void 0 : conversation.conversationId) === (activeConversation === null || activeConversation === void 0 ? void 0 : activeConversation.conversationId) ? true : false;\n\n    /**\n     * Calculate conversations options for child component\n     */\n    let conversationOptions = _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.conversationOptions;\n    if (((_conversationOptions = conversationOptions) === null || _conversationOptions === void 0 ? void 0 : _conversationOptions.length) == 0) {\n      conversationOptions = [new CometChatConversationOptions({\n        id: ConversationOptionConstants.delete,\n        title: localize(\"DELETE\"),\n        iconURL: deleteIcon,\n        onClick: () => confirmDelete(conversation)\n      })];\n    }\n    return /*#__PURE__*/_jsxDEV(CometChatConversationListItem, {\n      conversationObject: conversation,\n      isActive: isActive,\n      conversationInputData: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.conversationInputData,\n      conversationOptions: conversationOptions,\n      style: new ConversationListItemStyles({\n        ...styles.listItemStyle(style, _theme)\n      }),\n      hideDeletedMessages: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.hideDeletedMessages,\n      hideGroupActions: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.hideGroupActions,\n      showTypingIndicator: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.showTypingIndicator,\n      typingIndicatorText: typingIndicatorText,\n      hideThreadIndicator: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.hideThreadIndicator,\n      threadIndicatorText: localize(\"IN_A_THREAD\"),\n      theme: _theme,\n      onClick: itemClickhandler.bind(this),\n      avatarConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.avatarConfiguration,\n      statusIndicatorConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.statusIndicatorConfiguration,\n      badgeCountConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.badgeCountConfiguration,\n      messageReceiptConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.messageReceiptConfiguration,\n      loggedInUser: loggedInUser === null || loggedInUser === void 0 ? void 0 : loggedInUser.current\n    }, conversation.conversationId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1026,\n      columnNumber: 4\n    }, this);\n  });\n\n  /**\n   * Component template\n   */\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [getMessageContainer(), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.chatsListStyle(style, _theme),\n      className: \"conversation__list\",\n      onScroll: handleScroll,\n      children: renderItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1076,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(CometChatBackdrop, {\n      isOpen: showConfirm.show,\n      onClick: showConfirm.onCancel,\n      background: _theme === null || _theme === void 0 ? void 0 : (_theme$palette = _theme.palette) === null || _theme$palette === void 0 ? void 0 : _theme$palette.accent200[_theme === null || _theme === void 0 ? void 0 : (_theme$palette2 = _theme.palette) === null || _theme$palette2 === void 0 ? void 0 : _theme$palette2.mode],\n      children: /*#__PURE__*/_jsxDEV(CometChatConfirmDialog, {\n        isOpen: showConfirm.show,\n        onConfirm: deleteConversation.bind(this, showConfirm.conversation),\n        onCancel: showConfirm.onCancel,\n        style: styles.DialogStyle(_theme),\n        title: localize(\"DELETE_CONVERSATION\"),\n        messageText: localize(\"CONFIRM_DELETE_CONVERSATION\"),\n        confirmButtonText: localize(\"CONFIRM_BUTTON_TEXT\"),\n        cancelButtonText: localize(\"CANCEL_BUTTON_TEXT\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1083,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1074,\n    columnNumber: 3\n  }, this);\n}, \"G79o6VXUQ6FVfOrM2CsSWDKgmZc=\")), \"G79o6VXUQ6FVfOrM2CsSWDKgmZc=\");\n\n/**\n * Component default props\n */\n_c2 = ConversationList;\nConversationList.defaultProps = {\n  loadingIconURL: loadingIcon\n};\n\n/**\n * Component default props types\n */\nConversationList.propTypes = {\n  conversationType: PropTypes.oneOf([\"users\", \"groups\", \"both\"]),\n  limit: PropTypes.number,\n  hideError: PropTypes.bool,\n  tags: PropTypes.array,\n  userAndGroupTags: PropTypes.bool,\n  emptyText: PropTypes.string,\n  errorText: PropTypes.string,\n  loadingIconURL: PropTypes.string,\n  style: PropTypes.object,\n  activeConversation: PropTypes.object,\n  enableSoundForMessages: PropTypes.bool,\n  customIncomingMessageSound: PropTypes.string,\n  customView: PropTypes.object,\n  conversationListItemConfiguration: PropTypes.object,\n  theme: PropTypes.object\n};\nexport const CometChatConversationList = /*#__PURE__*/React.memo(ConversationList);\n_c3 = CometChatConversationList;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ConversationList$React.forwardRef\");\n$RefreshReg$(_c2, \"ConversationList\");\n$RefreshReg$(_c3, \"CometChatConversationList\");","map":{"version":3,"names":["React","useRef","useState","CometChat","PropTypes","ConversationListManager","Hooks","styles","loadingIcon","CometChatSoundManager","CometChatConversationListItem","localize","CometChatTheme","ReceiverTypeConstants","MessageCategoryConstants","ConversationTypeConstants","CometChatBackdrop","CometChatConfirmDialog","ConversationListItemConfiguration","ConversationOptionConstants","ConversationListItemStyles","CometChatConversationEvents","ConversationListStyles","CometChatConversationOptions","ConversationListCustomView","deleteIcon","ConversationList","forwardRef","props","ref","activeConversation","emptyText","errorText","conversationType","limit","hideError","tags","userAndGroupTags","loadingIconURL","style","enableSoundForMessages","customIncomingMessageSound","customView","conversationListItemConfiguration","theme","loggedInUser","conversationListManager","conversationList","setConversationList","message","setMessage","showConfirm","setShowConfirm","show","confirmButtonText","conversation","onCancel","activeConversationRef","callbackDataRef","_conversationListItemConfiguration","_theme","current","conversationCallback","listenerName","args","name","handler","handlers","e","markMessageAsDelivered","hasOwnProperty","markAsDelivered","useImperativeHandle","resetUnreadCount","updateLastMessage","removeConversation","deleteConversation","updateConversation","filterByConversationType","both","users","receiverType","group","groups","user","getConversationFromMessage","Promise","resolve","reject","CometChatHelper","then","conversationKey","findIndex","c","conversationId","conversationWith","conversations","catch","error","emit","onError","getUnreadMessageCount","unreadMessageCount","Number","shouldIncrementCount","console","log","sender","uid","category","metadata","incrementUnreadCount","playNotificationSound","getReceiverType","receiverId","getSender","getUid","getReceiverId","guid","play","Sound","incomingMessageFromOther","handleUsers","eachConversation","status","getStatus","newConversation","splice","handleMessages","prevConversationList","list","latestConversation","lastMessage","data","unshift","Conversation","handleMessageActions","response","id","handleMessageReadActions","messageReceipt","receiver","messageId","handleGroupMemberAddition","newUser","newConversationWith","hasJoined","handleGroupMemberRemoval","removedUser","handleGroupMemberBan","handleGroupMemberScopeChange","newScope","scope","handleTyping","typingData","typingStarted","typingIndicatorText","showTypingIndicator","onUserOnline","onUserOffline","onTextMessageReceived","onMediaMessageReceived","onCustomMessageReceived","onIncomingCallReceived","onIncomingCallCancelled","messageEdited","onMessageDeleted","messageRead","onMemberAddedToGroup","onGroupMemberJoined","onGroupMemberKicked","onGroupMemberLeft","onGroupMemberBanned","onGroupMemberScopeChanged","onTypingStarted","onTypingEnded","handleConversations","getConversations","length","fetchNextConversation","handleScroll","event","bottom","Math","round","currentTarget","scrollHeight","scrollTop","clientHeight","conversationObject","newConversationList","conversationToBeDeleted","deletedConversation","onDeleteConversation","cancelDelete","confirmDelete","itemClickhandler","onItemClick","getCustomView","createElement","getMessageContainer","messageContainer","toLowerCase","messageContainerStyle","loading","messageImgStyle","empty","messageTextStyle","renderItems","map","isActive","conversationOptions","delete","title","iconURL","onClick","conversationInputData","listItemStyle","hideDeletedMessages","hideGroupActions","hideThreadIndicator","bind","avatarConfiguration","statusIndicatorConfiguration","badgeCountConfiguration","messageReceiptConfiguration","chatsListStyle","palette","accent200","mode","DialogStyle","defaultProps","propTypes","oneOf","number","bool","array","string","object","CometChatConversationList","memo"],"sources":["/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Chats/CometChatConversationList/index.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport PropTypes from \"prop-types\";\nimport { ConversationListManager } from \"./controller\";\nimport { Hooks } from \"./hooks\";\nimport * as styles from \"./style\";\nimport loadingIcon from \"./resources/spinner.svg\";\nimport {\n CometChatSoundManager,\n CometChatConversationListItem,\n localize,\n CometChatTheme,\n ReceiverTypeConstants,\n MessageCategoryConstants,\n ConversationTypeConstants,\n CometChatBackdrop,\n CometChatConfirmDialog,\n ConversationListItemConfiguration,\n ConversationOptionConstants,\n ConversationListItemStyles,\n} from \"../../Shared\";\nimport { CometChatConversationEvents } from \"../\";\nimport {\n ConversationListStyles,\n CometChatConversationOptions,\n} from \"../../Chats\";\nimport { ConversationListCustomView } from \"../ConversationListCustomView\";\nimport deleteIcon from \"./resources/delete.svg\";\n\n/**\n *\n * @version 1.0.0\n * @author CometChatTeam\n * @description CometChatConversationList component retrieves the latest conversations that a CometChat logged-in user has been a part of.\n * The state of the component is communicated via 3 states i.e empty, loading and error.\n *\n */\nconst ConversationList = React.forwardRef((props, ref) => {\n /**\n  * Props destructuring\n  */\n const {\n  activeConversation,\n  emptyText,\n  errorText,\n  conversationType,\n  limit,\n  hideError,\n  tags,\n  userAndGroupTags,\n  loadingIconURL,\n  style,\n  enableSoundForMessages,\n  customIncomingMessageSound,\n  customView,\n  conversationListItemConfiguration,\n  theme,\n } = props;\n\n /**\n  * Component internal state\n  */\n const loggedInUser = useRef(null);\n const conversationListManager = useRef(\n  new ConversationListManager({\n   conversationType: conversationType,\n   limit: limit,\n   tags: tags,\n   userAndGroupTags: userAndGroupTags,\n  })\n );\n const [conversationList, setConversationList] = useState([]);\n const [message, setMessage] = useState(localize(\"LOADING\"));\n const [showConfirm, setShowConfirm] = useState({\n  show: false,\n  message: localize(\"CONFIRM_DELETE_CONVERSATION\"),\n  confirmButtonText: localize(\"DELETE\"),\n  conversation: null,\n  onCancel: () => {},\n });\n  const activeConversationRef = React.useRef(null);\n  const callbackDataRef = React.useRef(null);\n  \n /**\n  * Component private scoping\n  */\n const _conversationListItemConfiguration =\n  new ConversationListItemConfiguration(\n   conversationListItemConfiguration ?? {}\n  );\n  const _theme = new CometChatTheme(theme ?? {});\n  activeConversationRef.current = activeConversation;\n\n /**\n  * Component internal handlers/methods\n  */\n\n const conversationCallback = (listenerName, ...args) => {\n   callbackDataRef.current = { name: listenerName, args: [...args] };\n   try {\n    const handler = handlers[callbackDataRef.current?.name];\n\n    if (handler) return handler(...callbackDataRef.current?.args);\n  } catch (e) {\n    throw e;\n  }\n };\n\n /**\n  * Mark the incoming message as delivered\n  */\n const markMessageAsDelivered = (message) => {\n  if (message.hasOwnProperty(\"deliveredAt\") === false) {\n   CometChat.markAsDelivered(message);\n  }\n };\n\n /**\n  *\n  * If the incoming message is 1-1 conversation, and the conversation type filter is set to groups return false\n  * If the incoming message is group conversation, and the conversation type filter is set to users return false\n  * else return true\n  *\n  */\n React.useImperativeHandle(ref, () => ({\n  resetUnreadCount: resetUnreadCount,\n  updateLastMessage: updateLastMessage,\n  removeConversation: removeConversation,\n  deleteConversation: deleteConversation,\n  updateConversation: updateConversation,\n }));\n\n const filterByConversationType = (message) => {\n  if (conversationType !== ConversationTypeConstants.both) {\n   if (\n    (conversationType === ConversationTypeConstants.users &&\n     message?.receiverType === ReceiverTypeConstants.group) ||\n    (conversationType === ConversationTypeConstants.groups &&\n     message?.receiverType === ReceiverTypeConstants.user)\n   ) {\n    return false;\n   }\n  }\n  return true;\n };\n\n /**\n  *\n  * Converting message object received in the listener callback to conversation object\n  */\n const getConversationFromMessage = (message) => {\n  return new Promise((resolve, reject) => {\n   CometChat.CometChatHelper.getConversationFromMessage(message)\n    .then((conversation) => {\n     let conversationKey = conversationList.findIndex(\n      (c) => c.conversationId === conversation.conversationId\n     );\n     if (conversationKey > -1) {\n      resolve({\n       conversationKey: conversationKey,\n       conversationId: conversation.conversationId,\n       conversationType: conversation.conversationType,\n       conversationWith: conversation.conversationWith,\n       conversation: conversationList[conversationKey],\n       conversations: [...conversationList],\n      });\n     }\n\n     resolve({\n      conversationKey: conversationKey,\n      conversationId: conversation.conversationId,\n      conversationType: conversation.conversationType,\n      conversationWith: conversation.conversationWith,\n      conversation: conversation,\n      conversations: [...conversationList],\n     });\n    })\n    .catch((error) => {\n     CometChatConversationEvents.emit(\n      CometChatConversationEvents.onError,\n      error\n     );\n     reject(error);\n    });\n  });\n };\n\n const getUnreadMessageCount = (message, conversation = {}, activeConversation = null) => {\n  let unreadMessageCount = conversation?.unreadMessageCount\n   ? Number(conversation?.unreadMessageCount)\n   : 0;\n\n  unreadMessageCount = shouldIncrementCount(message)\n   ? ++unreadMessageCount\n   : unreadMessageCount;\n\n   console.log(\"activeConversation\", activeConversationRef, \"conversation\", conversation);\n\n   unreadMessageCount = (activeConversationRef.current?.conversationId === conversation?.conversationId) ? 0 : unreadMessageCount; \n    console.log(\"unreadMessageCount\", unreadMessageCount);\n    \n  return unreadMessageCount;\n };\n\n /**\n  *\n  * If the message is sent by the logged in user, return false\n  * If the message has category message or has incrementUnreadCount key in the metadata with value set to true, return true else return false\n  *\n  */\n const shouldIncrementCount = (message) => {\n  if (message?.sender?.uid === loggedInUser?.current?.uid) {\n   return false;\n  }\n\n  if (\n   message?.category === MessageCategoryConstants.message ||\n   message?.metadata?.incrementUnreadCount === true\n  ) {\n   return true;\n  }\n  return false;\n };\n\n /**\n  * play notification sound for incoming messages\n  */\n const playNotificationSound = (message) => {\n  /**\n   * If unreadcount is not incremented, don't play notification sound\n   */\n  if (!shouldIncrementCount(message)) {\n   return false;\n  }\n  /**\n        * If customIncomingMessageSound url is present then CometChatSoundManager will play this sound\n        else play the default sound\n        */\n  if (\n   enableSoundForMessages &&\n   activeConversation?.conversationType &&\n   activeConversation?.conversationWith\n  ) {\n   const receiverType = message.getReceiverType();\n   const receiverId =\n    receiverType === ReceiverTypeConstants.user\n     ? message?.getSender()?.getUid()\n     : message?.getReceiverId();\n\n   if (\n    receiverId !== activeConversation?.conversationWith?.uid &&\n    receiverId !== activeConversation?.conversationWith?.guid\n   ) {\n    if (customIncomingMessageSound) {\n     CometChatSoundManager.play(customIncomingMessageSound);\n    } else {\n     CometChatSoundManager.play(\n      CometChatSoundManager.Sound.incomingMessageFromOther\n     );\n    }\n   }\n  }\n };\n\n /**\n  *\n  * When a user goes online/ offline\n  */\n const handleUsers = (user) => {\n  const conversationKey = conversationList.findIndex(\n   (eachConversation) =>\n    eachConversation.conversationType &&\n    eachConversation.conversationType === ReceiverTypeConstants.user &&\n    eachConversation.conversationWith &&\n    eachConversation.conversationWith.uid &&\n    eachConversation.conversationWith.uid === user.uid\n  );\n\n  if (conversationKey > -1) {\n   let conversations = [...conversationList];\n   let conversation = conversations[conversationKey];\n   let conversationWith = {\n    ...conversation.conversationWith,\n    status: user.getStatus(),\n   };\n\n   let newConversation = {\n    ...conversation,\n    conversationWith: conversationWith,\n   };\n   conversations.splice(conversationKey, 1, newConversation);\n   setConversationList(conversations);\n  }\n };\n\n /**\n  *\n  * When a text message / media message / custom message is received\n  */\n const handleMessages = (...options) => {\n   const message = options[0];\n  /**\n   * marking the incoming messages as read\n   */\n  markMessageAsDelivered(message);\n  /**\n   * If the incoming message is 1-1 and the conversation type filter is set to group, return false\n   * OR\n   * If the incoming message is group and the conversation type filter is set to \"users\", return false\n   * ELSE\n   * return true\n   */\n   if (filterByConversationType() === false) {\n     return false;\n   }\n   CometChat.CometChatHelper.getConversationFromMessage(message)\n     .then((conversation) => {\n \n       setConversationList(prevConversationList => { \n         const list = [...prevConversationList];\n \n         let conversationKey = prevConversationList.findIndex(c => c.conversationId === conversation.conversationId);\n         \n        //  const lastMessage = { ...conversation?.lastMessage, ...message, data: {...message.data} };\n \n         if (conversationKey > -1) {\n \n           const latestConversation = prevConversationList[conversationKey];\n \n           const lastMessage = { ...latestConversation?.lastMessage, ...message, data: {...message.data} };\n           const unreadMessageCount = getUnreadMessageCount(message, latestConversation);\n \n           const newConversation = {\n             ...latestConversation, \n             conversationId: latestConversation.conversationId,\n             conversationType: latestConversation.conversationType,\n             conversationWith: {...latestConversation.conversationWith},\n             unreadMessageCount:unreadMessageCount,\n             lastMessage: {...lastMessage}\n           };\n \n           //play notification sound\n           playNotificationSound(message);\n \n           list.splice(conversationKey, 1);\n           list.unshift(newConversation);\n \n           return [...list];\n \n         } else {\n \n           const lastMessage = { ...conversation?.lastMessage, ...message, data: {...message.data} };\n           const unreadMessageCount = getUnreadMessageCount(message, conversation);\n \n           const newConversation = new CometChat.Conversation(\n             conversation.conversationId,\n             conversation.conversationType,\n             lastMessage,\n             conversation.conversationWith,\n             unreadMessageCount\n           );\n \n           list.unshift(newConversation);\n             \n           return [...list];\n         }\n \n       });\n     \n     })\n     .catch((error) => CometChatConversationEvents.emit(CometChatConversationEvents.onError, error));\n };\n\n /**\n  * Listener callback when a message is edited, deleted or updated\n  */\n const handleMessageActions = (...options) => {\n  const message = options[0];\n\n  getConversationFromMessage(message).then((response) => {\n   const {\n    conversationKey,\n    conversationId,\n    conversationType,\n    conversationWith,\n    conversation,\n    conversations,\n   } = response;\n\n   if (conversationKey > -1 && conversation.lastMessage.id === message.id) {\n    const lastMessage = { ...conversation.lastMessage, ...message };\n    const unreadMessageCount = getUnreadMessageCount(message, conversation);\n\n    const newConversation = new CometChat.Conversation(\n     conversationId,\n     conversationType,\n     lastMessage,\n     conversationWith,\n     unreadMessageCount\n    );\n    conversations.splice(conversationKey, 1, newConversation);\n    setConversationList([...conversations]);\n   }\n  });\n };\n\n /**\n  *\n  * Listener callback when a message is read\n  */\n const handleMessageReadActions = (...options) => {\n  const messageReceipt = options[0];\n\n  let conversationKey = conversationList.findIndex(\n   (conversation) =>\n    messageReceipt?.receiverType === conversation?.conversationType &&\n    (messageReceipt?.receiver === conversation?.conversationWith?.uid ||\n     messageReceipt?.receiver === conversation?.conversationWith?.guid)\n  );\n\n  if (conversationKey > -1) {\n   const conversations = { ...conversationList };\n   const conversation = conversations[conversationKey];\n   let unreadMessageCount = getUnreadMessageCount(message, conversation);\n\n   /**\n    * If the message id in the read receipt is greater than or equal to the lastmessage id, set unreadmessagecount to 0\n    */\n   if (messageReceipt?.messageId >= conversation?.lastMessage?.id) {\n    unreadMessageCount = 0;\n   }\n\n   const newConversation = new CometChat.Conversation(\n    conversation.conversationId,\n    conversation.conversationType,\n    conversation.lastMessage,\n    conversation.conversationWith,\n    unreadMessageCount\n   );\n\n   conversations.splice(conversationKey, 1, newConversation);\n   setConversationList(conversations);\n  }\n };\n\n /**\n  *\n  * Listener callback when a user joins/added to the group\n  */\n const handleGroupMemberAddition = (...options) => {\n  const message = options[0];\n  const newUser = options[1];\n  const group = options[3];\n\n  getConversationFromMessage(message).then((response) => {\n   const {\n    conversationKey,\n    conversationId,\n    conversationType,\n    conversationWith,\n    conversation,\n    conversations,\n   } = response;\n\n   if (conversationKey > -1) {\n    const lastMessage = { ...conversation.lastMessage, ...message };\n    const newConversationWith = { ...conversationWith, ...group };\n    const unreadMessageCount = getUnreadMessageCount(message, conversation);\n\n    const newConversation = new CometChat.Conversation(\n     conversationId,\n     conversationType,\n     lastMessage,\n     newConversationWith,\n     unreadMessageCount\n    );\n    conversations.splice(conversationKey, 1, newConversation);\n    setConversationList(conversations);\n   } else if (loggedInUser?.current?.uid === newUser.uid) {\n    /**\n     * If the loggedin user is added to the group, add the conversation to the chats list\n     */\n    const lastMessage = { ...message };\n    const newConversationWith = {\n     ...conversationWith,\n     ...group,\n     hasJoined: true,\n    };\n    const unreadMessageCount = getUnreadMessageCount(message, conversation);\n\n    const newConversation = new CometChat.Conversation(\n     conversationId,\n     conversationType,\n     lastMessage,\n     newConversationWith,\n     unreadMessageCount\n    );\n\n    conversations.unshift(newConversation);\n    setConversationList(conversations);\n   }\n  });\n };\n\n /**\n  *\n  * Listener callback when a member is kicked from / has left the group\n  */\n const handleGroupMemberRemoval = (...options) => {\n  const message = options[0];\n  const removedUser = options[1];\n  const group = options[3];\n\n  getConversationFromMessage(message).then((response) => {\n   const {\n    conversationKey,\n    conversationId,\n    conversationType,\n    conversationWith,\n    conversation,\n    conversations,\n   } = response;\n\n   if (conversationKey > -1) {\n    /**\n     * If the loggedin user is removed from the group, remove the conversation from the chats list\n     */\n    if (loggedInUser?.current?.uid === removedUser.uid) {\n     conversations.splice(conversationKey, 1);\n     setConversationList(conversations);\n    } else {\n     const lastMessage = { ...conversation.lastMessage, ...message };\n     const newConversationWith = { ...conversationWith, ...group };\n     const unreadMessageCount = getUnreadMessageCount(\n      message,\n      conversation\n     );\n\n     const newConversation = new CometChat.Conversation(\n      conversationId,\n      conversationType,\n      lastMessage,\n      newConversationWith,\n      unreadMessageCount\n     );\n\n     conversations.splice(conversationKey, 1, newConversation);\n     setConversationList(conversations);\n    }\n   }\n  });\n };\n\n /**\n  *\n  * Listener callback when a member is banned from the group\n  */\n const handleGroupMemberBan = (...options) => {\n  const message = options[0];\n  const removedUser = options[1];\n  const group = options[3];\n\n  getConversationFromMessage(message).then((response) => {\n   const {\n    conversationKey,\n    conversationId,\n    conversationType,\n    conversationWith,\n    conversation,\n    conversations,\n   } = response;\n\n   if (conversationKey > -1) {\n    /**\n     * If the loggedin user is banned from the group, remove the conversation from the chats list\n     */\n    if (loggedInUser?.current?.uid === removedUser.uid) {\n     conversations.splice(conversationKey, 1);\n     setConversationList(conversations);\n    } else {\n     const lastMessage = { ...conversation.lastMessage, ...message };\n     const newConversationWith = { ...conversationWith, ...group };\n     const unreadMessageCount = getUnreadMessageCount(\n      message,\n      conversation\n     );\n\n     const newConversation = new CometChat.Conversation(\n      conversationId,\n      conversationType,\n      lastMessage,\n      newConversationWith,\n      unreadMessageCount\n     );\n\n     conversations.splice(conversationKey, 1, newConversation);\n     setConversationList(conversations);\n    }\n   }\n  });\n };\n\n /**\n  *\n  * Listener callback when a group member scope is updated\n  */\n const handleGroupMemberScopeChange = (...options) => {\n  const message = options[0];\n  const user = options[1];\n  const newScope = options[2];\n  const group = options[4];\n\n  getConversationFromMessage(message).then((response) => {\n   const {\n    conversationKey,\n    conversationId,\n    conversationType,\n    conversationWith,\n    conversation,\n    conversations,\n   } = response;\n\n   if (conversationKey > -1) {\n    const lastMessage = { ...conversation.lastMessage, ...message };\n    const unreadMessageCount = getUnreadMessageCount(message, conversation);\n\n    if (loggedInUser?.current?.uid === user.uid) {\n     const newConversationWith = {\n      ...conversationWith,\n      ...group,\n      scope: newScope,\n     };\n\n     const newConversation = new CometChat.Conversation(\n      conversationId,\n      conversationType,\n      lastMessage,\n      newConversationWith,\n      unreadMessageCount\n     );\n\n     conversations.splice(conversationKey, 1);\n     conversations.unshift(newConversation);\n     setConversationList(conversations);\n    } else {\n     let newConversationWith = { ...conversationWith, ...group };\n\n     const newConversation = new CometChat.Conversation(\n      conversationId,\n      conversationType,\n      lastMessage,\n      newConversationWith,\n      unreadMessageCount\n     );\n\n     conversations.splice(conversationKey, 1, newConversation);\n     setConversationList(conversations);\n    }\n   }\n  });\n };\n\n /**\n  *\n  * Listener callback for typing events\n  */\n const handleTyping = (...options) => {\n  const typingData = options[0];\n  const typingStarted = options[1];\n  const conversations = [...conversationList];\n\n  let conversationKey = conversations.findIndex(\n   (conversation) =>\n    conversation?.conversationType === typingData?.receiverType &&\n    ((conversation?.conversationType === ReceiverTypeConstants.user &&\n     conversation.conversationWith?.uid === typingData?.sender?.uid) ||\n     (conversation.conversationType === ReceiverTypeConstants.group &&\n      conversation.conversationWith?.guid === typingData?.receiverId))\n  );\n\n  if (conversationKey > -1) {\n   let typingIndicatorText = \"\";\n   if (typingStarted) {\n    typingIndicatorText =\n     typingData?.receiverType === ReceiverTypeConstants.group\n      ? `${typingData?.sender?.name} ${localize(\"IS_TYPING\")}`\n      : localize(\"IS_TYPING\");\n   }\n\n   const conversation = conversationList[conversationKey];\n   const newConversation = {\n    ...conversation,\n    showTypingIndicator: typingStarted,\n    typingIndicatorText,\n   };\n\n   conversations.splice(conversationKey, 1, newConversation);\n   setConversationList(conversations);\n  }\n };\n\n /**\n  *\n  * @param {Object} conversation\n  * Public method to update the conversation list programmatically\n  */\n const updateConversation = (conversation) => {\n  const conversationKey = conversationList.findIndex(\n   (eachConversation) =>\n    eachConversation.conversationWith &&\n    eachConversation.conversationWith.uid &&\n    eachConversation.conversationWith.uid ===\n     conversation?.conversationWith?.uid\n  );\n\n  if (conversationKey > -1) {\n   let conversations = [...conversationList];\n   let conversation = conversations[conversationKey];\n   let conversationWith = {\n    ...conversation.conversationWith,\n   };\n\n   let newConversation = {\n    ...conversation,\n    conversationWith: conversationWith,\n   };\n   conversations.splice(conversationKey, 1, newConversation);\n   setConversationList(conversations);\n  }\n };\n\n const handlers = {\n  onUserOnline: handleUsers,\n  onUserOffline: handleUsers,\n  onTextMessageReceived: handleMessages,\n  onMediaMessageReceived: handleMessages,\n  onCustomMessageReceived: handleMessages,\n  onIncomingCallReceived: handleMessages,\n  onIncomingCallCancelled: handleMessages,\n  messageEdited: handleMessageActions,\n  onMessageDeleted: handleMessageActions,\n  messageRead: handleMessageReadActions,\n  onMemberAddedToGroup: handleGroupMemberAddition,\n  onGroupMemberJoined: handleGroupMemberAddition,\n  onGroupMemberKicked: handleGroupMemberRemoval,\n  onGroupMemberLeft: handleGroupMemberRemoval,\n  onGroupMemberBanned: handleGroupMemberBan,\n  onGroupMemberScopeChanged: handleGroupMemberScopeChange,\n  onTypingStarted: handleTyping,\n  onTypingEnded: handleTyping,\n };\n\n const handleConversations = () => {\n  getConversations()\n   .then((conversations) => {\n    if (conversationList.length === 0 && conversations.length === 0) {\n     setMessage(\"NO_CHATS_FOUND\");\n    } else {\n     setMessage(\"\");\n    }\n\n    setConversationList((conversationList) => {\n     return [...conversationList, ...conversations];\n    });\n   })\n   .catch((error) => {\n    CometChatConversationEvents.emit(\n     CometChatConversationEvents.onError,\n     error\n    );\n    setMessage(\"SOMETHING_WENT_WRONG\");\n   });\n };\n\n const getConversations = () => {\n  return new Promise((resolve, reject) => {\n   conversationListManager?.current\n    .fetchNextConversation()\n    .then((conversations) => resolve(conversations))\n    .catch((error) => {\n     CometChatConversationEvents.emit(\n      CometChatConversationEvents.onError,\n      error\n     );\n     reject(error);\n    });\n  });\n };\n\n const handleScroll = (event) => {\n  const bottom =\n   Math.round(\n    event.currentTarget.scrollHeight - event.currentTarget.scrollTop\n   ) === Math.round(event.currentTarget.clientHeight);\n  if (bottom) {\n   handleConversations();\n  }\n };\n\n /**\n  * reset un read count\n  */\n const resetUnreadCount = (conversation) => {\n  const conversations = [...conversationList];\n  const conversationKey = conversations.findIndex(\n   (conversationObject) =>\n    conversationObject.conversationId === conversation.conversationId\n  );\n  if (conversationKey > -1) {\n   let conversation = conversations[conversationKey];\n   let newConversation = {\n    ...conversation,\n    unreadMessageCount: 0,\n   };\n   conversations.splice(conversationKey, 1, newConversation);\n   setConversationList(conversations);\n  }\n };\n\n /**\n  * update last message\n  */\n const updateLastMessage = (message) => {\n  getConversationFromMessage(message).then((response) => {\n   const { conversationKey, conversations, conversation } = response;\n   if (conversationKey > -1) {\n    let newConversation = {\n     ...conversation,\n     lastMessage: message,\n    };\n    conversations.splice(conversationKey, 1, newConversation);\n    setConversationList([...conversations]);\n   }\n  });\n \n };\n\n /**\n  * Remove conversation from the conversationlist upon delete\n  */\n const removeConversation = (conversation) => {\n  const conversationKey = conversationList.findIndex(\n   (c) => c.conversationId === conversation.conversationId\n  );\n\n  if (conversationKey > -1) {\n   const newConversationList = [...conversationList];\n   newConversationList.splice(conversationKey, 1);\n   setConversationList(newConversationList);\n  }\n };\n\n const deleteConversation = (conversationToBeDeleted) => {\n  return new Promise((resolve, reject) => {\n   const conversationWith =\n    conversationToBeDeleted?.conversationType ===\n    ReceiverTypeConstants.group\n     ? conversationToBeDeleted?.conversationWith?.guid\n     : conversationToBeDeleted?.conversationWith?.uid;\n\n   CometChat.deleteConversation(\n    conversationWith,\n    conversationToBeDeleted?.conversationType\n   )\n    .then((deletedConversation) => {\n     setShowConfirm({\n      ...showConfirm,\n      show: false,\n     });\n     removeConversation(conversationToBeDeleted);\n     resolve(deletedConversation);\n     CometChatConversationEvents.emit(\n      CometChatConversationEvents.onDeleteConversation,\n      conversationToBeDeleted\n     );\n    })\n\n    .catch((error) => {\n     CometChatConversationEvents.emit(\n      CometChatConversationEvents.onError,\n      conversationToBeDeleted\n     );\n     reject(error);\n    });\n  });\n };\n\n const cancelDelete = () =>\n  setShowConfirm({\n   ...showConfirm,\n   show: false,\n  });\n\n const confirmDelete = (conversation) => {\n  setShowConfirm({\n   ...showConfirm,\n   show: true,\n   conversation: conversation,\n   onCancel: cancelDelete,\n  });\n };\n\n const itemClickhandler = (e) => {\n  CometChatConversationEvents.emit(\n   CometChatConversationEvents.onItemClick,\n   e\n  );\n };\n\n /**\n  * Component hooks\n  */\n\n  Hooks(\n    conversationType,\n    limit,\n    tags,\n    userAndGroupTags,\n    setConversationList,\n    conversationCallback,\n    conversationListManager,\n    loggedInUser,\n    handleConversations,\n );\n\n /**\n  * Component template scoping\n  */\n\n const getCustomView = (customView, props) => {\n  return React.createElement(customView, props);\n };\n\n const getMessageContainer = () => {\n  let messageContainer = null;\n  if (\n   conversationList.length === 0 &&\n   message.toLowerCase() === localize(\"LOADING\")\n  ) {\n   /**Loading custom view */\n   messageContainer = (\n    <div\n     style={styles.messageContainerStyle(style)}\n     className='chats__message'\n    >\n     {customView.loading ? (\n      getCustomView(customView.loading, props)\n     ) : (\n      <div\n       style={styles.messageImgStyle(style, _theme, loadingIconURL)}\n       className='message'\n      ></div>\n     )}\n    </div>\n   );\n  } else if (\n   conversationList.length === 0 &&\n   message.toLowerCase() === \"no chats found\"\n  ) {\n   /**Empty custom view */\n   messageContainer = (\n    <div\n     style={styles.messageContainerStyle(style)}\n     className='chats__message'\n    >\n     {customView.empty ? (\n      getCustomView(customView.empty, props)\n     ) : (\n      <div\n       style={styles.messageTextStyle(style, _theme, message)}\n       className='message'\n      >\n       {emptyText}\n      </div>\n     )}\n    </div>\n   );\n  } else if (!hideError && message.toLowerCase() === \"something went wrong\") {\n   /**Error custom view */\n   messageContainer = (\n    <div\n     style={styles.messageContainerStyle(style)}\n     className='chats__message'\n    >\n     {customView.error ? (\n      getCustomView(customView.error, props)\n     ) : (\n      <div\n       style={styles.messageTextStyle(style, _theme, message)}\n       className='message'\n      >\n       {errorText}\n      </div>\n     )}\n    </div>\n   );\n  }\n  return messageContainer;\n };\n const renderItems = conversationList.map((conversation) => {\n  const typingIndicatorText = conversation?.typingIndicatorText\n   ? conversation?.typingIndicatorText\n   : \"\";\n   let isActive = \n   conversation?.conversationId === activeConversation?.conversationId\n    ? true\n    : false;\n\n  /**\n   * Calculate conversations options for child component\n   */\n  let conversationOptions =\n   _conversationListItemConfiguration?.conversationOptions;\n  if (conversationOptions?.length == 0) {\n   conversationOptions = [\n    new CometChatConversationOptions({\n     id: ConversationOptionConstants.delete,\n     title: localize(\"DELETE\"),\n     iconURL: deleteIcon,\n     onClick: () => confirmDelete(conversation),\n    }),\n   ];\n  }\n\n  return (\n   <CometChatConversationListItem\n    key={conversation.conversationId}\n    conversationObject={conversation}\n    isActive={isActive}\n    conversationInputData={\n     _conversationListItemConfiguration?.conversationInputData\n    }\n    conversationOptions={conversationOptions}\n    style={\n     new ConversationListItemStyles({\n      ...styles.listItemStyle(style, _theme),\n     })\n    }\n    hideDeletedMessages={\n     _conversationListItemConfiguration?.hideDeletedMessages\n    }\n    hideGroupActions={_conversationListItemConfiguration?.hideGroupActions}\n    showTypingIndicator={\n     _conversationListItemConfiguration?.showTypingIndicator\n    }\n    typingIndicatorText={typingIndicatorText}\n    hideThreadIndicator={\n     _conversationListItemConfiguration?.hideThreadIndicator\n    }\n    threadIndicatorText={localize(\"IN_A_THREAD\")}\n    theme={_theme}\n    onClick={itemClickhandler.bind(this)}\n    avatarConfiguration={\n     _conversationListItemConfiguration?.avatarConfiguration\n    }\n    statusIndicatorConfiguration={\n     _conversationListItemConfiguration?.statusIndicatorConfiguration\n    }\n    badgeCountConfiguration={\n     _conversationListItemConfiguration?.badgeCountConfiguration\n    }\n    messageReceiptConfiguration={\n     _conversationListItemConfiguration?.messageReceiptConfiguration\n    }\n    loggedInUser={loggedInUser?.current}\n   />\n  );\n });\n\n /**\n  * Component template\n  */\n return (\n  <React.Fragment>\n   {getMessageContainer()}\n   <div\n    style={styles.chatsListStyle(style, _theme)}\n    className='conversation__list'\n    onScroll={handleScroll}\n   >\n    {renderItems}\n   </div>\n   <CometChatBackdrop\n    isOpen={showConfirm.show}\n    onClick={showConfirm.onCancel}\n    background={_theme?.palette?.accent200[_theme?.palette?.mode]}\n   >\n    <CometChatConfirmDialog\n     isOpen={showConfirm.show}\n     onConfirm={deleteConversation.bind(this, showConfirm.conversation)}\n     onCancel={showConfirm.onCancel}\n     style={styles.DialogStyle(_theme)}\n     title={localize(\"DELETE_CONVERSATION\")}\n     messageText={localize(\"CONFIRM_DELETE_CONVERSATION\")}\n     confirmButtonText={localize(\"CONFIRM_BUTTON_TEXT\")}\n     cancelButtonText={localize(\"CANCEL_BUTTON_TEXT\")}\n    />\n   </CometChatBackdrop>\n  </React.Fragment>\n );\n});\n\n/**\n * Component default props\n */\nConversationList.defaultProps = {\n loadingIconURL: loadingIcon,\n};\n\n/**\n * Component default props types\n */\nConversationList.propTypes = {\n conversationType: PropTypes.oneOf([\"users\", \"groups\", \"both\"]),\n limit: PropTypes.number,\n hideError: PropTypes.bool,\n tags: PropTypes.array,\n userAndGroupTags: PropTypes.bool,\n emptyText: PropTypes.string,\n errorText: PropTypes.string,\n loadingIconURL: PropTypes.string,\n style: PropTypes.object,\n activeConversation: PropTypes.object,\n enableSoundForMessages: PropTypes.bool,\n customIncomingMessageSound: PropTypes.string,\n customView: PropTypes.object,\n conversationListItemConfiguration: PropTypes.object,\n theme: PropTypes.object,\n};\n\nexport const CometChatConversationList = React.memo(ConversationList);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
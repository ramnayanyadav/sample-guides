{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CometChatConversationList = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _chat = require(\"@cometchat-pro/chat\");\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _controller = require(\"./controller\");\nvar _hooks = require(\"./hooks\");\nvar styles = _interopRequireWildcard(require(\"./style\"));\nvar _spinner = _interopRequireDefault(require(\"./resources/spinner.svg\"));\nvar _Shared = require(\"../../Shared\");\nvar _ = require(\"../\");\nvar _Chats = require(\"../../Chats\");\nvar _ConversationListCustomView = require(\"../ConversationListCustomView\");\nvar _delete = _interopRequireDefault(require(\"./resources/delete.svg\"));\nvar _this = void 0;\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n/**\n *\n * @version 1.0.0\n * @author CometChatTeam\n * @description CometChatConversationList component retrieves the latest conversations that a CometChat logged-in user has been a part of.\n * The state of the component is communicated via 3 states i.e empty, loading and error.\n *\n */\nvar ConversationList = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {\n  var _theme$palette, _theme$palette2;\n  /**\n   * Props destructuring\n   */\n  var activeConversation = props.activeConversation,\n    emptyText = props.emptyText,\n    errorText = props.errorText,\n    conversationType = props.conversationType,\n    limit = props.limit,\n    hideError = props.hideError,\n    tags = props.tags,\n    userAndGroupTags = props.userAndGroupTags,\n    loadingIconURL = props.loadingIconURL,\n    style = props.style,\n    enableSoundForMessages = props.enableSoundForMessages,\n    customIncomingMessageSound = props.customIncomingMessageSound,\n    customView = props.customView,\n    conversationListItemConfiguration = props.conversationListItemConfiguration,\n    theme = props.theme;\n\n  /**\n   * Component internal state\n   */\n  var loggedInUser = (0, _react.useRef)(null);\n  var conversationListManager = (0, _react.useRef)(new _controller.ConversationListManager({\n    conversationType: conversationType,\n    limit: limit,\n    tags: tags,\n    userAndGroupTags: userAndGroupTags\n  }));\n  var _useState = (0, _react.useState)([]),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    conversationList = _useState2[0],\n    setConversationList = _useState2[1];\n  var _useState3 = (0, _react.useState)(null),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    callbackData = _useState4[0],\n    setCallbackData = _useState4[1];\n  var _useState5 = (0, _react.useState)((0, _Shared.localize)(\"LOADING\")),\n    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n    message = _useState6[0],\n    setMessage = _useState6[1];\n  var _useState7 = (0, _react.useState)({\n      show: false,\n      message: (0, _Shared.localize)(\"CONFIRM_DELETE_CONVERSATION\"),\n      confirmButtonText: (0, _Shared.localize)(\"DELETE\"),\n      conversation: null,\n      onCancel: function onCancel() {}\n    }),\n    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n    showConfirm = _useState8[0],\n    setShowConfirm = _useState8[1];\n\n  //console.log(\"conversationList\", conversationList);\n  /**\n   * Component private scoping\n   */\n  var _conversationListItemConfiguration = new _Shared.ConversationListItemConfiguration(conversationListItemConfiguration !== null && conversationListItemConfiguration !== void 0 ? conversationListItemConfiguration : {});\n  var _theme = new _Shared.CometChatTheme(theme !== null && theme !== void 0 ? theme : {});\n\n  /**\n   * Component internal handlers/methods\n   */\n\n  var conversationCallback = function conversationCallback(listenerName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    setCallbackData({\n      name: listenerName,\n      args: [].concat(args)\n    });\n  };\n\n  /**\n   * Mark the incoming message as delivered\n   */\n  var markMessageAsDelivered = function markMessageAsDelivered(message) {\n    if (message.hasOwnProperty(\"deliveredAt\") === false) {\n      _chat.CometChat.markAsDelivered(message);\n    }\n  };\n\n  /**\n   *\n   * If the incoming message is 1-1 conversation, and the conversation type filter is set to groups return false\n   * If the incoming message is group conversation, and the conversation type filter is set to users return false\n   * else return true\n   *\n   */\n  _react.default.useImperativeHandle(ref, function () {\n    return {\n      resetUnreadCount: resetUnreadCount,\n      updateLastMessage: updateLastMessage,\n      removeConversation: removeConversation,\n      deleteConversation: deleteConversation,\n      updateConversation: updateConversation\n    };\n  });\n  var filterByConversationType = function filterByConversationType(message) {\n    if (conversationType !== _Shared.ConversationTypeConstants.both) {\n      if (conversationType === _Shared.ConversationTypeConstants.users && (message === null || message === void 0 ? void 0 : message.receiverType) === _Shared.ReceiverTypeConstants.group || conversationType === _Shared.ConversationTypeConstants.groups && (message === null || message === void 0 ? void 0 : message.receiverType) === _Shared.ReceiverTypeConstants.user) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   *\n   * Converting message object received in the listener callback to conversation object\n   */\n  var getConversationFromMessage = function getConversationFromMessage(message) {\n    return new Promise(function (resolve, reject) {\n      _chat.CometChat.CometChatHelper.getConversationFromMessage(message).then(function (conversation) {\n        var conversationKey = conversationList.findIndex(function (c) {\n          return c.conversationId === conversation.conversationId;\n        });\n        if (conversationKey > -1) {\n          resolve({\n            conversationKey: conversationKey,\n            conversationId: conversation.conversationId,\n            conversationType: conversation.conversationType,\n            conversationWith: conversation.conversationWith,\n            conversation: conversationList[conversationKey],\n            conversations: (0, _toConsumableArray2.default)(conversationList)\n          });\n        }\n        resolve({\n          conversationKey: conversationKey,\n          conversationId: conversation.conversationId,\n          conversationType: conversation.conversationType,\n          conversationWith: conversation.conversationWith,\n          conversation: conversation,\n          conversations: (0, _toConsumableArray2.default)(conversationList)\n        });\n      }).catch(function (error) {\n        _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onError, error);\n        reject(error);\n      });\n    });\n  };\n  var getUnreadMessageCount = function getUnreadMessageCount(message) {\n    var conversation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var unreadMessageCount = conversation !== null && conversation !== void 0 && conversation.unreadMessageCount ? Number(conversation === null || conversation === void 0 ? void 0 : conversation.unreadMessageCount) : 0;\n    unreadMessageCount = shouldIncrementCount(message) ? ++unreadMessageCount : unreadMessageCount;\n    return unreadMessageCount;\n  };\n\n  /**\n   *\n   * If the message is sent by the logged in user, return false\n   * If the message has category message or has incrementUnreadCount key in the metadata with value set to true, return true else return false\n   *\n   */\n  var shouldIncrementCount = function shouldIncrementCount(message) {\n    var _message$sender, _loggedInUser$current, _message$metadata;\n    if ((message === null || message === void 0 ? void 0 : (_message$sender = message.sender) === null || _message$sender === void 0 ? void 0 : _message$sender.uid) === (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current = loggedInUser.current) === null || _loggedInUser$current === void 0 ? void 0 : _loggedInUser$current.uid)) {\n      return false;\n    }\n    if ((message === null || message === void 0 ? void 0 : message.category) === _Shared.MessageCategoryConstants.message || (message === null || message === void 0 ? void 0 : (_message$metadata = message.metadata) === null || _message$metadata === void 0 ? void 0 : _message$metadata.incrementUnreadCount) === true) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * play notification sound for incoming messages\n   */\n  var playNotificationSound = function playNotificationSound(message) {\n    /**\n     * If unreadcount is not incremented, don't play notification sound\n     */\n    if (!shouldIncrementCount(message)) {\n      return false;\n    }\n    /**\n          * If customIncomingMessageSound url is present then CometChatSoundManager will play this sound\n          else play the default sound\n          */\n    if (enableSoundForMessages && activeConversation !== null && activeConversation !== void 0 && activeConversation.conversationType && activeConversation !== null && activeConversation !== void 0 && activeConversation.conversationWith) {\n      var _message$getSender, _activeConversation$c, _activeConversation$c2;\n      var receiverType = message.getReceiverType();\n      var receiverId = receiverType === _Shared.ReceiverTypeConstants.user ? message === null || message === void 0 ? void 0 : (_message$getSender = message.getSender()) === null || _message$getSender === void 0 ? void 0 : _message$getSender.getUid() : message === null || message === void 0 ? void 0 : message.getReceiverId();\n      if (receiverId !== (activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$c = activeConversation.conversationWith) === null || _activeConversation$c === void 0 ? void 0 : _activeConversation$c.uid) && receiverId !== (activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$c2 = activeConversation.conversationWith) === null || _activeConversation$c2 === void 0 ? void 0 : _activeConversation$c2.guid)) {\n        if (customIncomingMessageSound) {\n          _Shared.CometChatSoundManager.play(customIncomingMessageSound);\n        } else {\n          _Shared.CometChatSoundManager.play(_Shared.CometChatSoundManager.Sound.incomingMessageFromOther);\n        }\n      }\n    }\n  };\n\n  /**\n   *\n   * When a user goes online/ offline\n   */\n  var handleUsers = function handleUsers(user) {\n    var conversationKey = conversationList.findIndex(function (eachConversation) {\n      return eachConversation.conversationType && eachConversation.conversationType === _Shared.ReceiverTypeConstants.user && eachConversation.conversationWith && eachConversation.conversationWith.uid && eachConversation.conversationWith.uid === user.uid;\n    });\n    if (conversationKey > -1) {\n      var conversations = (0, _toConsumableArray2.default)(conversationList);\n      var conversation = conversations[conversationKey];\n      var conversationWith = _objectSpread(_objectSpread({}, conversation.conversationWith), {}, {\n        status: user.getStatus()\n      });\n      var newConversation = _objectSpread(_objectSpread({}, conversation), {}, {\n        conversationWith: conversationWith\n      });\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   *\n   * When a text message / media message / custom message is received\n   */\n  var handleMessages = function handleMessages() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    console.log(\"handle_Messages\", arguments.length <= 0 ? undefined : arguments[0]);\n    /**\n     * marking the incoming messages as read\n     */\n    markMessageAsDelivered(message);\n    /**\n     * If the incoming message is 1-1 and the conversation type filter is set to group, return false\n     * OR\n     * If the incoming message is group and the conversation type filter is set to \"users\", return false\n     * ELSE\n     * return true\n     */\n    if (filterByConversationType() === false) {\n      return false;\n    }\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      var lastMessage = _objectSpread(_objectSpread({}, conversation === null || conversation === void 0 ? void 0 : conversation.lastMessage), message);\n      if (conversationKey > -1) {\n        var unreadMessageCount = getUnreadMessageCount(message, conversation);\n        var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, conversationWith, unreadMessageCount);\n        conversations.splice(conversationKey, 1);\n        conversations.unshift(newConversation);\n        setTimeout(function () {\n          setConversationList((0, _toConsumableArray2.default)(conversations));\n        });\n\n        //play notification sound\n        playNotificationSound(message);\n      } else {\n        var _unreadMessageCount = getUnreadMessageCount(message);\n        var _newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, conversationWith, _unreadMessageCount);\n        conversations.unshift(_newConversation);\n        setTimeout(function () {\n          setConversationList((0, _toConsumableArray2.default)(conversations));\n        });\n\n        //play notification sound\n        playNotificationSound(message);\n      }\n    });\n  };\n\n  /**\n   * Listener callback when a message is edited, deleted or updated\n   */\n  var handleMessageActions = function handleMessageActions() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      if (conversationKey > -1 && conversation.lastMessage.id === message.id) {\n        var lastMessage = _objectSpread(_objectSpread({}, conversation.lastMessage), message);\n        var unreadMessageCount = getUnreadMessageCount(message, conversation);\n        var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, conversationWith, unreadMessageCount);\n        conversations.splice(conversationKey, 1, newConversation);\n        setConversationList((0, _toConsumableArray2.default)(conversations));\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a message is read\n   */\n  var handleMessageReadActions = function handleMessageReadActions() {\n    var messageReceipt = arguments.length <= 0 ? undefined : arguments[0];\n    var conversationKey = conversationList.findIndex(function (conversation) {\n      var _conversation$convers, _conversation$convers2;\n      return (messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.receiverType) === (conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) && ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.receiver) === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers = conversation.conversationWith) === null || _conversation$convers === void 0 ? void 0 : _conversation$convers.uid) || (messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.receiver) === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers2 = conversation.conversationWith) === null || _conversation$convers2 === void 0 ? void 0 : _conversation$convers2.guid));\n    });\n    if (conversationKey > -1) {\n      var _conversation$lastMes;\n      var conversations = _objectSpread({}, conversationList);\n      var conversation = conversations[conversationKey];\n      var unreadMessageCount = getUnreadMessageCount(message, conversation);\n\n      /**\n       * If the message id in the read receipt is greater than or equal to the lastmessage id, set unreadmessagecount to 0\n       */\n      if ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.messageId) >= (conversation === null || conversation === void 0 ? void 0 : (_conversation$lastMes = conversation.lastMessage) === null || _conversation$lastMes === void 0 ? void 0 : _conversation$lastMes.id)) {\n        unreadMessageCount = 0;\n      }\n      var newConversation = new _chat.CometChat.Conversation(conversation.conversationId, conversation.conversationType, conversation.lastMessage, conversation.conversationWith, unreadMessageCount);\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   *\n   * Listener callback when a user joins/added to the group\n   */\n  var handleGroupMemberAddition = function handleGroupMemberAddition() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    var newUser = arguments.length <= 1 ? undefined : arguments[1];\n    var group = arguments.length <= 3 ? undefined : arguments[3];\n    getConversationFromMessage(message).then(function (response) {\n      var _loggedInUser$current2;\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      if (conversationKey > -1) {\n        var lastMessage = _objectSpread(_objectSpread({}, conversation.lastMessage), message);\n        var newConversationWith = _objectSpread(_objectSpread({}, conversationWith), group);\n        var unreadMessageCount = getUnreadMessageCount(message, conversation);\n        var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n        conversations.splice(conversationKey, 1, newConversation);\n        setConversationList(conversations);\n      } else if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current2 = loggedInUser.current) === null || _loggedInUser$current2 === void 0 ? void 0 : _loggedInUser$current2.uid) === newUser.uid) {\n        /**\n         * If the loggedin user is added to the group, add the conversation to the chats list\n         */\n        var _lastMessage = _objectSpread({}, message);\n        var _newConversationWith = _objectSpread(_objectSpread(_objectSpread({}, conversationWith), group), {}, {\n          hasJoined: true\n        });\n        var _unreadMessageCount2 = getUnreadMessageCount(message, conversation);\n        var _newConversation2 = new _chat.CometChat.Conversation(conversationId, conversationType, _lastMessage, _newConversationWith, _unreadMessageCount2);\n        conversations.unshift(_newConversation2);\n        setConversationList(conversations);\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a member is kicked from / has left the group\n   */\n  var handleGroupMemberRemoval = function handleGroupMemberRemoval() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    var removedUser = arguments.length <= 1 ? undefined : arguments[1];\n    var group = arguments.length <= 3 ? undefined : arguments[3];\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      if (conversationKey > -1) {\n        var _loggedInUser$current3;\n        /**\n         * If the loggedin user is removed from the group, remove the conversation from the chats list\n         */\n        if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current3 = loggedInUser.current) === null || _loggedInUser$current3 === void 0 ? void 0 : _loggedInUser$current3.uid) === removedUser.uid) {\n          conversations.splice(conversationKey, 1);\n          setConversationList(conversations);\n        } else {\n          var lastMessage = _objectSpread(_objectSpread({}, conversation.lastMessage), message);\n          var newConversationWith = _objectSpread(_objectSpread({}, conversationWith), group);\n          var unreadMessageCount = getUnreadMessageCount(message, conversation);\n          var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n          conversations.splice(conversationKey, 1, newConversation);\n          setConversationList(conversations);\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a member is banned from the group\n   */\n  var handleGroupMemberBan = function handleGroupMemberBan() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    var removedUser = arguments.length <= 1 ? undefined : arguments[1];\n    var group = arguments.length <= 3 ? undefined : arguments[3];\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      if (conversationKey > -1) {\n        var _loggedInUser$current4;\n        /**\n         * If the loggedin user is banned from the group, remove the conversation from the chats list\n         */\n        if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current4 = loggedInUser.current) === null || _loggedInUser$current4 === void 0 ? void 0 : _loggedInUser$current4.uid) === removedUser.uid) {\n          conversations.splice(conversationKey, 1);\n          setConversationList(conversations);\n        } else {\n          var lastMessage = _objectSpread(_objectSpread({}, conversation.lastMessage), message);\n          var newConversationWith = _objectSpread(_objectSpread({}, conversationWith), group);\n          var unreadMessageCount = getUnreadMessageCount(message, conversation);\n          var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n          conversations.splice(conversationKey, 1, newConversation);\n          setConversationList(conversations);\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a group member scope is updated\n   */\n  var handleGroupMemberScopeChange = function handleGroupMemberScopeChange() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    var user = arguments.length <= 1 ? undefined : arguments[1];\n    var newScope = arguments.length <= 2 ? undefined : arguments[2];\n    var group = arguments.length <= 4 ? undefined : arguments[4];\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      if (conversationKey > -1) {\n        var _loggedInUser$current5;\n        var lastMessage = _objectSpread(_objectSpread({}, conversation.lastMessage), message);\n        var unreadMessageCount = getUnreadMessageCount(message, conversation);\n        if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current5 = loggedInUser.current) === null || _loggedInUser$current5 === void 0 ? void 0 : _loggedInUser$current5.uid) === user.uid) {\n          var newConversationWith = _objectSpread(_objectSpread(_objectSpread({}, conversationWith), group), {}, {\n            scope: newScope\n          });\n          var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n          conversations.splice(conversationKey, 1);\n          conversations.unshift(newConversation);\n          setConversationList(conversations);\n        } else {\n          var _newConversationWith2 = _objectSpread(_objectSpread({}, conversationWith), group);\n          var _newConversation3 = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, _newConversationWith2, unreadMessageCount);\n          conversations.splice(conversationKey, 1, _newConversation3);\n          setConversationList(conversations);\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback for typing events\n   */\n  var handleTyping = function handleTyping() {\n    var typingData = arguments.length <= 0 ? undefined : arguments[0];\n    var typingStarted = arguments.length <= 1 ? undefined : arguments[1];\n    var conversations = (0, _toConsumableArray2.default)(conversationList);\n    var conversationKey = conversations.findIndex(function (conversation) {\n      var _conversation$convers3, _typingData$sender, _conversation$convers4;\n      return (conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === (typingData === null || typingData === void 0 ? void 0 : typingData.receiverType) && ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === _Shared.ReceiverTypeConstants.user && ((_conversation$convers3 = conversation.conversationWith) === null || _conversation$convers3 === void 0 ? void 0 : _conversation$convers3.uid) === (typingData === null || typingData === void 0 ? void 0 : (_typingData$sender = typingData.sender) === null || _typingData$sender === void 0 ? void 0 : _typingData$sender.uid) || conversation.conversationType === _Shared.ReceiverTypeConstants.group && ((_conversation$convers4 = conversation.conversationWith) === null || _conversation$convers4 === void 0 ? void 0 : _conversation$convers4.guid) === (typingData === null || typingData === void 0 ? void 0 : typingData.receiverId));\n    });\n    if (conversationKey > -1) {\n      var typingIndicatorText = \"\";\n      if (typingStarted) {\n        var _typingData$sender2;\n        typingIndicatorText = (typingData === null || typingData === void 0 ? void 0 : typingData.receiverType) === _Shared.ReceiverTypeConstants.group ? \"\".concat(typingData === null || typingData === void 0 ? void 0 : (_typingData$sender2 = typingData.sender) === null || _typingData$sender2 === void 0 ? void 0 : _typingData$sender2.name, \" \").concat((0, _Shared.localize)(\"IS_TYPING\")) : (0, _Shared.localize)(\"IS_TYPING\");\n      }\n      var conversation = conversationList[conversationKey];\n      var newConversation = _objectSpread(_objectSpread({}, conversation), {}, {\n        showTypingIndicator: typingStarted,\n        typingIndicatorText: typingIndicatorText\n      });\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   *\n   * @param {Object} conversation\n   * Public method to update the conversation list programmatically\n   */\n  var updateConversation = function updateConversation(conversation) {\n    var conversationKey = conversationList.findIndex(function (eachConversation) {\n      var _conversation$convers5;\n      return eachConversation.conversationWith && eachConversation.conversationWith.uid && eachConversation.conversationWith.uid === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers5 = conversation.conversationWith) === null || _conversation$convers5 === void 0 ? void 0 : _conversation$convers5.uid);\n    });\n    if (conversationKey > -1) {\n      var conversations = (0, _toConsumableArray2.default)(conversationList);\n      var _conversation = conversations[conversationKey];\n      var conversationWith = _objectSpread({}, _conversation.conversationWith);\n      var newConversation = _objectSpread(_objectSpread({}, _conversation), {}, {\n        conversationWith: conversationWith\n      });\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n  var handlers = {\n    onUserOnline: handleUsers,\n    onUserOffline: handleUsers,\n    onTextMessageReceived: handleMessages,\n    onMediaMessageReceived: handleMessages,\n    onCustomMessageReceived: handleMessages,\n    onIncomingCallReceived: handleMessages,\n    onIncomingCallCancelled: handleMessages,\n    messageEdited: handleMessageActions,\n    onMessageDeleted: handleMessageActions,\n    messageRead: handleMessageReadActions,\n    onMemberAddedToGroup: handleGroupMemberAddition,\n    onGroupMemberJoined: handleGroupMemberAddition,\n    onGroupMemberKicked: handleGroupMemberRemoval,\n    onGroupMemberLeft: handleGroupMemberRemoval,\n    onGroupMemberBanned: handleGroupMemberBan,\n    onGroupMemberScopeChanged: handleGroupMemberScopeChange,\n    onTypingStarted: handleTyping,\n    onTypingEnded: handleTyping\n  };\n  var handleConversations = function handleConversations() {\n    getConversations().then(function (conversations) {\n      if (conversationList.length === 0 && conversations.length === 0) {\n        setMessage(\"NO_CHATS_FOUND\");\n      } else {\n        setMessage(\"\");\n      }\n      setConversationList(function (conversationList) {\n        return [].concat((0, _toConsumableArray2.default)(conversationList), (0, _toConsumableArray2.default)(conversations));\n      });\n    }).catch(function (error) {\n      _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onError, error);\n      setMessage(\"SOMETHING_WENT_WRONG\");\n    });\n  };\n  var getConversations = function getConversations() {\n    return new Promise(function (resolve, reject) {\n      conversationListManager === null || conversationListManager === void 0 ? void 0 : conversationListManager.current.fetchNextConversation().then(function (conversations) {\n        return resolve(conversations);\n      }).catch(function (error) {\n        _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onError, error);\n        reject(error);\n      });\n    });\n  };\n  var handleScroll = function handleScroll(event) {\n    var bottom = Math.round(event.currentTarget.scrollHeight - event.currentTarget.scrollTop) === Math.round(event.currentTarget.clientHeight);\n    if (bottom) {\n      handleConversations();\n    }\n  };\n\n  /**\n   * reset un read count\n   */\n  var resetUnreadCount = function resetUnreadCount(conversation) {\n    var conversations = (0, _toConsumableArray2.default)(conversationList);\n    var conversationKey = conversations.findIndex(function (conversationObject) {\n      return conversationObject.conversationId === conversation.conversationId;\n    });\n    if (conversationKey > -1) {\n      var _conversation2 = conversations[conversationKey];\n      var newConversation = _objectSpread(_objectSpread({}, _conversation2), {}, {\n        unreadMessageCount: 0\n      });\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   * update last message\n   */\n  var updateLastMessage = function updateLastMessage(message) {\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversations = response.conversations,\n        conversation = response.conversation;\n      if (conversationKey > -1) {\n        var newConversation = _objectSpread(_objectSpread({}, conversation), {}, {\n          lastMessage: message\n        });\n        conversations.splice(conversationKey, 1, newConversation);\n        setConversationList((0, _toConsumableArray2.default)(conversations));\n      }\n    });\n  };\n\n  /**\n   * Remove conversation from the conversationlist upon delete\n   */\n  var removeConversation = function removeConversation(conversation) {\n    var conversationKey = conversationList.findIndex(function (c) {\n      return c.conversationId === conversation.conversationId;\n    });\n    if (conversationKey > -1) {\n      var newConversationList = (0, _toConsumableArray2.default)(conversationList);\n      newConversationList.splice(conversationKey, 1);\n      setConversationList(newConversationList);\n    }\n  };\n  var deleteConversation = function deleteConversation(conversationToBeDeleted) {\n    return new Promise(function (resolve, reject) {\n      var _conversationToBeDele, _conversationToBeDele2;\n      var conversationWith = (conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : conversationToBeDeleted.conversationType) === _Shared.ReceiverTypeConstants.group ? conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : (_conversationToBeDele = conversationToBeDeleted.conversationWith) === null || _conversationToBeDele === void 0 ? void 0 : _conversationToBeDele.guid : conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : (_conversationToBeDele2 = conversationToBeDeleted.conversationWith) === null || _conversationToBeDele2 === void 0 ? void 0 : _conversationToBeDele2.uid;\n      _chat.CometChat.deleteConversation(conversationWith, conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : conversationToBeDeleted.conversationType).then(function (deletedConversation) {\n        setShowConfirm(_objectSpread(_objectSpread({}, showConfirm), {}, {\n          show: false\n        }));\n        removeConversation(conversationToBeDeleted);\n        resolve(deletedConversation);\n        _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onDeleteConversation, conversationToBeDeleted);\n      }).catch(function (error) {\n        _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onError, conversationToBeDeleted);\n        reject(error);\n      });\n    });\n  };\n  var cancelDelete = function cancelDelete() {\n    return setShowConfirm(_objectSpread(_objectSpread({}, showConfirm), {}, {\n      show: false\n    }));\n  };\n  var confirmDelete = function confirmDelete(conversation) {\n    setShowConfirm(_objectSpread(_objectSpread({}, showConfirm), {}, {\n      show: true,\n      conversation: conversation,\n      onCancel: cancelDelete\n    }));\n  };\n  var itemClickhandler = function itemClickhandler(e) {\n    _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onItemClick, e);\n  };\n\n  /**\n   * Component hooks\n   */\n\n  (0, _hooks.Hooks)(conversationList, conversationType, limit, tags, userAndGroupTags, setConversationList, conversationCallback, conversationListManager, handlers, callbackData, loggedInUser, handleConversations, confirmDelete);\n\n  /**\n   * Component template scoping\n   */\n\n  var getCustomView = function getCustomView(customView, props) {\n    return /*#__PURE__*/_react.default.createElement(customView, props);\n  };\n  var getMessageContainer = function getMessageContainer() {\n    var messageContainer = null;\n    if (conversationList.length === 0 && message.toLowerCase() === (0, _Shared.localize)(\"LOADING\")) {\n      /**Loading custom view */\n      messageContainer = /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageContainerStyle(style),\n        className: \"chats__message\"\n      }, customView.loading ? getCustomView(customView.loading, props) : /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageImgStyle(style, _theme, loadingIconURL),\n        className: \"message\"\n      }));\n    } else if (conversationList.length === 0 && message.toLowerCase() === \"no chats found\") {\n      /**Empty custom view */\n      messageContainer = /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageContainerStyle(style),\n        className: \"chats__message\"\n      }, customView.empty ? getCustomView(customView.empty, props) : /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageTextStyle(style, _theme, message),\n        className: \"message\"\n      }, emptyText));\n    } else if (!hideError && message.toLowerCase() === \"something went wrong\") {\n      /**Error custom view */\n      messageContainer = /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageContainerStyle(style),\n        className: \"chats__message\"\n      }, customView.error ? getCustomView(customView.error, props) : /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageTextStyle(style, _theme, message),\n        className: \"message\"\n      }, errorText));\n    }\n    return messageContainer;\n  };\n  var renderItems = conversationList.map(function (conversation) {\n    var _conversationOptions;\n    var typingIndicatorText = conversation !== null && conversation !== void 0 && conversation.typingIndicatorText ? conversation === null || conversation === void 0 ? void 0 : conversation.typingIndicatorText : \"\";\n    var isActive = (conversation === null || conversation === void 0 ? void 0 : conversation.conversationId) === (activeConversation === null || activeConversation === void 0 ? void 0 : activeConversation.conversationId) ? true : false;\n\n    /**\n     * Calculate conversations options for child component\n     */\n    var conversationOptions = _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.conversationOptions;\n    if (((_conversationOptions = conversationOptions) === null || _conversationOptions === void 0 ? void 0 : _conversationOptions.length) == 0) {\n      conversationOptions = [new _Chats.CometChatConversationOptions({\n        id: _Shared.ConversationOptionConstants.delete,\n        title: (0, _Shared.localize)(\"DELETE\"),\n        iconURL: _delete.default,\n        onClick: function onClick() {\n          return confirmDelete(conversation);\n        }\n      })];\n    }\n    return /*#__PURE__*/_react.default.createElement(_Shared.CometChatConversationListItem, {\n      key: conversation.conversationId,\n      conversationObject: conversation,\n      isActive: isActive,\n      conversationInputData: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.conversationInputData,\n      conversationOptions: conversationOptions,\n      style: new _Shared.ConversationListItemStyles(_objectSpread({}, styles.listItemStyle(style, _theme))),\n      hideDeletedMessages: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.hideDeletedMessages,\n      hideGroupActions: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.hideGroupActions,\n      showTypingIndicator: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.showTypingIndicator,\n      typingIndicatorText: typingIndicatorText,\n      hideThreadIndicator: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.hideThreadIndicator,\n      threadIndicatorText: (0, _Shared.localize)(\"IN_A_THREAD\"),\n      theme: _theme,\n      onClick: itemClickhandler.bind(_this),\n      avatarConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.avatarConfiguration,\n      statusIndicatorConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.statusIndicatorConfiguration,\n      badgeCountConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.badgeCountConfiguration,\n      messageReceiptConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.messageReceiptConfiguration,\n      loggedInUser: loggedInUser === null || loggedInUser === void 0 ? void 0 : loggedInUser.current\n    });\n  });\n\n  /**\n   * Component template\n   */\n  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, getMessageContainer(), /*#__PURE__*/_react.default.createElement(\"div\", {\n    style: styles.chatsListStyle(style, _theme),\n    className: \"conversation__list\",\n    onScroll: handleScroll\n  }, renderItems), /*#__PURE__*/_react.default.createElement(_Shared.CometChatBackdrop, {\n    isOpen: showConfirm.show,\n    onClick: showConfirm.onCancel,\n    background: _theme === null || _theme === void 0 ? void 0 : (_theme$palette = _theme.palette) === null || _theme$palette === void 0 ? void 0 : _theme$palette.accent200[_theme === null || _theme === void 0 ? void 0 : (_theme$palette2 = _theme.palette) === null || _theme$palette2 === void 0 ? void 0 : _theme$palette2.mode]\n  }, /*#__PURE__*/_react.default.createElement(_Shared.CometChatConfirmDialog, {\n    isOpen: showConfirm.show,\n    onConfirm: deleteConversation.bind(_this, showConfirm.conversation),\n    onCancel: showConfirm.onCancel,\n    style: styles.DialogStyle(_theme),\n    title: (0, _Shared.localize)(\"DELETE_CONVERSATION\"),\n    messageText: (0, _Shared.localize)(\"CONFIRM_DELETE_CONVERSATION\"),\n    confirmButtonText: (0, _Shared.localize)(\"CONFIRM_BUTTON_TEXT\"),\n    cancelButtonText: (0, _Shared.localize)(\"CANCEL_BUTTON_TEXT\")\n  })));\n});\n\n/**\n * Component default props\n */\nConversationList.defaultProps = {\n  loadingIconURL: _spinner.default\n};\n\n/**\n * Component default props types\n */\nConversationList.propTypes = {\n  conversationType: _propTypes.default.oneOf([\"users\", \"groups\", \"both\"]),\n  limit: _propTypes.default.number,\n  hideError: _propTypes.default.bool,\n  tags: _propTypes.default.array,\n  userAndGroupTags: _propTypes.default.bool,\n  emptyText: _propTypes.default.string,\n  errorText: _propTypes.default.string,\n  loadingIconURL: _propTypes.default.string,\n  style: _propTypes.default.object,\n  activeConversation: _propTypes.default.object,\n  enableSoundForMessages: _propTypes.default.bool,\n  customIncomingMessageSound: _propTypes.default.string,\n  customView: _propTypes.default.object,\n  conversationListItemConfiguration: _propTypes.default.object,\n  theme: _propTypes.default.object\n};\nvar CometChatConversationList = /*#__PURE__*/_react.default.memo(ConversationList);\nexports.CometChatConversationList = CometChatConversationList;","map":{"version":3,"names":["_interopRequireDefault","require","_typeof","Object","defineProperty","exports","value","CometChatConversationList","_defineProperty2","_toConsumableArray2","_slicedToArray2","_react","_interopRequireWildcard","_chat","_propTypes","_controller","_hooks","styles","_spinner","_Shared","_","_Chats","_ConversationListCustomView","_delete","_this","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","ConversationList","forwardRef","props","ref","_theme$palette","_theme$palette2","activeConversation","emptyText","errorText","conversationType","limit","hideError","tags","userAndGroupTags","loadingIconURL","style","enableSoundForMessages","customIncomingMessageSound","customView","conversationListItemConfiguration","theme","loggedInUser","useRef","conversationListManager","ConversationListManager","_useState","useState","_useState2","conversationList","setConversationList","_useState3","_useState4","callbackData","setCallbackData","_useState5","localize","_useState6","message","setMessage","_useState7","show","confirmButtonText","conversation","onCancel","_useState8","showConfirm","setShowConfirm","_conversationListItemConfiguration","ConversationListItemConfiguration","_theme","CometChatTheme","conversationCallback","listenerName","_len","args","Array","_key","name","concat","markMessageAsDelivered","CometChat","markAsDelivered","useImperativeHandle","resetUnreadCount","updateLastMessage","removeConversation","deleteConversation","updateConversation","filterByConversationType","ConversationTypeConstants","both","users","receiverType","ReceiverTypeConstants","group","groups","user","getConversationFromMessage","Promise","resolve","reject","CometChatHelper","then","conversationKey","findIndex","c","conversationId","conversationWith","conversations","catch","error","CometChatConversationEvents","emit","onError","getUnreadMessageCount","undefined","unreadMessageCount","Number","shouldIncrementCount","_message$sender","_loggedInUser$current","_message$metadata","sender","uid","current","category","MessageCategoryConstants","metadata","incrementUnreadCount","playNotificationSound","_message$getSender","_activeConversation$c","_activeConversation$c2","getReceiverType","receiverId","getSender","getUid","getReceiverId","guid","CometChatSoundManager","play","Sound","incomingMessageFromOther","handleUsers","eachConversation","status","getStatus","newConversation","splice","handleMessages","console","log","response","lastMessage","Conversation","unshift","setTimeout","_unreadMessageCount","_newConversation","handleMessageActions","id","handleMessageReadActions","messageReceipt","_conversation$convers","_conversation$convers2","receiver","_conversation$lastMes","messageId","handleGroupMemberAddition","newUser","_loggedInUser$current2","newConversationWith","_lastMessage","_newConversationWith","hasJoined","_unreadMessageCount2","_newConversation2","handleGroupMemberRemoval","removedUser","_loggedInUser$current3","handleGroupMemberBan","_loggedInUser$current4","handleGroupMemberScopeChange","newScope","_loggedInUser$current5","scope","_newConversationWith2","_newConversation3","handleTyping","typingData","typingStarted","_conversation$convers3","_typingData$sender","_conversation$convers4","typingIndicatorText","_typingData$sender2","showTypingIndicator","_conversation$convers5","_conversation","handlers","onUserOnline","onUserOffline","onTextMessageReceived","onMediaMessageReceived","onCustomMessageReceived","onIncomingCallReceived","onIncomingCallCancelled","messageEdited","onMessageDeleted","messageRead","onMemberAddedToGroup","onGroupMemberJoined","onGroupMemberKicked","onGroupMemberLeft","onGroupMemberBanned","onGroupMemberScopeChanged","onTypingStarted","onTypingEnded","handleConversations","getConversations","fetchNextConversation","handleScroll","event","bottom","Math","round","currentTarget","scrollHeight","scrollTop","clientHeight","conversationObject","_conversation2","newConversationList","conversationToBeDeleted","_conversationToBeDele","_conversationToBeDele2","deletedConversation","onDeleteConversation","cancelDelete","confirmDelete","itemClickhandler","e","onItemClick","Hooks","getCustomView","createElement","getMessageContainer","messageContainer","toLowerCase","messageContainerStyle","className","loading","messageImgStyle","empty","messageTextStyle","renderItems","map","_conversationOptions","isActive","conversationOptions","CometChatConversationOptions","ConversationOptionConstants","delete","title","iconURL","onClick","CometChatConversationListItem","conversationInputData","ConversationListItemStyles","listItemStyle","hideDeletedMessages","hideGroupActions","hideThreadIndicator","threadIndicatorText","bind","avatarConfiguration","statusIndicatorConfiguration","badgeCountConfiguration","messageReceiptConfiguration","Fragment","chatsListStyle","onScroll","CometChatBackdrop","isOpen","background","palette","accent200","mode","CometChatConfirmDialog","onConfirm","DialogStyle","messageText","cancelButtonText","defaultProps","propTypes","oneOf","number","bool","array","string","memo"],"sources":["/home/admin1/dev/react/react-sample-guide/sample-react-guides/node_modules/react-ui-kit-testing/dist/Chats/CometChatConversationList/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CometChatConversationList = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _chat = require(\"@cometchat-pro/chat\");\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _controller = require(\"./controller\");\nvar _hooks = require(\"./hooks\");\nvar styles = _interopRequireWildcard(require(\"./style\"));\nvar _spinner = _interopRequireDefault(require(\"./resources/spinner.svg\"));\nvar _Shared = require(\"../../Shared\");\nvar _ = require(\"../\");\nvar _Chats = require(\"../../Chats\");\nvar _ConversationListCustomView = require(\"../ConversationListCustomView\");\nvar _delete = _interopRequireDefault(require(\"./resources/delete.svg\"));\nvar _this = void 0;\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n *\n * @version 1.0.0\n * @author CometChatTeam\n * @description CometChatConversationList component retrieves the latest conversations that a CometChat logged-in user has been a part of.\n * The state of the component is communicated via 3 states i.e empty, loading and error.\n *\n */\nvar ConversationList = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {\n  var _theme$palette, _theme$palette2;\n  /**\n   * Props destructuring\n   */\n  var activeConversation = props.activeConversation,\n    emptyText = props.emptyText,\n    errorText = props.errorText,\n    conversationType = props.conversationType,\n    limit = props.limit,\n    hideError = props.hideError,\n    tags = props.tags,\n    userAndGroupTags = props.userAndGroupTags,\n    loadingIconURL = props.loadingIconURL,\n    style = props.style,\n    enableSoundForMessages = props.enableSoundForMessages,\n    customIncomingMessageSound = props.customIncomingMessageSound,\n    customView = props.customView,\n    conversationListItemConfiguration = props.conversationListItemConfiguration,\n    theme = props.theme;\n\n  /**\n   * Component internal state\n   */\n  var loggedInUser = (0, _react.useRef)(null);\n  var conversationListManager = (0, _react.useRef)(new _controller.ConversationListManager({\n    conversationType: conversationType,\n    limit: limit,\n    tags: tags,\n    userAndGroupTags: userAndGroupTags\n  }));\n  var _useState = (0, _react.useState)([]),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    conversationList = _useState2[0],\n    setConversationList = _useState2[1];\n  var _useState3 = (0, _react.useState)(null),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    callbackData = _useState4[0],\n    setCallbackData = _useState4[1];\n  var _useState5 = (0, _react.useState)((0, _Shared.localize)(\"LOADING\")),\n    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n    message = _useState6[0],\n    setMessage = _useState6[1];\n  var _useState7 = (0, _react.useState)({\n      show: false,\n      message: (0, _Shared.localize)(\"CONFIRM_DELETE_CONVERSATION\"),\n      confirmButtonText: (0, _Shared.localize)(\"DELETE\"),\n      conversation: null,\n      onCancel: function onCancel() {}\n    }),\n    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n    showConfirm = _useState8[0],\n    setShowConfirm = _useState8[1];\n\n  //console.log(\"conversationList\", conversationList);\n  /**\n   * Component private scoping\n   */\n  var _conversationListItemConfiguration = new _Shared.ConversationListItemConfiguration(conversationListItemConfiguration !== null && conversationListItemConfiguration !== void 0 ? conversationListItemConfiguration : {});\n  var _theme = new _Shared.CometChatTheme(theme !== null && theme !== void 0 ? theme : {});\n\n  /**\n   * Component internal handlers/methods\n   */\n\n  var conversationCallback = function conversationCallback(listenerName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    setCallbackData({\n      name: listenerName,\n      args: [].concat(args)\n    });\n  };\n\n  /**\n   * Mark the incoming message as delivered\n   */\n  var markMessageAsDelivered = function markMessageAsDelivered(message) {\n    if (message.hasOwnProperty(\"deliveredAt\") === false) {\n      _chat.CometChat.markAsDelivered(message);\n    }\n  };\n\n  /**\n   *\n   * If the incoming message is 1-1 conversation, and the conversation type filter is set to groups return false\n   * If the incoming message is group conversation, and the conversation type filter is set to users return false\n   * else return true\n   *\n   */\n  _react.default.useImperativeHandle(ref, function () {\n    return {\n      resetUnreadCount: resetUnreadCount,\n      updateLastMessage: updateLastMessage,\n      removeConversation: removeConversation,\n      deleteConversation: deleteConversation,\n      updateConversation: updateConversation\n    };\n  });\n  var filterByConversationType = function filterByConversationType(message) {\n    if (conversationType !== _Shared.ConversationTypeConstants.both) {\n      if (conversationType === _Shared.ConversationTypeConstants.users && (message === null || message === void 0 ? void 0 : message.receiverType) === _Shared.ReceiverTypeConstants.group || conversationType === _Shared.ConversationTypeConstants.groups && (message === null || message === void 0 ? void 0 : message.receiverType) === _Shared.ReceiverTypeConstants.user) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   *\n   * Converting message object received in the listener callback to conversation object\n   */\n  var getConversationFromMessage = function getConversationFromMessage(message) {\n    return new Promise(function (resolve, reject) {\n      _chat.CometChat.CometChatHelper.getConversationFromMessage(message).then(function (conversation) {\n        var conversationKey = conversationList.findIndex(function (c) {\n          return c.conversationId === conversation.conversationId;\n        });\n        if (conversationKey > -1) {\n          resolve({\n            conversationKey: conversationKey,\n            conversationId: conversation.conversationId,\n            conversationType: conversation.conversationType,\n            conversationWith: conversation.conversationWith,\n            conversation: conversationList[conversationKey],\n            conversations: (0, _toConsumableArray2.default)(conversationList)\n          });\n        }\n        resolve({\n          conversationKey: conversationKey,\n          conversationId: conversation.conversationId,\n          conversationType: conversation.conversationType,\n          conversationWith: conversation.conversationWith,\n          conversation: conversation,\n          conversations: (0, _toConsumableArray2.default)(conversationList)\n        });\n      }).catch(function (error) {\n        _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onError, error);\n        reject(error);\n      });\n    });\n  };\n  var getUnreadMessageCount = function getUnreadMessageCount(message) {\n    var conversation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var unreadMessageCount = conversation !== null && conversation !== void 0 && conversation.unreadMessageCount ? Number(conversation === null || conversation === void 0 ? void 0 : conversation.unreadMessageCount) : 0;\n    unreadMessageCount = shouldIncrementCount(message) ? ++unreadMessageCount : unreadMessageCount;\n    return unreadMessageCount;\n  };\n\n  /**\n   *\n   * If the message is sent by the logged in user, return false\n   * If the message has category message or has incrementUnreadCount key in the metadata with value set to true, return true else return false\n   *\n   */\n  var shouldIncrementCount = function shouldIncrementCount(message) {\n    var _message$sender, _loggedInUser$current, _message$metadata;\n    if ((message === null || message === void 0 ? void 0 : (_message$sender = message.sender) === null || _message$sender === void 0 ? void 0 : _message$sender.uid) === (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current = loggedInUser.current) === null || _loggedInUser$current === void 0 ? void 0 : _loggedInUser$current.uid)) {\n      return false;\n    }\n    if ((message === null || message === void 0 ? void 0 : message.category) === _Shared.MessageCategoryConstants.message || (message === null || message === void 0 ? void 0 : (_message$metadata = message.metadata) === null || _message$metadata === void 0 ? void 0 : _message$metadata.incrementUnreadCount) === true) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * play notification sound for incoming messages\n   */\n  var playNotificationSound = function playNotificationSound(message) {\n    /**\n     * If unreadcount is not incremented, don't play notification sound\n     */\n    if (!shouldIncrementCount(message)) {\n      return false;\n    }\n    /**\n          * If customIncomingMessageSound url is present then CometChatSoundManager will play this sound\n          else play the default sound\n          */\n    if (enableSoundForMessages && activeConversation !== null && activeConversation !== void 0 && activeConversation.conversationType && activeConversation !== null && activeConversation !== void 0 && activeConversation.conversationWith) {\n      var _message$getSender, _activeConversation$c, _activeConversation$c2;\n      var receiverType = message.getReceiverType();\n      var receiverId = receiverType === _Shared.ReceiverTypeConstants.user ? message === null || message === void 0 ? void 0 : (_message$getSender = message.getSender()) === null || _message$getSender === void 0 ? void 0 : _message$getSender.getUid() : message === null || message === void 0 ? void 0 : message.getReceiverId();\n      if (receiverId !== (activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$c = activeConversation.conversationWith) === null || _activeConversation$c === void 0 ? void 0 : _activeConversation$c.uid) && receiverId !== (activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$c2 = activeConversation.conversationWith) === null || _activeConversation$c2 === void 0 ? void 0 : _activeConversation$c2.guid)) {\n        if (customIncomingMessageSound) {\n          _Shared.CometChatSoundManager.play(customIncomingMessageSound);\n        } else {\n          _Shared.CometChatSoundManager.play(_Shared.CometChatSoundManager.Sound.incomingMessageFromOther);\n        }\n      }\n    }\n  };\n\n  /**\n   *\n   * When a user goes online/ offline\n   */\n  var handleUsers = function handleUsers(user) {\n    var conversationKey = conversationList.findIndex(function (eachConversation) {\n      return eachConversation.conversationType && eachConversation.conversationType === _Shared.ReceiverTypeConstants.user && eachConversation.conversationWith && eachConversation.conversationWith.uid && eachConversation.conversationWith.uid === user.uid;\n    });\n    if (conversationKey > -1) {\n      var conversations = (0, _toConsumableArray2.default)(conversationList);\n      var conversation = conversations[conversationKey];\n      var conversationWith = _objectSpread(_objectSpread({}, conversation.conversationWith), {}, {\n        status: user.getStatus()\n      });\n      var newConversation = _objectSpread(_objectSpread({}, conversation), {}, {\n        conversationWith: conversationWith\n      });\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   *\n   * When a text message / media message / custom message is received\n   */\n  var handleMessages = function handleMessages() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    console.log(\"handle_Messages\", arguments.length <= 0 ? undefined : arguments[0]);\n    /**\n     * marking the incoming messages as read\n     */\n    markMessageAsDelivered(message);\n    /**\n     * If the incoming message is 1-1 and the conversation type filter is set to group, return false\n     * OR\n     * If the incoming message is group and the conversation type filter is set to \"users\", return false\n     * ELSE\n     * return true\n     */\n    if (filterByConversationType() === false) {\n      return false;\n    }\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      var lastMessage = _objectSpread(_objectSpread({}, conversation === null || conversation === void 0 ? void 0 : conversation.lastMessage), message);\n      if (conversationKey > -1) {\n        var unreadMessageCount = getUnreadMessageCount(message, conversation);\n        var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, conversationWith, unreadMessageCount);\n        conversations.splice(conversationKey, 1);\n        conversations.unshift(newConversation);\n        setTimeout(function () {\n          setConversationList((0, _toConsumableArray2.default)(conversations));\n        });\n\n        //play notification sound\n        playNotificationSound(message);\n      } else {\n        var _unreadMessageCount = getUnreadMessageCount(message);\n        var _newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, conversationWith, _unreadMessageCount);\n        conversations.unshift(_newConversation);\n        setTimeout(function () {\n          setConversationList((0, _toConsumableArray2.default)(conversations));\n        });\n\n        //play notification sound\n        playNotificationSound(message);\n      }\n    });\n  };\n\n  /**\n   * Listener callback when a message is edited, deleted or updated\n   */\n  var handleMessageActions = function handleMessageActions() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      if (conversationKey > -1 && conversation.lastMessage.id === message.id) {\n        var lastMessage = _objectSpread(_objectSpread({}, conversation.lastMessage), message);\n        var unreadMessageCount = getUnreadMessageCount(message, conversation);\n        var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, conversationWith, unreadMessageCount);\n        conversations.splice(conversationKey, 1, newConversation);\n        setConversationList((0, _toConsumableArray2.default)(conversations));\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a message is read\n   */\n  var handleMessageReadActions = function handleMessageReadActions() {\n    var messageReceipt = arguments.length <= 0 ? undefined : arguments[0];\n    var conversationKey = conversationList.findIndex(function (conversation) {\n      var _conversation$convers, _conversation$convers2;\n      return (messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.receiverType) === (conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) && ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.receiver) === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers = conversation.conversationWith) === null || _conversation$convers === void 0 ? void 0 : _conversation$convers.uid) || (messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.receiver) === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers2 = conversation.conversationWith) === null || _conversation$convers2 === void 0 ? void 0 : _conversation$convers2.guid));\n    });\n    if (conversationKey > -1) {\n      var _conversation$lastMes;\n      var conversations = _objectSpread({}, conversationList);\n      var conversation = conversations[conversationKey];\n      var unreadMessageCount = getUnreadMessageCount(message, conversation);\n\n      /**\n       * If the message id in the read receipt is greater than or equal to the lastmessage id, set unreadmessagecount to 0\n       */\n      if ((messageReceipt === null || messageReceipt === void 0 ? void 0 : messageReceipt.messageId) >= (conversation === null || conversation === void 0 ? void 0 : (_conversation$lastMes = conversation.lastMessage) === null || _conversation$lastMes === void 0 ? void 0 : _conversation$lastMes.id)) {\n        unreadMessageCount = 0;\n      }\n      var newConversation = new _chat.CometChat.Conversation(conversation.conversationId, conversation.conversationType, conversation.lastMessage, conversation.conversationWith, unreadMessageCount);\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   *\n   * Listener callback when a user joins/added to the group\n   */\n  var handleGroupMemberAddition = function handleGroupMemberAddition() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    var newUser = arguments.length <= 1 ? undefined : arguments[1];\n    var group = arguments.length <= 3 ? undefined : arguments[3];\n    getConversationFromMessage(message).then(function (response) {\n      var _loggedInUser$current2;\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      if (conversationKey > -1) {\n        var lastMessage = _objectSpread(_objectSpread({}, conversation.lastMessage), message);\n        var newConversationWith = _objectSpread(_objectSpread({}, conversationWith), group);\n        var unreadMessageCount = getUnreadMessageCount(message, conversation);\n        var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n        conversations.splice(conversationKey, 1, newConversation);\n        setConversationList(conversations);\n      } else if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current2 = loggedInUser.current) === null || _loggedInUser$current2 === void 0 ? void 0 : _loggedInUser$current2.uid) === newUser.uid) {\n        /**\n         * If the loggedin user is added to the group, add the conversation to the chats list\n         */\n        var _lastMessage = _objectSpread({}, message);\n        var _newConversationWith = _objectSpread(_objectSpread(_objectSpread({}, conversationWith), group), {}, {\n          hasJoined: true\n        });\n        var _unreadMessageCount2 = getUnreadMessageCount(message, conversation);\n        var _newConversation2 = new _chat.CometChat.Conversation(conversationId, conversationType, _lastMessage, _newConversationWith, _unreadMessageCount2);\n        conversations.unshift(_newConversation2);\n        setConversationList(conversations);\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a member is kicked from / has left the group\n   */\n  var handleGroupMemberRemoval = function handleGroupMemberRemoval() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    var removedUser = arguments.length <= 1 ? undefined : arguments[1];\n    var group = arguments.length <= 3 ? undefined : arguments[3];\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      if (conversationKey > -1) {\n        var _loggedInUser$current3;\n        /**\n         * If the loggedin user is removed from the group, remove the conversation from the chats list\n         */\n        if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current3 = loggedInUser.current) === null || _loggedInUser$current3 === void 0 ? void 0 : _loggedInUser$current3.uid) === removedUser.uid) {\n          conversations.splice(conversationKey, 1);\n          setConversationList(conversations);\n        } else {\n          var lastMessage = _objectSpread(_objectSpread({}, conversation.lastMessage), message);\n          var newConversationWith = _objectSpread(_objectSpread({}, conversationWith), group);\n          var unreadMessageCount = getUnreadMessageCount(message, conversation);\n          var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n          conversations.splice(conversationKey, 1, newConversation);\n          setConversationList(conversations);\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a member is banned from the group\n   */\n  var handleGroupMemberBan = function handleGroupMemberBan() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    var removedUser = arguments.length <= 1 ? undefined : arguments[1];\n    var group = arguments.length <= 3 ? undefined : arguments[3];\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      if (conversationKey > -1) {\n        var _loggedInUser$current4;\n        /**\n         * If the loggedin user is banned from the group, remove the conversation from the chats list\n         */\n        if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current4 = loggedInUser.current) === null || _loggedInUser$current4 === void 0 ? void 0 : _loggedInUser$current4.uid) === removedUser.uid) {\n          conversations.splice(conversationKey, 1);\n          setConversationList(conversations);\n        } else {\n          var lastMessage = _objectSpread(_objectSpread({}, conversation.lastMessage), message);\n          var newConversationWith = _objectSpread(_objectSpread({}, conversationWith), group);\n          var unreadMessageCount = getUnreadMessageCount(message, conversation);\n          var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n          conversations.splice(conversationKey, 1, newConversation);\n          setConversationList(conversations);\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback when a group member scope is updated\n   */\n  var handleGroupMemberScopeChange = function handleGroupMemberScopeChange() {\n    var message = arguments.length <= 0 ? undefined : arguments[0];\n    var user = arguments.length <= 1 ? undefined : arguments[1];\n    var newScope = arguments.length <= 2 ? undefined : arguments[2];\n    var group = arguments.length <= 4 ? undefined : arguments[4];\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversationId = response.conversationId,\n        conversationType = response.conversationType,\n        conversationWith = response.conversationWith,\n        conversation = response.conversation,\n        conversations = response.conversations;\n      if (conversationKey > -1) {\n        var _loggedInUser$current5;\n        var lastMessage = _objectSpread(_objectSpread({}, conversation.lastMessage), message);\n        var unreadMessageCount = getUnreadMessageCount(message, conversation);\n        if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$current5 = loggedInUser.current) === null || _loggedInUser$current5 === void 0 ? void 0 : _loggedInUser$current5.uid) === user.uid) {\n          var newConversationWith = _objectSpread(_objectSpread(_objectSpread({}, conversationWith), group), {}, {\n            scope: newScope\n          });\n          var newConversation = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, newConversationWith, unreadMessageCount);\n          conversations.splice(conversationKey, 1);\n          conversations.unshift(newConversation);\n          setConversationList(conversations);\n        } else {\n          var _newConversationWith2 = _objectSpread(_objectSpread({}, conversationWith), group);\n          var _newConversation3 = new _chat.CometChat.Conversation(conversationId, conversationType, lastMessage, _newConversationWith2, unreadMessageCount);\n          conversations.splice(conversationKey, 1, _newConversation3);\n          setConversationList(conversations);\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * Listener callback for typing events\n   */\n  var handleTyping = function handleTyping() {\n    var typingData = arguments.length <= 0 ? undefined : arguments[0];\n    var typingStarted = arguments.length <= 1 ? undefined : arguments[1];\n    var conversations = (0, _toConsumableArray2.default)(conversationList);\n    var conversationKey = conversations.findIndex(function (conversation) {\n      var _conversation$convers3, _typingData$sender, _conversation$convers4;\n      return (conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === (typingData === null || typingData === void 0 ? void 0 : typingData.receiverType) && ((conversation === null || conversation === void 0 ? void 0 : conversation.conversationType) === _Shared.ReceiverTypeConstants.user && ((_conversation$convers3 = conversation.conversationWith) === null || _conversation$convers3 === void 0 ? void 0 : _conversation$convers3.uid) === (typingData === null || typingData === void 0 ? void 0 : (_typingData$sender = typingData.sender) === null || _typingData$sender === void 0 ? void 0 : _typingData$sender.uid) || conversation.conversationType === _Shared.ReceiverTypeConstants.group && ((_conversation$convers4 = conversation.conversationWith) === null || _conversation$convers4 === void 0 ? void 0 : _conversation$convers4.guid) === (typingData === null || typingData === void 0 ? void 0 : typingData.receiverId));\n    });\n    if (conversationKey > -1) {\n      var typingIndicatorText = \"\";\n      if (typingStarted) {\n        var _typingData$sender2;\n        typingIndicatorText = (typingData === null || typingData === void 0 ? void 0 : typingData.receiverType) === _Shared.ReceiverTypeConstants.group ? \"\".concat(typingData === null || typingData === void 0 ? void 0 : (_typingData$sender2 = typingData.sender) === null || _typingData$sender2 === void 0 ? void 0 : _typingData$sender2.name, \" \").concat((0, _Shared.localize)(\"IS_TYPING\")) : (0, _Shared.localize)(\"IS_TYPING\");\n      }\n      var conversation = conversationList[conversationKey];\n      var newConversation = _objectSpread(_objectSpread({}, conversation), {}, {\n        showTypingIndicator: typingStarted,\n        typingIndicatorText: typingIndicatorText\n      });\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   *\n   * @param {Object} conversation\n   * Public method to update the conversation list programmatically\n   */\n  var updateConversation = function updateConversation(conversation) {\n    var conversationKey = conversationList.findIndex(function (eachConversation) {\n      var _conversation$convers5;\n      return eachConversation.conversationWith && eachConversation.conversationWith.uid && eachConversation.conversationWith.uid === (conversation === null || conversation === void 0 ? void 0 : (_conversation$convers5 = conversation.conversationWith) === null || _conversation$convers5 === void 0 ? void 0 : _conversation$convers5.uid);\n    });\n    if (conversationKey > -1) {\n      var conversations = (0, _toConsumableArray2.default)(conversationList);\n      var _conversation = conversations[conversationKey];\n      var conversationWith = _objectSpread({}, _conversation.conversationWith);\n      var newConversation = _objectSpread(_objectSpread({}, _conversation), {}, {\n        conversationWith: conversationWith\n      });\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n  var handlers = {\n    onUserOnline: handleUsers,\n    onUserOffline: handleUsers,\n    onTextMessageReceived: handleMessages,\n    onMediaMessageReceived: handleMessages,\n    onCustomMessageReceived: handleMessages,\n    onIncomingCallReceived: handleMessages,\n    onIncomingCallCancelled: handleMessages,\n    messageEdited: handleMessageActions,\n    onMessageDeleted: handleMessageActions,\n    messageRead: handleMessageReadActions,\n    onMemberAddedToGroup: handleGroupMemberAddition,\n    onGroupMemberJoined: handleGroupMemberAddition,\n    onGroupMemberKicked: handleGroupMemberRemoval,\n    onGroupMemberLeft: handleGroupMemberRemoval,\n    onGroupMemberBanned: handleGroupMemberBan,\n    onGroupMemberScopeChanged: handleGroupMemberScopeChange,\n    onTypingStarted: handleTyping,\n    onTypingEnded: handleTyping\n  };\n  var handleConversations = function handleConversations() {\n    getConversations().then(function (conversations) {\n      if (conversationList.length === 0 && conversations.length === 0) {\n        setMessage(\"NO_CHATS_FOUND\");\n      } else {\n        setMessage(\"\");\n      }\n      setConversationList(function (conversationList) {\n        return [].concat((0, _toConsumableArray2.default)(conversationList), (0, _toConsumableArray2.default)(conversations));\n      });\n    }).catch(function (error) {\n      _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onError, error);\n      setMessage(\"SOMETHING_WENT_WRONG\");\n    });\n  };\n  var getConversations = function getConversations() {\n    return new Promise(function (resolve, reject) {\n      conversationListManager === null || conversationListManager === void 0 ? void 0 : conversationListManager.current.fetchNextConversation().then(function (conversations) {\n        return resolve(conversations);\n      }).catch(function (error) {\n        _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onError, error);\n        reject(error);\n      });\n    });\n  };\n  var handleScroll = function handleScroll(event) {\n    var bottom = Math.round(event.currentTarget.scrollHeight - event.currentTarget.scrollTop) === Math.round(event.currentTarget.clientHeight);\n    if (bottom) {\n      handleConversations();\n    }\n  };\n\n  /**\n   * reset un read count\n   */\n  var resetUnreadCount = function resetUnreadCount(conversation) {\n    var conversations = (0, _toConsumableArray2.default)(conversationList);\n    var conversationKey = conversations.findIndex(function (conversationObject) {\n      return conversationObject.conversationId === conversation.conversationId;\n    });\n    if (conversationKey > -1) {\n      var _conversation2 = conversations[conversationKey];\n      var newConversation = _objectSpread(_objectSpread({}, _conversation2), {}, {\n        unreadMessageCount: 0\n      });\n      conversations.splice(conversationKey, 1, newConversation);\n      setConversationList(conversations);\n    }\n  };\n\n  /**\n   * update last message\n   */\n  var updateLastMessage = function updateLastMessage(message) {\n    getConversationFromMessage(message).then(function (response) {\n      var conversationKey = response.conversationKey,\n        conversations = response.conversations,\n        conversation = response.conversation;\n      if (conversationKey > -1) {\n        var newConversation = _objectSpread(_objectSpread({}, conversation), {}, {\n          lastMessage: message\n        });\n        conversations.splice(conversationKey, 1, newConversation);\n        setConversationList((0, _toConsumableArray2.default)(conversations));\n      }\n    });\n  };\n\n  /**\n   * Remove conversation from the conversationlist upon delete\n   */\n  var removeConversation = function removeConversation(conversation) {\n    var conversationKey = conversationList.findIndex(function (c) {\n      return c.conversationId === conversation.conversationId;\n    });\n    if (conversationKey > -1) {\n      var newConversationList = (0, _toConsumableArray2.default)(conversationList);\n      newConversationList.splice(conversationKey, 1);\n      setConversationList(newConversationList);\n    }\n  };\n  var deleteConversation = function deleteConversation(conversationToBeDeleted) {\n    return new Promise(function (resolve, reject) {\n      var _conversationToBeDele, _conversationToBeDele2;\n      var conversationWith = (conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : conversationToBeDeleted.conversationType) === _Shared.ReceiverTypeConstants.group ? conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : (_conversationToBeDele = conversationToBeDeleted.conversationWith) === null || _conversationToBeDele === void 0 ? void 0 : _conversationToBeDele.guid : conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : (_conversationToBeDele2 = conversationToBeDeleted.conversationWith) === null || _conversationToBeDele2 === void 0 ? void 0 : _conversationToBeDele2.uid;\n      _chat.CometChat.deleteConversation(conversationWith, conversationToBeDeleted === null || conversationToBeDeleted === void 0 ? void 0 : conversationToBeDeleted.conversationType).then(function (deletedConversation) {\n        setShowConfirm(_objectSpread(_objectSpread({}, showConfirm), {}, {\n          show: false\n        }));\n        removeConversation(conversationToBeDeleted);\n        resolve(deletedConversation);\n        _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onDeleteConversation, conversationToBeDeleted);\n      }).catch(function (error) {\n        _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onError, conversationToBeDeleted);\n        reject(error);\n      });\n    });\n  };\n  var cancelDelete = function cancelDelete() {\n    return setShowConfirm(_objectSpread(_objectSpread({}, showConfirm), {}, {\n      show: false\n    }));\n  };\n  var confirmDelete = function confirmDelete(conversation) {\n    setShowConfirm(_objectSpread(_objectSpread({}, showConfirm), {}, {\n      show: true,\n      conversation: conversation,\n      onCancel: cancelDelete\n    }));\n  };\n  var itemClickhandler = function itemClickhandler(e) {\n    _.CometChatConversationEvents.emit(_.CometChatConversationEvents.onItemClick, e);\n  };\n\n  /**\n   * Component hooks\n   */\n\n  (0, _hooks.Hooks)(conversationList, conversationType, limit, tags, userAndGroupTags, setConversationList, conversationCallback, conversationListManager, handlers, callbackData, loggedInUser, handleConversations, confirmDelete);\n\n  /**\n   * Component template scoping\n   */\n\n  var getCustomView = function getCustomView(customView, props) {\n    return /*#__PURE__*/_react.default.createElement(customView, props);\n  };\n  var getMessageContainer = function getMessageContainer() {\n    var messageContainer = null;\n    if (conversationList.length === 0 && message.toLowerCase() === (0, _Shared.localize)(\"LOADING\")) {\n      /**Loading custom view */\n      messageContainer = /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageContainerStyle(style),\n        className: \"chats__message\"\n      }, customView.loading ? getCustomView(customView.loading, props) : /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageImgStyle(style, _theme, loadingIconURL),\n        className: \"message\"\n      }));\n    } else if (conversationList.length === 0 && message.toLowerCase() === \"no chats found\") {\n      /**Empty custom view */\n      messageContainer = /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageContainerStyle(style),\n        className: \"chats__message\"\n      }, customView.empty ? getCustomView(customView.empty, props) : /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageTextStyle(style, _theme, message),\n        className: \"message\"\n      }, emptyText));\n    } else if (!hideError && message.toLowerCase() === \"something went wrong\") {\n      /**Error custom view */\n      messageContainer = /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageContainerStyle(style),\n        className: \"chats__message\"\n      }, customView.error ? getCustomView(customView.error, props) : /*#__PURE__*/_react.default.createElement(\"div\", {\n        style: styles.messageTextStyle(style, _theme, message),\n        className: \"message\"\n      }, errorText));\n    }\n    return messageContainer;\n  };\n  var renderItems = conversationList.map(function (conversation) {\n    var _conversationOptions;\n    var typingIndicatorText = conversation !== null && conversation !== void 0 && conversation.typingIndicatorText ? conversation === null || conversation === void 0 ? void 0 : conversation.typingIndicatorText : \"\";\n    var isActive = (conversation === null || conversation === void 0 ? void 0 : conversation.conversationId) === (activeConversation === null || activeConversation === void 0 ? void 0 : activeConversation.conversationId) ? true : false;\n\n    /**\n     * Calculate conversations options for child component\n     */\n    var conversationOptions = _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.conversationOptions;\n    if (((_conversationOptions = conversationOptions) === null || _conversationOptions === void 0 ? void 0 : _conversationOptions.length) == 0) {\n      conversationOptions = [new _Chats.CometChatConversationOptions({\n        id: _Shared.ConversationOptionConstants.delete,\n        title: (0, _Shared.localize)(\"DELETE\"),\n        iconURL: _delete.default,\n        onClick: function onClick() {\n          return confirmDelete(conversation);\n        }\n      })];\n    }\n    return /*#__PURE__*/_react.default.createElement(_Shared.CometChatConversationListItem, {\n      key: conversation.conversationId,\n      conversationObject: conversation,\n      isActive: isActive,\n      conversationInputData: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.conversationInputData,\n      conversationOptions: conversationOptions,\n      style: new _Shared.ConversationListItemStyles(_objectSpread({}, styles.listItemStyle(style, _theme))),\n      hideDeletedMessages: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.hideDeletedMessages,\n      hideGroupActions: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.hideGroupActions,\n      showTypingIndicator: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.showTypingIndicator,\n      typingIndicatorText: typingIndicatorText,\n      hideThreadIndicator: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.hideThreadIndicator,\n      threadIndicatorText: (0, _Shared.localize)(\"IN_A_THREAD\"),\n      theme: _theme,\n      onClick: itemClickhandler.bind(_this),\n      avatarConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.avatarConfiguration,\n      statusIndicatorConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.statusIndicatorConfiguration,\n      badgeCountConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.badgeCountConfiguration,\n      messageReceiptConfiguration: _conversationListItemConfiguration === null || _conversationListItemConfiguration === void 0 ? void 0 : _conversationListItemConfiguration.messageReceiptConfiguration,\n      loggedInUser: loggedInUser === null || loggedInUser === void 0 ? void 0 : loggedInUser.current\n    });\n  });\n\n  /**\n   * Component template\n   */\n  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, getMessageContainer(), /*#__PURE__*/_react.default.createElement(\"div\", {\n    style: styles.chatsListStyle(style, _theme),\n    className: \"conversation__list\",\n    onScroll: handleScroll\n  }, renderItems), /*#__PURE__*/_react.default.createElement(_Shared.CometChatBackdrop, {\n    isOpen: showConfirm.show,\n    onClick: showConfirm.onCancel,\n    background: _theme === null || _theme === void 0 ? void 0 : (_theme$palette = _theme.palette) === null || _theme$palette === void 0 ? void 0 : _theme$palette.accent200[_theme === null || _theme === void 0 ? void 0 : (_theme$palette2 = _theme.palette) === null || _theme$palette2 === void 0 ? void 0 : _theme$palette2.mode]\n  }, /*#__PURE__*/_react.default.createElement(_Shared.CometChatConfirmDialog, {\n    isOpen: showConfirm.show,\n    onConfirm: deleteConversation.bind(_this, showConfirm.conversation),\n    onCancel: showConfirm.onCancel,\n    style: styles.DialogStyle(_theme),\n    title: (0, _Shared.localize)(\"DELETE_CONVERSATION\"),\n    messageText: (0, _Shared.localize)(\"CONFIRM_DELETE_CONVERSATION\"),\n    confirmButtonText: (0, _Shared.localize)(\"CONFIRM_BUTTON_TEXT\"),\n    cancelButtonText: (0, _Shared.localize)(\"CANCEL_BUTTON_TEXT\")\n  })));\n});\n\n/**\n * Component default props\n */\nConversationList.defaultProps = {\n  loadingIconURL: _spinner.default\n};\n\n/**\n * Component default props types\n */\nConversationList.propTypes = {\n  conversationType: _propTypes.default.oneOf([\"users\", \"groups\", \"both\"]),\n  limit: _propTypes.default.number,\n  hideError: _propTypes.default.bool,\n  tags: _propTypes.default.array,\n  userAndGroupTags: _propTypes.default.bool,\n  emptyText: _propTypes.default.string,\n  errorText: _propTypes.default.string,\n  loadingIconURL: _propTypes.default.string,\n  style: _propTypes.default.object,\n  activeConversation: _propTypes.default.object,\n  enableSoundForMessages: _propTypes.default.bool,\n  customIncomingMessageSound: _propTypes.default.string,\n  customView: _propTypes.default.object,\n  conversationListItemConfiguration: _propTypes.default.object,\n  theme: _propTypes.default.object\n};\nvar CometChatConversationList = /*#__PURE__*/_react.default.memo(ConversationList);\nexports.CometChatConversationList = CometChatConversationList;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
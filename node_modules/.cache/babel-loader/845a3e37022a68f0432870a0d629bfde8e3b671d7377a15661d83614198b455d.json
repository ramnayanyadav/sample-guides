{"ast":null,"code":"import { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatMessageCategories, CometChatMessageTypes } from \"..\";\nconst wordBoundary = {\n  start: `(?:^|:|;|'|\"|,|{|}|\\\\.|\\\\s|\\\\!|\\\\?|\\\\(|\\\\)|\\\\[|\\\\]|\\\\*)`,\n  end: `(?=$|:|;|'|\"|,|{|}|\\\\.|\\\\s|\\\\!|\\\\?|\\\\(|\\\\)|\\\\[|\\\\]|\\\\*)`\n};\nconst emailPattern = new RegExp(wordBoundary.start + `[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,6}` + wordBoundary.end, \"gi\");\nconst urlPattern = new RegExp(wordBoundary.start + `((https?://|www\\\\.|pic\\\\.)[-\\\\w;/?:@&=+$\\\\|\\\\_.!~*\\\\|'()\\\\[\\\\]%#,☺]+[\\\\w/#](\\\\(\\\\))?)` + wordBoundary.end, \"gi\");\nconst phoneNumPattern = new RegExp(wordBoundary.start + `(?:\\\\+?(\\\\d{1,3}))?([-. (]*(\\\\d{3})[-. )]*)?((\\\\d{3})[-. ]*(\\\\d{2,4})(?:[-.x ]*(\\\\d+))?)` + wordBoundary.end, \"gi\");\nexport const ID = () => {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return \"_\" + Math.random().toString(36).substr(2, 9);\n};\n_c = ID;\nexport const getUnixTimestamp = () => {\n  return Math.round(+new Date() / 1000);\n};\nexport const getExtensionsData = (message, extensionKey) => {\n  if (message !== null && message !== void 0 && message.hasOwnProperty(\"metadata\")) {\n    const metadata = message.metadata;\n    const injectedObject = metadata[\"@injected\"];\n    if (injectedObject && injectedObject.hasOwnProperty(\"extensions\")) {\n      const extensionsObject = injectedObject[\"extensions\"];\n      if (extensionsObject && extensionsObject.hasOwnProperty(extensionKey)) {\n        return extensionsObject[extensionKey];\n      }\n    }\n  }\n  return null;\n};\nexport const getMetadataByKey = (message, metadataKey) => {\n  if (message.hasOwnProperty(\"metadata\")) {\n    const metadata = message[\"metadata\"];\n    if (metadata.hasOwnProperty(metadataKey)) {\n      return metadata[metadataKey];\n    }\n  }\n  return null;\n};\n\n// export const getFileMessageMetadata = (message, metadataKey) => {\n\n// \tif (message.hasOwnProperty(\"metadata\")) {\n// \t\tconst metadata = message[\"metadata\"];\n// \t\tif (metadata.hasOwnProperty(metadataKey)) {\n// \t\t\treturn metadata[metadataKey];\n// \t\t}\n// \t}\n\n// \treturn null;\n// };\n\nexport const bytesToSize = function (bytes) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  if (bytes === 0) return \"0 Bytes\";\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n};\nexport const linkify = message => {\n  let outputStr = message.replace(phoneNumPattern, \"<a target='blank' rel='noopener noreferrer' href='tel:$&'>$&</a>\");\n  outputStr = outputStr.replace(emailPattern, \"<a target='blank' rel='noopener noreferrer' href='mailto:$&'>$&</a>\");\n  const results = outputStr.match(urlPattern);\n  results && results.forEach(url => {\n    url = url.trim();\n    let normalizedURL = url;\n    if (!url.startsWith(\"http\")) {\n      normalizedURL = `//${url}`;\n    }\n    outputStr = outputStr.replace(url, `<a target='blank' rel='noopener noreferrer' href=\"${normalizedURL}\">${url}</a>`);\n  });\n  return outputStr;\n};\nexport const getCometChatMessage = messageObject => {\n  if (messageObject.category === CometChatMessageCategories.custom) {\n    return new CometChat.CustomMessage(messageObject);\n  } else if (messageObject.category === CometChatMessageCategories.message && messageObject.type === CometChatMessageTypes.text) {\n    const newMessageObject = new CometChat.TextMessage(messageObject);\n    return newMessageObject;\n  } else {\n    return new CometChat.MediaMessage(messageObject);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"ID\");","map":{"version":3,"names":["CometChat","CometChatMessageCategories","CometChatMessageTypes","wordBoundary","start","end","emailPattern","RegExp","urlPattern","phoneNumPattern","ID","Math","random","toString","substr","getUnixTimestamp","round","Date","getExtensionsData","message","extensionKey","hasOwnProperty","metadata","injectedObject","extensionsObject","getMetadataByKey","metadataKey","bytesToSize","bytes","decimals","k","dm","sizes","i","floor","log","parseFloat","pow","toFixed","linkify","outputStr","replace","results","match","forEach","url","trim","normalizedURL","startsWith","getCometChatMessage","messageObject","category","custom","CustomMessage","type","text","newMessageObject","TextMessage","MediaMessage"],"sources":["/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Messages/CometChatMessageHelper/index.js"],"sourcesContent":["import { CometChat } from \"@cometchat-pro/chat\";\nimport { CometChatMessageCategories, CometChatMessageTypes } from \"..\";\n\nconst wordBoundary = {\n  start: `(?:^|:|;|'|\"|,|{|}|\\\\.|\\\\s|\\\\!|\\\\?|\\\\(|\\\\)|\\\\[|\\\\]|\\\\*)`,\n  end: `(?=$|:|;|'|\"|,|{|}|\\\\.|\\\\s|\\\\!|\\\\?|\\\\(|\\\\)|\\\\[|\\\\]|\\\\*)`,\n};\n\nconst emailPattern = new RegExp(\n  wordBoundary.start +\n    `[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,6}` +\n    wordBoundary.end,\n  \"gi\"\n);\nconst urlPattern = new RegExp(\n  wordBoundary.start +\n    `((https?://|www\\\\.|pic\\\\.)[-\\\\w;/?:@&=+$\\\\|\\\\_.!~*\\\\|'()\\\\[\\\\]%#,☺]+[\\\\w/#](\\\\(\\\\))?)` +\n    wordBoundary.end,\n  \"gi\"\n);\nconst phoneNumPattern = new RegExp(\n  wordBoundary.start +\n    `(?:\\\\+?(\\\\d{1,3}))?([-. (]*(\\\\d{3})[-. )]*)?((\\\\d{3})[-. ]*(\\\\d{2,4})(?:[-.x ]*(\\\\d+))?)` +\n    wordBoundary.end,\n  \"gi\"\n);\n\nexport const ID = () => {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return \"_\" + Math.random().toString(36).substr(2, 9);\n};\n\nexport const getUnixTimestamp = () => {\n  return Math.round(+new Date() / 1000);\n};\n\nexport const getExtensionsData = (message, extensionKey) => {\n  if (message?.hasOwnProperty(\"metadata\")) {\n    const metadata = message.metadata;\n    const injectedObject = metadata[\"@injected\"];\n    if (injectedObject && injectedObject.hasOwnProperty(\"extensions\")) {\n      const extensionsObject = injectedObject[\"extensions\"];\n      if (extensionsObject && extensionsObject.hasOwnProperty(extensionKey)) {\n        return extensionsObject[extensionKey];\n      }\n    }\n  }\n\n  return null;\n};\n\nexport const getMetadataByKey = (message, metadataKey) => {\n  if (message.hasOwnProperty(\"metadata\")) {\n    const metadata = message[\"metadata\"];\n    if (metadata.hasOwnProperty(metadataKey)) {\n      return metadata[metadataKey];\n    }\n  }\n\n  return null;\n};\n\n// export const getFileMessageMetadata = (message, metadataKey) => {\n\n// \tif (message.hasOwnProperty(\"metadata\")) {\n// \t\tconst metadata = message[\"metadata\"];\n// \t\tif (metadata.hasOwnProperty(metadataKey)) {\n// \t\t\treturn metadata[metadataKey];\n// \t\t}\n// \t}\n\n// \treturn null;\n// };\n\nexport const bytesToSize = (bytes, decimals = 2) => {\n  if (bytes === 0) return \"0 Bytes\";\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n};\n\nexport const linkify = (message) => {\n  let outputStr = message.replace(\n    phoneNumPattern,\n    \"<a target='blank' rel='noopener noreferrer' href='tel:$&'>$&</a>\"\n  );\n  outputStr = outputStr.replace(\n    emailPattern,\n    \"<a target='blank' rel='noopener noreferrer' href='mailto:$&'>$&</a>\"\n  );\n\n  const results = outputStr.match(urlPattern);\n\n  results &&\n    results.forEach((url) => {\n      url = url.trim();\n      let normalizedURL = url;\n      if (!url.startsWith(\"http\")) {\n        normalizedURL = `//${url}`;\n      }\n      outputStr = outputStr.replace(\n        url,\n        `<a target='blank' rel='noopener noreferrer' href=\"${normalizedURL}\">${url}</a>`\n      );\n    });\n\n  return outputStr;\n};\n\nexport const getCometChatMessage = (messageObject) => {\n  if (messageObject.category === CometChatMessageCategories.custom) {\n    return new CometChat.CustomMessage(messageObject);\n  } else if (\n    messageObject.category === CometChatMessageCategories.message &&\n    messageObject.type === CometChatMessageTypes.text\n  ) {\n    const newMessageObject = new CometChat.TextMessage(messageObject);\n    return newMessageObject;\n  } else {\n    return new CometChat.MediaMessage(messageObject);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
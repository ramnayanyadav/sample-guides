{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { ReceiverTypeConstants, localize } from \"../..\";\nimport { MessageListManager } from \"./controller\";\nimport { getDefaultTypes } from \"../CometChatMessageTemplate\";\nexport const fetchMessages = MessageListManager => {\n  return new Promise((resolve, reject) => {\n    MessageListManager.fetchPreviousMessages().then(messageList => resolve(messageList)).catch(error => reject(error));\n  });\n};\nexport const Hooks = (limit, user, group, excludeMessageTypes, onlyUnread, hideDeletedMessages, hideMessagesFromBlockedUsers, tags, messageTypes, loggedInUserRef, messageList, setMessageList, setDecoratorMessage, messageHandler, messageListCallback, messageTypesRef, messageCategoryRef, messageListManagerRef, localize, errorHandler, chatWithRef, chatWithTypeRef, setMessageCount, setnewMessage) => {\n  _s();\n  React.useEffect(() => {\n    //fetching logged in user\n\n    CometChat.getLoggedinUser().then(user => {\n      var _messageListManagerRe;\n      loggedInUserRef.current = {\n        ...user\n      };\n\n      // \t// Setting MessageList ManagerRef if messageTypes is supplied by the user\n      if (messageTypes) {\n        if (messageTypes.length === 0) {\n          return messageCategoryRef.current = [], messageTypesRef.current = [], setDecoratorMessage(localize(\"NO_MESSAGE_TYPE_SET\"));\n        } else {\n          messageTypesRef.current = messageTypes.map(value => {\n            return value.type;\n          });\n          messageCategoryRef.current = [...new Set(messageTypes.map(value => {\n            return value.category;\n          }))];\n          if (excludeMessageTypes && excludeMessageTypes.length) {\n            messageTypesRef.current.filter(val => !(excludeMessageTypes !== null && excludeMessageTypes !== void 0 && excludeMessageTypes.includes(val)));\n          }\n        }\n      }\n      // Setting MessageList ManagerRef by default\n      else {\n        const messageTemplateObject = getDefaultTypes();\n        messageTypesRef.current = messageTemplateObject.map(value => {\n          return value.type;\n        });\n        messageCategoryRef.current = [...new Set(messageTemplateObject.map(value => {\n          return value.category;\n        }))];\n        if (excludeMessageTypes && excludeMessageTypes.length) {\n          messageTypesRef.current = messageTypesRef.current.filter(val => !(excludeMessageTypes !== null && excludeMessageTypes !== void 0 && excludeMessageTypes.includes(val)));\n        }\n      }\n      messageListManagerRef.current = new MessageListManager(limit, user, group, onlyUnread, hideDeletedMessages, hideMessagesFromBlockedUsers, tags, messageTypesRef.current, messageCategoryRef.current);\n      messageListManagerRef === null || messageListManagerRef === void 0 ? void 0 : (_messageListManagerRe = messageListManagerRef.current) === null || _messageListManagerRe === void 0 ? void 0 : _messageListManagerRe.attachListeners(messageListCallback);\n      setMessageList([]);\n\n      // Fetch MessageList\n      fetchMessages(messageListManagerRef === null || messageListManagerRef === void 0 ? void 0 : messageListManagerRef.current).then(messages => {\n        if (messageList.length === 0 && messages.length === 0) {\n          setDecoratorMessage(localize(\"NO_MESSAGES_FOUND\"));\n        } else {\n          setMessageCount(messages.length);\n          setMessageList(messages);\n          setDecoratorMessage(\"\");\n          messageHandler(messages, true);\n        }\n      }).catch(error => {\n        errorHandler(error);\n        setDecoratorMessage(localize(\"SOMETHING_WRONG\"));\n      });\n    }).catch(error => {\n      errorHandler(error);\n      setDecoratorMessage(localize(\"SOMETHING_WRONG\"));\n    });\n  }, []);\n\n  // Update MessageList on change of props\n  React.useEffect(() => {\n    setnewMessage([]);\n    if (messageTypes) {\n      if (messageTypes.length === 0) {\n        return messageCategoryRef.current = [], messageTypesRef.current = [], setDecoratorMessage(localize(\"NO_MESSAGE_TYPE_SET\"));\n      } else {\n        messageTypesRef.current = messageTypes.map(value => {\n          return value.type;\n        });\n        messageCategoryRef.current = [...new Set(messageTypes.map(value => {\n          return value.category;\n        }))];\n        if (excludeMessageTypes && excludeMessageTypes.length) {\n          messageTypesRef.current = messageTypesRef.current.filter(val => !(excludeMessageTypes !== null && excludeMessageTypes !== void 0 && excludeMessageTypes.includes(val)));\n        }\n      }\n    }\n    messageListManagerRef.current = new MessageListManager(limit, user, group, onlyUnread, hideDeletedMessages, hideMessagesFromBlockedUsers, tags, messageTypesRef.current, messageCategoryRef.current);\n    setMessageList([]);\n    fetchMessages(messageListManagerRef === null || messageListManagerRef === void 0 ? void 0 : messageListManagerRef.current).then(messages => {\n      if (messageList.length === 0 && messages.length === 0) {\n        setDecoratorMessage(localize(\"NO_MESSAGES_FOUND\"));\n      } else {\n        setMessageCount(messages.length);\n        setMessageList(messages);\n        setDecoratorMessage(\"\");\n      }\n      messageHandler(messages, true);\n    }).catch(error => {\n      errorHandler(error);\n      setDecoratorMessage(localize(\"SOMETHING_WRONG\"));\n    });\n    return () => {\n      setMessageList([]);\n      if (messageListManagerRef && messageListManagerRef.current && typeof messageListManagerRef.current.removeListeners === \"function\") {\n        var _messageListManagerRe2;\n        (_messageListManagerRe2 = messageListManagerRef.current) === null || _messageListManagerRe2 === void 0 ? void 0 : _messageListManagerRe2.removeListeners();\n      }\n    };\n  }, [limit, tags, onlyUnread, user, group, messageTypes, hideDeletedMessages, hideMessagesFromBlockedUsers]);\n\n  //set receiver and receiver type\n  React.useEffect(() => {\n    //set receiver and receiver type\n    if (user && user.uid) {\n      chatWithTypeRef.current = ReceiverTypeConstants.user;\n      chatWithRef.current = user;\n    } else if (group && group.guid) {\n      chatWithTypeRef.current = ReceiverTypeConstants.group;\n      chatWithRef.current = group;\n    }\n  }, []);\n\n  //update receiver and receiver type\n  React.useEffect(() => {\n    if (user && user.uid) {\n      chatWithTypeRef.current = ReceiverTypeConstants.user;\n      chatWithRef.current = user;\n    } else if (group && group.guid) {\n      chatWithTypeRef.current = ReceiverTypeConstants.group;\n      chatWithRef.current = group;\n    }\n  }, [user, group, chatWithTypeRef, chatWithRef]);\n};\n_s(Hooks, \"0cIHaRPT5AsNp+tu70IQfhS7pBY=\");\n_c = Hooks;\nvar _c;\n$RefreshReg$(_c, \"Hooks\");","map":{"version":3,"names":["React","CometChat","ReceiverTypeConstants","localize","MessageListManager","getDefaultTypes","fetchMessages","Promise","resolve","reject","fetchPreviousMessages","then","messageList","catch","error","Hooks","limit","user","group","excludeMessageTypes","onlyUnread","hideDeletedMessages","hideMessagesFromBlockedUsers","tags","messageTypes","loggedInUserRef","setMessageList","setDecoratorMessage","messageHandler","messageListCallback","messageTypesRef","messageCategoryRef","messageListManagerRef","errorHandler","chatWithRef","chatWithTypeRef","setMessageCount","setnewMessage","useEffect","getLoggedinUser","current","length","map","value","type","Set","category","filter","val","includes","messageTemplateObject","attachListeners","messages","removeListeners","uid","guid"],"sources":["/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Messages/CometChatMessageList/hooks.js"],"sourcesContent":["import React from \"react\";\nimport { CometChat } from \"@cometchat-pro/chat\";\nimport { ReceiverTypeConstants, localize } from \"../..\";\nimport { MessageListManager } from \"./controller\";\nimport { getDefaultTypes } from \"../CometChatMessageTemplate\";\n\nexport const fetchMessages = (MessageListManager) => {\n  return new Promise((resolve, reject) => {\n    MessageListManager.fetchPreviousMessages()\n      .then((messageList) => resolve(messageList))\n      .catch((error) => reject(error));\n  });\n};\n\nexport const Hooks = (\n  limit,\n  user,\n  group,\n  excludeMessageTypes,\n  onlyUnread,\n  hideDeletedMessages,\n  hideMessagesFromBlockedUsers,\n  tags,\n  messageTypes,\n  loggedInUserRef,\n  messageList,\n  setMessageList,\n  setDecoratorMessage,\n  messageHandler,\n  messageListCallback,\n  messageTypesRef,\n  messageCategoryRef,\n  messageListManagerRef,\n  localize,\n  errorHandler,\n  chatWithRef,\n  chatWithTypeRef,\n  setMessageCount,\n  setnewMessage\n) => {\n  React.useEffect(() => {\n    //fetching logged in user\n\n    CometChat.getLoggedinUser()\n      .then((user) => {\n        loggedInUserRef.current = { ...user };\n\n        // \t// Setting MessageList ManagerRef if messageTypes is supplied by the user\n        if (messageTypes) {\n          if (messageTypes.length === 0) {\n            return (\n              (messageCategoryRef.current = []),\n              (messageTypesRef.current = []),\n              setDecoratorMessage(localize(\"NO_MESSAGE_TYPE_SET\"))\n            );\n          } else {\n            messageTypesRef.current = messageTypes.map((value) => {\n              return value.type;\n            });\n            messageCategoryRef.current = [\n              ...new Set(\n                messageTypes.map((value) => {\n                  return value.category;\n                })\n              ),\n            ];\n            if (excludeMessageTypes && excludeMessageTypes.length) {\n              messageTypesRef.current.filter(\n                (val) => !excludeMessageTypes?.includes(val)\n              );\n            }\n          }\n        }\n        // Setting MessageList ManagerRef by default\n        else {\n          const messageTemplateObject = getDefaultTypes();\n          messageTypesRef.current = messageTemplateObject.map((value) => {\n            return value.type;\n          });\n          messageCategoryRef.current = [\n            ...new Set(\n              messageTemplateObject.map((value) => {\n                return value.category;\n              })\n            ),\n          ];\n          if (excludeMessageTypes && excludeMessageTypes.length) {\n            messageTypesRef.current = messageTypesRef.current.filter(\n              (val) => !excludeMessageTypes?.includes(val)\n            );\n          }\n        }\n\n        messageListManagerRef.current = new MessageListManager(\n          limit,\n          user,\n          group,\n          onlyUnread,\n          hideDeletedMessages,\n          hideMessagesFromBlockedUsers,\n          tags,\n          messageTypesRef.current,\n          messageCategoryRef.current\n        );\n\n        messageListManagerRef?.current?.attachListeners(messageListCallback);\n        setMessageList([]);\n\n        // Fetch MessageList\n        fetchMessages(messageListManagerRef?.current)\n          .then((messages) => {\n            if (messageList.length === 0 && messages.length === 0) {\n              setDecoratorMessage(localize(\"NO_MESSAGES_FOUND\"));\n            } else {\n              setMessageCount(messages.length);\n              setMessageList(messages);\n              setDecoratorMessage(\"\");\n              messageHandler(messages, true);\n            }\n          })\n          .catch((error) => {\n            errorHandler(error);\n            setDecoratorMessage(localize(\"SOMETHING_WRONG\"));\n          });\n      })\n      .catch((error) => {\n        errorHandler(error);\n\n        setDecoratorMessage(localize(\"SOMETHING_WRONG\"));\n      });\n  }, []);\n\n  // Update MessageList on change of props\n  React.useEffect(() => {\n    setnewMessage([]);\n    if (messageTypes) {\n      if (messageTypes.length === 0) {\n        return (\n          (messageCategoryRef.current = []),\n          (messageTypesRef.current = []),\n          setDecoratorMessage(localize(\"NO_MESSAGE_TYPE_SET\"))\n        );\n      } else {\n        messageTypesRef.current = messageTypes.map((value) => {\n          return value.type;\n        });\n        messageCategoryRef.current = [\n          ...new Set(\n            messageTypes.map((value) => {\n              return value.category;\n            })\n          ),\n        ];\n        if (excludeMessageTypes && excludeMessageTypes.length) {\n          messageTypesRef.current = messageTypesRef.current.filter(\n            (val) => !excludeMessageTypes?.includes(val)\n          );\n        }\n      }\n    }\n\n    messageListManagerRef.current = new MessageListManager(\n      limit,\n      user,\n      group,\n      onlyUnread,\n      hideDeletedMessages,\n      hideMessagesFromBlockedUsers,\n      tags,\n      messageTypesRef.current,\n      messageCategoryRef.current\n    );\n\n    setMessageList([]);\n\n    fetchMessages(messageListManagerRef?.current)\n      .then((messages) => {\n        if (messageList.length === 0 && messages.length === 0) {\n          setDecoratorMessage(localize(\"NO_MESSAGES_FOUND\"));\n        } else {\n          setMessageCount(messages.length);\n          setMessageList(messages);\n          setDecoratorMessage(\"\");\n        }\n        messageHandler(messages, true);\n      })\n      .catch((error) => {\n        errorHandler(error);\n\n        setDecoratorMessage(localize(\"SOMETHING_WRONG\"));\n      });\n\n    return () => {\n      setMessageList([])\n      if (\n        messageListManagerRef &&\n        messageListManagerRef.current &&\n        typeof messageListManagerRef.current.removeListeners === \"function\"\n      ) {\n        messageListManagerRef.current?.removeListeners();\n      }\n    };\n  }, [\n    limit,\n    tags,\n    onlyUnread,\n    user,\n    group,\n    messageTypes,\n    hideDeletedMessages,\n    hideMessagesFromBlockedUsers,\n  ]);\n\n  //set receiver and receiver type\n  React.useEffect(() => {\n    //set receiver and receiver type\n    if (user && user.uid) {\n      chatWithTypeRef.current = ReceiverTypeConstants.user;\n      chatWithRef.current = user;\n    } else if (group && group.guid) {\n      chatWithTypeRef.current = ReceiverTypeConstants.group;\n      chatWithRef.current = group;\n    }\n  }, []);\n\n  //update receiver and receiver type\n  React.useEffect(() => {\n    if (user && user.uid) {\n      chatWithTypeRef.current = ReceiverTypeConstants.user;\n      chatWithRef.current = user;\n    } else if (group && group.guid) {\n      chatWithTypeRef.current = ReceiverTypeConstants.group;\n      chatWithRef.current = group;\n    }\n  }, [user, group, chatWithTypeRef, chatWithRef]);\n\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,qBAAqB,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,kBAAkB,QAAQ,cAAc;AACjD,SAASC,eAAe,QAAQ,6BAA6B;AAE7D,OAAO,MAAMC,aAAa,GAAIF,kBAAkB,IAAK;EACnD,OAAO,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCL,kBAAkB,CAACM,qBAAqB,EAAE,CACvCC,IAAI,CAAEC,WAAW,IAAKJ,OAAO,CAACI,WAAW,CAAC,CAAC,CAC3CC,KAAK,CAAEC,KAAK,IAAKL,MAAM,CAACK,KAAK,CAAC,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,CACnBC,KAAK,EACLC,IAAI,EACJC,KAAK,EACLC,mBAAmB,EACnBC,UAAU,EACVC,mBAAmB,EACnBC,4BAA4B,EAC5BC,IAAI,EACJC,YAAY,EACZC,eAAe,EACfb,WAAW,EACXc,cAAc,EACdC,mBAAmB,EACnBC,cAAc,EACdC,mBAAmB,EACnBC,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,EACrB7B,QAAQ,EACR8B,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,eAAe,EACfC,aAAa,KACV;EAAA;EACHrC,KAAK,CAACsC,SAAS,CAAC,MAAM;IACpB;;IAEArC,SAAS,CAACsC,eAAe,EAAE,CACxB5B,IAAI,CAAEM,IAAI,IAAK;MAAA;MACdQ,eAAe,CAACe,OAAO,GAAG;QAAE,GAAGvB;MAAK,CAAC;;MAErC;MACA,IAAIO,YAAY,EAAE;QAChB,IAAIA,YAAY,CAACiB,MAAM,KAAK,CAAC,EAAE;UAC7B,OACGV,kBAAkB,CAACS,OAAO,GAAG,EAAE,EAC/BV,eAAe,CAACU,OAAO,GAAG,EAAE,EAC7Bb,mBAAmB,CAACxB,QAAQ,CAAC,qBAAqB,CAAC,CAAC;QAExD,CAAC,MAAM;UACL2B,eAAe,CAACU,OAAO,GAAGhB,YAAY,CAACkB,GAAG,CAAEC,KAAK,IAAK;YACpD,OAAOA,KAAK,CAACC,IAAI;UACnB,CAAC,CAAC;UACFb,kBAAkB,CAACS,OAAO,GAAG,CAC3B,GAAG,IAAIK,GAAG,CACRrB,YAAY,CAACkB,GAAG,CAAEC,KAAK,IAAK;YAC1B,OAAOA,KAAK,CAACG,QAAQ;UACvB,CAAC,CAAC,CACH,CACF;UACD,IAAI3B,mBAAmB,IAAIA,mBAAmB,CAACsB,MAAM,EAAE;YACrDX,eAAe,CAACU,OAAO,CAACO,MAAM,CAC3BC,GAAG,IAAK,EAAC7B,mBAAmB,aAAnBA,mBAAmB,eAAnBA,mBAAmB,CAAE8B,QAAQ,CAACD,GAAG,CAAC,EAC7C;UACH;QACF;MACF;MACA;MAAA,KACK;QACH,MAAME,qBAAqB,GAAG7C,eAAe,EAAE;QAC/CyB,eAAe,CAACU,OAAO,GAAGU,qBAAqB,CAACR,GAAG,CAAEC,KAAK,IAAK;UAC7D,OAAOA,KAAK,CAACC,IAAI;QACnB,CAAC,CAAC;QACFb,kBAAkB,CAACS,OAAO,GAAG,CAC3B,GAAG,IAAIK,GAAG,CACRK,qBAAqB,CAACR,GAAG,CAAEC,KAAK,IAAK;UACnC,OAAOA,KAAK,CAACG,QAAQ;QACvB,CAAC,CAAC,CACH,CACF;QACD,IAAI3B,mBAAmB,IAAIA,mBAAmB,CAACsB,MAAM,EAAE;UACrDX,eAAe,CAACU,OAAO,GAAGV,eAAe,CAACU,OAAO,CAACO,MAAM,CACrDC,GAAG,IAAK,EAAC7B,mBAAmB,aAAnBA,mBAAmB,eAAnBA,mBAAmB,CAAE8B,QAAQ,CAACD,GAAG,CAAC,EAC7C;QACH;MACF;MAEAhB,qBAAqB,CAACQ,OAAO,GAAG,IAAIpC,kBAAkB,CACpDY,KAAK,EACLC,IAAI,EACJC,KAAK,EACLE,UAAU,EACVC,mBAAmB,EACnBC,4BAA4B,EAC5BC,IAAI,EACJO,eAAe,CAACU,OAAO,EACvBT,kBAAkB,CAACS,OAAO,CAC3B;MAEDR,qBAAqB,aAArBA,qBAAqB,gDAArBA,qBAAqB,CAAEQ,OAAO,0DAA9B,sBAAgCW,eAAe,CAACtB,mBAAmB,CAAC;MACpEH,cAAc,CAAC,EAAE,CAAC;;MAElB;MACApB,aAAa,CAAC0B,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEQ,OAAO,CAAC,CAC1C7B,IAAI,CAAEyC,QAAQ,IAAK;QAClB,IAAIxC,WAAW,CAAC6B,MAAM,KAAK,CAAC,IAAIW,QAAQ,CAACX,MAAM,KAAK,CAAC,EAAE;UACrDd,mBAAmB,CAACxB,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QACpD,CAAC,MAAM;UACLiC,eAAe,CAACgB,QAAQ,CAACX,MAAM,CAAC;UAChCf,cAAc,CAAC0B,QAAQ,CAAC;UACxBzB,mBAAmB,CAAC,EAAE,CAAC;UACvBC,cAAc,CAACwB,QAAQ,EAAE,IAAI,CAAC;QAChC;MACF,CAAC,CAAC,CACDvC,KAAK,CAAEC,KAAK,IAAK;QAChBmB,YAAY,CAACnB,KAAK,CAAC;QACnBa,mBAAmB,CAACxB,QAAQ,CAAC,iBAAiB,CAAC,CAAC;MAClD,CAAC,CAAC;IACN,CAAC,CAAC,CACDU,KAAK,CAAEC,KAAK,IAAK;MAChBmB,YAAY,CAACnB,KAAK,CAAC;MAEnBa,mBAAmB,CAACxB,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IAClD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAH,KAAK,CAACsC,SAAS,CAAC,MAAM;IACpBD,aAAa,CAAC,EAAE,CAAC;IACjB,IAAIb,YAAY,EAAE;MAChB,IAAIA,YAAY,CAACiB,MAAM,KAAK,CAAC,EAAE;QAC7B,OACGV,kBAAkB,CAACS,OAAO,GAAG,EAAE,EAC/BV,eAAe,CAACU,OAAO,GAAG,EAAE,EAC7Bb,mBAAmB,CAACxB,QAAQ,CAAC,qBAAqB,CAAC,CAAC;MAExD,CAAC,MAAM;QACL2B,eAAe,CAACU,OAAO,GAAGhB,YAAY,CAACkB,GAAG,CAAEC,KAAK,IAAK;UACpD,OAAOA,KAAK,CAACC,IAAI;QACnB,CAAC,CAAC;QACFb,kBAAkB,CAACS,OAAO,GAAG,CAC3B,GAAG,IAAIK,GAAG,CACRrB,YAAY,CAACkB,GAAG,CAAEC,KAAK,IAAK;UAC1B,OAAOA,KAAK,CAACG,QAAQ;QACvB,CAAC,CAAC,CACH,CACF;QACD,IAAI3B,mBAAmB,IAAIA,mBAAmB,CAACsB,MAAM,EAAE;UACrDX,eAAe,CAACU,OAAO,GAAGV,eAAe,CAACU,OAAO,CAACO,MAAM,CACrDC,GAAG,IAAK,EAAC7B,mBAAmB,aAAnBA,mBAAmB,eAAnBA,mBAAmB,CAAE8B,QAAQ,CAACD,GAAG,CAAC,EAC7C;QACH;MACF;IACF;IAEAhB,qBAAqB,CAACQ,OAAO,GAAG,IAAIpC,kBAAkB,CACpDY,KAAK,EACLC,IAAI,EACJC,KAAK,EACLE,UAAU,EACVC,mBAAmB,EACnBC,4BAA4B,EAC5BC,IAAI,EACJO,eAAe,CAACU,OAAO,EACvBT,kBAAkB,CAACS,OAAO,CAC3B;IAEDd,cAAc,CAAC,EAAE,CAAC;IAElBpB,aAAa,CAAC0B,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEQ,OAAO,CAAC,CAC1C7B,IAAI,CAAEyC,QAAQ,IAAK;MAClB,IAAIxC,WAAW,CAAC6B,MAAM,KAAK,CAAC,IAAIW,QAAQ,CAACX,MAAM,KAAK,CAAC,EAAE;QACrDd,mBAAmB,CAACxB,QAAQ,CAAC,mBAAmB,CAAC,CAAC;MACpD,CAAC,MAAM;QACLiC,eAAe,CAACgB,QAAQ,CAACX,MAAM,CAAC;QAChCf,cAAc,CAAC0B,QAAQ,CAAC;QACxBzB,mBAAmB,CAAC,EAAE,CAAC;MACzB;MACAC,cAAc,CAACwB,QAAQ,EAAE,IAAI,CAAC;IAChC,CAAC,CAAC,CACDvC,KAAK,CAAEC,KAAK,IAAK;MAChBmB,YAAY,CAACnB,KAAK,CAAC;MAEnBa,mBAAmB,CAACxB,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IAClD,CAAC,CAAC;IAEJ,OAAO,MAAM;MACXuB,cAAc,CAAC,EAAE,CAAC;MAClB,IACEM,qBAAqB,IACrBA,qBAAqB,CAACQ,OAAO,IAC7B,OAAOR,qBAAqB,CAACQ,OAAO,CAACa,eAAe,KAAK,UAAU,EACnE;QAAA;QACA,0BAAArB,qBAAqB,CAACQ,OAAO,2DAA7B,uBAA+Ba,eAAe,EAAE;MAClD;IACF,CAAC;EACH,CAAC,EAAE,CACDrC,KAAK,EACLO,IAAI,EACJH,UAAU,EACVH,IAAI,EACJC,KAAK,EACLM,YAAY,EACZH,mBAAmB,EACnBC,4BAA4B,CAC7B,CAAC;;EAEF;EACAtB,KAAK,CAACsC,SAAS,CAAC,MAAM;IACpB;IACA,IAAIrB,IAAI,IAAIA,IAAI,CAACqC,GAAG,EAAE;MACpBnB,eAAe,CAACK,OAAO,GAAGtC,qBAAqB,CAACe,IAAI;MACpDiB,WAAW,CAACM,OAAO,GAAGvB,IAAI;IAC5B,CAAC,MAAM,IAAIC,KAAK,IAAIA,KAAK,CAACqC,IAAI,EAAE;MAC9BpB,eAAe,CAACK,OAAO,GAAGtC,qBAAqB,CAACgB,KAAK;MACrDgB,WAAW,CAACM,OAAO,GAAGtB,KAAK;IAC7B;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAlB,KAAK,CAACsC,SAAS,CAAC,MAAM;IACpB,IAAIrB,IAAI,IAAIA,IAAI,CAACqC,GAAG,EAAE;MACpBnB,eAAe,CAACK,OAAO,GAAGtC,qBAAqB,CAACe,IAAI;MACpDiB,WAAW,CAACM,OAAO,GAAGvB,IAAI;IAC5B,CAAC,MAAM,IAAIC,KAAK,IAAIA,KAAK,CAACqC,IAAI,EAAE;MAC9BpB,eAAe,CAACK,OAAO,GAAGtC,qBAAqB,CAACgB,KAAK;MACrDgB,WAAW,CAACM,OAAO,GAAGtB,KAAK;IAC7B;EACF,CAAC,EAAE,CAACD,IAAI,EAAEC,KAAK,EAAEiB,eAAe,EAAED,WAAW,CAAC,CAAC;AAEjD,CAAC;AAAC,GA9NWnB,KAAK;AAAA,KAALA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
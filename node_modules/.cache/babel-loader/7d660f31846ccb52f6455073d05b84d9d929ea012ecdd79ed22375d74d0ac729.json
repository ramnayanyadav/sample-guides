{"ast":null,"code":"var _jsxFileName = \"/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Shared/SecondaryComponents/CometChatDate/index.js\";\nimport React from 'react';\nimport PropTypes from \"prop-types\";\nimport * as styles from \"./style\";\nimport { DateStyles, localize } from \"../../../Shared\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst patterns = {\n  timeFormat: \"timeFormat\",\n  dayDateFormat: \"dayDateFormat\",\n  dayDateTimeFormat: \"dayDateTimeFormat\"\n};\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst weekNames = [\"Sunday\", \"Monday\", \"Tuseday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n/**\n * CometChatDate is a component useful for displaying date/time\n * This component displays the date/time based on pattern parameter.\n *\n * @Version 1.0.0\n * @author CometChat\n *\n */\n/**\n * CometChatDate is a component useful for displaying date/time\n * This component displays the date/time based on pattern parameter.\n *\n * @Version 1.0.0\n * @author CometChat\n *\n */\nconst CometChatDate = props => {\n  let date = new Date(props.timestamp * 1000);\n  const getWeekOfDay = () => {\n    let weekDay = date.getDay();\n    let week = weekNames[weekDay];\n    return week.substring(0, 3);\n  };\n  const getMonthOfDay = () => {\n    let month = date.getMonth();\n    let mnth = monthNames[month];\n    return mnth.substring(0, 3);\n  };\n  const getDateFormat = () => {\n    if (props.pattern === patterns.dayDateFormat) {\n      return date.getDate() + \" \" + getMonthOfDay() + \", \" + date.getFullYear();\n    }\n    let dt = date.getDate();\n    if (dt < 10) {\n      dt = \"0\" + dt;\n    }\n    return dt + \"/\" + (date.getMonth() + 1) + \"/\" + date.getFullYear();\n  };\n  const getMinute = date => {\n    if (date.getMinutes() < 10) {\n      return `0${date.getMinutes()}`;\n    } else return date.getMinutes();\n  };\n  const getTimeFormat = () => {\n    let timeString = date.getHours();\n    let postString = \"AM\";\n    if (timeString > 12) {\n      postString = \"PM\";\n      timeString = parseInt(timeString % 12);\n    }\n    if (timeString < 10) {\n      timeString = `0${timeString}`;\n    }\n    return timeString + \":\" + getMinute(date) + \" \" + postString;\n  };\n  const getDate = () => {\n    const today = new Date();\n    if (today.getMonth() === date.getMonth() && today.getFullYear() === date.getFullYear()) {\n      let diff = today.getDate() - date.getDate();\n      if (diff === 0) {\n        if (props.pattern === patterns.dayDateTimeFormat) {\n          return getTimeFormat();\n        }\n        return localize(\"TODAY\");\n      } else if (diff === 1) {\n        return localize(\"YESTERDAY\");\n      } else if (diff < 7) {\n        return getWeekOfDay();\n      } else {\n        return getDateFormat();\n      }\n    } else {\n      return getDateFormat();\n    }\n  };\n  const getFormattedDate = () => {\n    if (props.customPattern) {\n      return props.customPattern(props.timestamp);\n    } else if (props.pattern && props.pattern != null) {\n      let formattedDate = \"\";\n      switch (props.pattern) {\n        case patterns.timeFormat:\n          formattedDate = getTimeFormat();\n          break;\n        case patterns.dayDateFormat:\n        case patterns.dayDateTimeFormat:\n          formattedDate = getDate();\n          break;\n        default:\n          break;\n      }\n      return formattedDate;\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: styles.textStyle(props),\n    children: getFormattedDate()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 10\n  }, this);\n};\n_c = CometChatDate;\nCometChatDate.defaultProps = {\n  timestamp: 0,\n  pattern: patterns.timeFormat,\n  customPattern: null,\n  style: {\n    textColor: \"rgb(20, 20, 20)\",\n    textFont: \"500 11px Inter,sans-serif\"\n  }\n};\nCometChatDate.propTypes = {\n  /**\n   * Unix epoch time.\n   */\n  timestamp: PropTypes.number,\n  /**\n   * Pattern for Date.\n   * one of\n   * 1. timeFormat: \"hh:mm a\".\n   * 2. dayDateFormat: Today, Yesterday, week-day or \"d MMM, yyyy\".\n   * 3. dayDateTimeFormat: Today, Yesterday, week-day or \"dd/mm/yyyy\".\n   */\n  pattern: PropTypes.oneOf([patterns.timeFormat, patterns.dayDateFormat, patterns.dayDateTimeFormat]),\n  /**\n   * A function with returning string for custom date reprasentation.\n   */\n  customPattern: PropTypes.func,\n  /**\n   * Style\n   */\n  style: PropTypes.object\n};\nexport { CometChatDate };\nvar _c;\n$RefreshReg$(_c, \"CometChatDate\");","map":{"version":3,"names":["React","PropTypes","styles","DateStyles","localize","patterns","timeFormat","dayDateFormat","dayDateTimeFormat","monthNames","weekNames","CometChatDate","props","date","Date","timestamp","getWeekOfDay","weekDay","getDay","week","substring","getMonthOfDay","month","getMonth","mnth","getDateFormat","pattern","getDate","getFullYear","dt","getMinute","getMinutes","getTimeFormat","timeString","getHours","postString","parseInt","today","diff","getFormattedDate","customPattern","formattedDate","textStyle","defaultProps","style","textColor","textFont","propTypes","number","oneOf","func","object"],"sources":["/home/admin1/dev/react/react-sample-guide/sample-react-guides/src/cometchat-pro-react-ui-kit/src/components/Shared/SecondaryComponents/CometChatDate/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport * as styles from \"./style\";\nimport { DateStyles, localize } from \"../../../Shared\";\n\nconst patterns = {\n  timeFormat: \"timeFormat\",\n  dayDateFormat: \"dayDateFormat\",\n  dayDateTimeFormat: \"dayDateTimeFormat\",\n};\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\nconst weekNames = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuseday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\n/**\n * CometChatDate is a component useful for displaying date/time\n * This component displays the date/time based on pattern parameter.\n *\n * @Version 1.0.0\n * @author CometChat\n *\n */\n/**\n * CometChatDate is a component useful for displaying date/time\n * This component displays the date/time based on pattern parameter.\n *\n * @Version 1.0.0\n * @author CometChat\n *\n */\nconst CometChatDate = (props) => {\n  let date = new Date(props.timestamp * 1000);\n\n  const getWeekOfDay = () => {\n    let weekDay = date.getDay();\n    let week = weekNames[weekDay];\n    return week.substring(0, 3);\n  };\n\n  const getMonthOfDay = () => {\n    let month = date.getMonth();\n    let mnth = monthNames[month];\n    return mnth.substring(0, 3);\n  };\n\n  const getDateFormat = () => {\n    if (props.pattern === patterns.dayDateFormat) {\n      return date.getDate() + \" \" + getMonthOfDay() + \", \" + date.getFullYear();\n    }\n    let dt = date.getDate();\n    if (dt < 10) {\n      dt = \"0\" + dt;\n    }\n    return dt + \"/\" + (date.getMonth() + 1) + \"/\" + date.getFullYear();\n  };\n\n  const getMinute = (date) => {\n    if (date.getMinutes() < 10) {\n      return `0${date.getMinutes()}`;\n    } else return date.getMinutes();\n  };\n\n  const getTimeFormat = () => {\n    let timeString = date.getHours();\n    let postString = \"AM\";\n    if (timeString > 12) {\n      postString = \"PM\";\n      timeString = parseInt(timeString % 12);\n    }\n    if (timeString < 10) {\n      timeString = `0${timeString}`;\n    }\n    return timeString + \":\" + getMinute(date) + \" \" + postString;\n  };\n\n  const getDate = () => {\n    const today = new Date();\n    if (\n      today.getMonth() === date.getMonth() &&\n      today.getFullYear() === date.getFullYear()\n    ) {\n      let diff = today.getDate() - date.getDate();\n      if (diff === 0) {\n        if (props.pattern === patterns.dayDateTimeFormat) {\n          return getTimeFormat();\n        }\n        return localize(\"TODAY\");\n      } else if (diff === 1) {\n        return localize(\"YESTERDAY\");\n      } else if (diff < 7) {\n        return getWeekOfDay();\n      } else {\n        return getDateFormat();\n      }\n    } else {\n      return getDateFormat();\n    }\n  };\n\n  const getFormattedDate = () => {\n    if (props.customPattern) {\n      return props.customPattern(props.timestamp);\n    } else if (props.pattern && props.pattern != null) {\n      let formattedDate = \"\";\n      switch (props.pattern) {\n        case patterns.timeFormat:\n          formattedDate = getTimeFormat();\n          break;\n        case patterns.dayDateFormat:\n        case patterns.dayDateTimeFormat:\n          formattedDate = getDate();\n          break;\n        default:\n          break;\n      }\n      return formattedDate;\n    }\n    return null;\n  };\n\n  return <span style={styles.textStyle(props)}>{getFormattedDate()}</span>;\n};\n\nCometChatDate.defaultProps = {\n  timestamp: 0,\n  pattern: patterns.timeFormat,\n  customPattern: null,\n  style: {\n    textColor: \"rgb(20, 20, 20)\",\n    textFont: \"500 11px Inter,sans-serif\",\n  },\n};\n\nCometChatDate.propTypes = {\n  /**\n   * Unix epoch time.\n   */\n  timestamp: PropTypes.number,\n  /**\n   * Pattern for Date.\n   * one of\n   * 1. timeFormat: \"hh:mm a\".\n   * 2. dayDateFormat: Today, Yesterday, week-day or \"d MMM, yyyy\".\n   * 3. dayDateTimeFormat: Today, Yesterday, week-day or \"dd/mm/yyyy\".\n   */\n  pattern: PropTypes.oneOf([\n    patterns.timeFormat,\n    patterns.dayDateFormat,\n    patterns.dayDateTimeFormat,\n  ]),\n  /**\n   * A function with returning string for custom date reprasentation.\n   */\n  customPattern: PropTypes.func,\n  /**\n   * Style\n   */\n  style: PropTypes.object,\n};\n\nexport { CometChatDate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
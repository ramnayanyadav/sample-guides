"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DecoratorMessageStyles = void 0;

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _Shared = require("../../../Shared");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @class DecoratorMessageStyles
 * @param {String} textFont
 * @param {String} textColor
 */
var DecoratorMessageStyles = /*#__PURE__*/function (_BaseStyles) {
  (0, _inherits2.default)(DecoratorMessageStyles, _BaseStyles);

  var _super = _createSuper(DecoratorMessageStyles);

  function DecoratorMessageStyles(_ref) {
    var _this;

    var _ref$textColor = _ref.textColor,
        textColor = _ref$textColor === void 0 ? "" : _ref$textColor,
        _ref$textFont = _ref.textFont,
        textFont = _ref$textFont === void 0 ? "" : _ref$textFont,
        width = _ref.width,
        height = _ref.height,
        background = _ref.background,
        activeBackground = _ref.activeBackground,
        border = _ref.border,
        borderRadius = _ref.borderRadius;
    (0, _classCallCheck2.default)(this, DecoratorMessageStyles);
    _this = _super.call(this, {
      width: width,
      height: height,
      background: background,
      activeBackground: activeBackground,
      border: border,
      borderRadius: borderRadius
    });
    _this.textColor = textColor;
    _this.textFont = textFont;
    return _this;
  }

  return (0, _createClass2.default)(DecoratorMessageStyles);
}(_Shared.BaseStyles);

exports.DecoratorMessageStyles = DecoratorMessageStyles;
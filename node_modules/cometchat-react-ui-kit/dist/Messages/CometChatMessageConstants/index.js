"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "CometChatCustomMessageOptions", {
  enumerable: true,
  get: function get() {
    return _CometChatCustomMessageOptions.CometChatCustomMessageOptions;
  }
});
Object.defineProperty(exports, "CometChatCustomMessageTypes", {
  enumerable: true,
  get: function get() {
    return _CometChatCustomMessageTypes.CometChatCustomMessageTypes;
  }
});
Object.defineProperty(exports, "CometChatMessageCategories", {
  enumerable: true,
  get: function get() {
    return _CometChatMessageCategories.CometChatMessageCategories;
  }
});
Object.defineProperty(exports, "CometChatMessageOptions", {
  enumerable: true,
  get: function get() {
    return _CometChatMessageOptions.CometChatMessageOptions;
  }
});
Object.defineProperty(exports, "CometChatMessageReceiverType", {
  enumerable: true,
  get: function get() {
    return _CometChatMessageReceiverType.CometChatMessageReceiverType;
  }
});
Object.defineProperty(exports, "CometChatMessageTypes", {
  enumerable: true,
  get: function get() {
    return _CometChatMessageTypes.CometChatMessageTypes;
  }
});
exports.urlPattern = exports.phoneNumPattern = exports.messageTimeAlignment = exports.messageStatus = exports.messageConstants = exports.messageBubbleAlignment = exports.messageAlignment = exports.emailPattern = void 0;

var _CometChatMessageCategories = require("./CometChatMessageCategories");

var _CometChatMessageTypes = require("./CometChatMessageTypes");

var _CometChatCustomMessageTypes = require("./CometChatCustomMessageTypes");

var _CometChatCustomMessageOptions = require("./CometChatCustomMessageOptions");

var _CometChatMessageOptions = require("./CometChatMessageOptions");

var _CometChatMessageReceiverType = require("./CometChatMessageReceiverType");

var messageConstants = {
  maximumNumOfMessages: 1000,
  liveReactionTimeout: 1500
};
exports.messageConstants = messageConstants;
var wordBoundary = {
  start: "(?:^|:|;|'|\"|,|{|}|\\.|\\s|\\!|\\?|\\(|\\)|\\[|\\]|\\*)",
  end: "(?=$|:|;|'|\"|,|{|}|\\.|\\s|\\!|\\?|\\(|\\)|\\[|\\]|\\*)"
};
var emailPattern = new RegExp(wordBoundary.start + "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}" + wordBoundary.end, "gi");
exports.emailPattern = emailPattern;
var urlPattern = new RegExp(wordBoundary.start + "((https?://|www\\.|pic\\.)[-\\w;/?:@&=+$\\|\\_.!~*\\|'()\\[\\]%#,\u263A]+[\\w/#](\\(\\))?)" + wordBoundary.end, "gi");
exports.urlPattern = urlPattern;
var phoneNumPattern = new RegExp(wordBoundary.start + "(?:\\+?(\\d{1,3}))?([-. (]*(\\d{3})[-. )]*)?((\\d{3})[-. ]*(\\d{2,4})(?:[-.x ]*(\\d+))?)" + wordBoundary.end, "gi"); // const CONSTANTS = {
// 	MAX_MESSAGE_COUNT: 1000,
// 	LISTENERS: {
// 		TEXT_MESSAGE_RECEIVED: "onTextMessageReceived",
// 		MEDIA_MESSAGE_RECEIVED: "onMediaMessageReceived",
// 		CUSTOM_MESSAGE_RECEIVED: "onCustomMessageReceived",
// 		MESSAGE_DELIVERED: "onMessagesDelivered",
// 		MESSAGE_READ: "onMessagesRead",
// 		MESSAGE_DELETED: "onMessageDeleted",
// 		MESSAGE_EDITED: "onMessageEdited",
// 		GROUP_MEMBER_SCOPE_CHANGED: "onGroupMemberScopeChanged",
// 		GROUP_MEMBER_KICKED: "onGroupMemberKicked",
// 		GROUP_MEMBER_BANNED: "onGroupMemberBanned",
// 		GROUP_MEMBER_UNBANNED: "onGroupMemberUnbanned",
// 		GROUP_MEMBER_ADDED: "onMemberAddedToGroup",
// 		GROUP_MEMBER_LEFT: "onGroupMemberLeft",
// 		GROUP_MEMBER_JOINED: "onGroupMemberJoined",
// 		INCOMING_CALL_RECEIVED: "onIncomingCallReceived",
// 		OUTGOING_CALL_ACCEPTED: "onOutgoingCallAccepted",
// 		OUTGOING_CALL_REJECTED: "onOutgoingCallRejected",
// 		INCOMING_CALL_CANCELLED: "onIncomingCallCancelled",
// 	},
// };

exports.phoneNumPattern = phoneNumPattern;
var messageAlignment = Object.freeze({
  leftAligned: "leftAligned",
  standard: "standard"
});
exports.messageAlignment = messageAlignment;
var messageBubbleAlignment = Object.freeze({
  left: "left",
  right: "right",
  center: "center"
});
exports.messageBubbleAlignment = messageBubbleAlignment;
var messageTimeAlignment = Object.freeze({
  top: "top",
  bottom: "bottom"
});
exports.messageTimeAlignment = messageTimeAlignment;
var messageStatus = Object.freeze({
  inprogress: "inprogress",
  success: "success"
});
exports.messageStatus = messageStatus;
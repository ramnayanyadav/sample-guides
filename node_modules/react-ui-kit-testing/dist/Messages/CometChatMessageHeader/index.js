"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CometChatMessageHeader = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _chat = require("@cometchat-pro/chat");
var _controller = require("./controller");
var _hooks = require("./hooks");
var _ = require("..");
var _Shared = require("../../Shared");
var _2 = require("../..");
var _style = require("./style");
var CometChatMessageHeader = function CometChatMessageHeader(props) {
  /**
   * Destructuring prop
   */
  var theme = props.theme,
    user = props.user,
    group = props.group,
    showBackButton = props.showBackButton;
  var loggedInUser = _react.default.useRef(null);
  var messageHeaderManager = _react.default.useRef(new _controller.MessageHeaderManager());
  //const callbackData = React.useRef(null);
  var callbackDataRef = _react.default.useRef(null);
  var chatWithRef = _react.default.useRef(null);
  var chatWithTypeRef = _react.default.useRef(null);
  var _React$useState = _react.default.useState(""),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    messageHeaderStatus = _React$useState2[0],
    setMessageHeaderStatus = _React$useState2[1];
  var _React$useState3 = _react.default.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    userPresence = _React$useState4[0],
    setUserPresence = _React$useState4[1];
  var _theme = new _Shared.CometChatTheme(theme !== null && theme !== void 0 ? theme : {});
  var messageHeaderCallback = function messageHeaderCallback(listenerName) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    callbackDataRef.current = {
      name: listenerName,
      args: [].concat(args)
    };
    try {
      var _callbackDataRef$curr, _callbackDataRef$curr2;
      var handler = handlers[(_callbackDataRef$curr = callbackDataRef.current) === null || _callbackDataRef$curr === void 0 ? void 0 : _callbackDataRef$curr.name];
      if (handler) return handler.apply(void 0, (0, _toConsumableArray2.default)((_callbackDataRef$curr2 = callbackDataRef.current) === null || _callbackDataRef$curr2 === void 0 ? void 0 : _callbackDataRef$curr2.args));
    } catch (e) {
      throw e;
    }
  };

  /**
   *
   * When a user goes online/ offline
   */
  var handleUsers = function handleUsers(user) {
    var _chatWithRef$current;
    if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === _.CometChatMessageReceiverType.user && (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current = chatWithRef.current) === null || _chatWithRef$current === void 0 ? void 0 : _chatWithRef$current.uid) === user.uid) {
      if (user.status === _2.UserStatusConstants.offline) {
        setMessageHeaderStatus((0, _2.localize)("OFFLINE"));
        setUserPresence(false);
      } else if (user.status === _2.UserStatusConstants.online) {
        setMessageHeaderStatus((0, _2.localize)("ONLINE"));
        setUserPresence(true);
      }
    }
  };
  var handleGroups = function handleGroups(group) {
    var _chatWithRef$current2;
    if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === _.CometChatMessageReceiverType.group && (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current2 = chatWithRef.current) === null || _chatWithRef$current2 === void 0 ? void 0 : _chatWithRef$current2.guid) === group.guid) {
      var membersCount = parseInt(group.membersCount);
      var status = "".concat(membersCount, " ").concat((0, _2.localize)("MEMBERS"));
      setMessageHeaderStatus(status);
    }
  };
  var getBackButtonElem = function getBackButtonElem() {
    if (showBackButton) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "chat__backbutton",
        style: (0, _style.backButtonStyle)(props)
      });
    }
    return null;
  };
  var handleStartTyping = function handleStartTyping(typingIndicator) {
    var _chatWithRef$current3, _chatWithRef$current4;
    if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === _.CometChatMessageReceiverType.group && (chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === typingIndicator.receiverType && (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current3 = chatWithRef.current) === null || _chatWithRef$current3 === void 0 ? void 0 : _chatWithRef$current3.guid) === typingIndicator.receiverId) {
      var typingText = "".concat(typingIndicator.sender.name, " ").concat((0, _2.localize)("IS_TYPING"));
      setMessageHeaderStatus(typingText);
    } else if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === _.CometChatMessageReceiverType.user && (chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === typingIndicator.receiverType && (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current4 = chatWithRef.current) === null || _chatWithRef$current4 === void 0 ? void 0 : _chatWithRef$current4.uid) === typingIndicator.sender.uid) {
      var _typingText = (0, _2.localize)("TYPING");
      setMessageHeaderStatus(_typingText);
    }
  };
  var handleEndTyping = function handleEndTyping(typingIndicator) {
    var _chatWithRef$current5, _chatWithRef$current7;
    if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === _.CometChatMessageReceiverType.group && (chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === typingIndicator.receiverType && (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current5 = chatWithRef.current) === null || _chatWithRef$current5 === void 0 ? void 0 : _chatWithRef$current5.guid) === typingIndicator.receiverId) {
      var _chatWithRef$current6;
      var status = "".concat(chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current6 = chatWithRef.current) === null || _chatWithRef$current6 === void 0 ? void 0 : _chatWithRef$current6.membersCount, " ").concat((0, _2.localize)("MEMBERS"));
      setMessageHeaderStatus(status);
    } else if ((chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === _.CometChatMessageReceiverType.user && (chatWithTypeRef === null || chatWithTypeRef === void 0 ? void 0 : chatWithTypeRef.current) === typingIndicator.receiverType && (chatWithRef === null || chatWithRef === void 0 ? void 0 : (_chatWithRef$current7 = chatWithRef.current) === null || _chatWithRef$current7 === void 0 ? void 0 : _chatWithRef$current7.uid) === typingIndicator.sender.uid) {
      if (userPresence) {
        setMessageHeaderStatus((0, _2.localize)("ONLINE"));
        setUserPresence(true);
      } else {
        setMessageHeaderStatus((0, _2.localize)("OFFLINE"));
        setUserPresence(false);
      }
    }
  };
  var handlers = {
    onUserOnline: handleUsers,
    onUserOffline: handleUsers,
    onMemberAddedToGroup: handleGroups,
    onGroupMemberJoined: handleGroups,
    onGroupMemberKicked: handleGroups,
    onGroupMemberLeft: handleGroups,
    onGroupMemberBanned: handleGroups,
    onTypingStarted: handleStartTyping,
    onTypingEnded: handleEndTyping
  };
  var errorHandler = function errorHandler(errorCode) {
    _.CometChatMessageEvents.emit(_.CometChatMessageEvents.onMessageError, errorCode);
  };

  /** data item configuration */
  var dataItemConfig = new _Shared.DataItemConfiguration({});
  var _inputData = dataItemConfig.inputData;
  var _isActive = false;
  //const _options = dataItemConfig.options;
  //const _tail = dataItemConfig.tail;

  (0, _hooks.Hooks)(props, loggedInUser, chatWithRef, chatWithTypeRef, setMessageHeaderStatus, setUserPresence, messageHeaderManager, messageHeaderCallback, errorHandler);
  return /*#__PURE__*/_react.default.createElement("div", {
    style: (0, _style.chatHeaderStyle)(props, _theme),
    className: "chat__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: (0, _style.chatDetailStyle)(props),
    className: "chat__details"
  }, getBackButtonElem(), /*#__PURE__*/_react.default.createElement("div", {
    style: (0, _style.chatThumbnailStyle)(props)
  }, /*#__PURE__*/_react.default.createElement(_Shared.CometChatDataItem, {
    inputData: {
      id: "",
      thumbnail: true,
      status: userPresence,
      title: true,
      subtitle: function subtitle() {
        return messageHeaderStatus;
      }
    } || _inputData,
    style: (0, _style.dataItemStyle)(props, _theme),
    user: user,
    group: group,
    theme: _theme
    // options={props.options || _options}
    // isActive={_isActive}
  }))));
};
exports.CometChatMessageHeader = CometChatMessageHeader;
CometChatMessageHeader.defaultProps = {
  user: null,
  group: null,
  style: {
    width: "",
    height: "",
    border: "",
    borderRadius: "",
    background: "",
    backButtonIconTint: ""
  },
  showBackButton: false,
  backButtonIconURL: "",
  //options: [],
  enableTypingIndicator: false,
  dataItemConfiguration: null
};
CometChatMessageHeader.propTypes = {
  user: _propTypes.default.object,
  group: _propTypes.default.object,
  showBackButton: _propTypes.default.bool,
  style: _propTypes.default.object,
  //options: PropTypes.array,
  enableTypingIndicator: _propTypes.default.bool,
  dataItemConfiguration: _propTypes.default.object
};
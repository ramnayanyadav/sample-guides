"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pollPercentStyle = exports.pollOptionTitleStyle = exports.pollOptionPercentTextStyle = exports.pollAnswerStyle = exports.checkIconStyle = exports.answerWrapperStyle = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _ = require("../../../");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pollAnswerStyle = function pollAnswerStyle(props, theme) {
  return {
    background: "".concat(props.style.pollOptionBackground) || theme.palette.background[theme.palette.mode],
    margin: "5px 0",
    borderRadius: "8px",
    display: "flex",
    width: "100%",
    minWidth: "220px",
    cursor: "pointer",
    position: "relative"
  };
};
exports.pollAnswerStyle = pollAnswerStyle;
var checkIconStyle = function checkIconStyle(props, img, theme) {
  return {
    width: "24px",
    height: "24px",
    marginLeft: "5px",
    WebkitMask: "url(".concat(img, ") center center no-repeat"),
    background: props.style.optionIconTint || theme.palette.accent500[theme.palette.mode]
  };
};
exports.checkIconStyle = checkIconStyle;
var pollPercentStyle = function pollPercentStyle(props, width) {
  var curvedBorders = width === "100%" ? {
    borderRadius: "8px"
  } : {
    borderRadius: "8px 0 0 8px"
  };
  return _objectSpread(_objectSpread({
    maxWidth: "100%",
    width: width,
    height: "34px"
  }, curvedBorders), {}, {
    background: props.style.selectedPollOptionBackground,
    position: "absolute",
    zIndex: "5",
    opacity: "0.8"
  });
};
exports.pollPercentStyle = pollPercentStyle;
var answerWrapperStyle = function answerWrapperStyle(props, theme) {
  var _theme$palette;
  var widthProp = "calc(100% - 40px)";
  return {
    width: "100%",
    height: "34px",
    color: props.style.pollOptionTextColor || (theme === null || theme === void 0 ? void 0 : (_theme$palette = theme.palette) === null || _theme$palette === void 0 ? void 0 : _theme$palette.getAccent()),
    display: "flex",
    alignItems: "center",
    zIndex: "2",
    p: {
      margin: "0",
      width: widthProp,
      minWidth: "75px",
      whiteSpace: "pre-wrap",
      wordWrap: "break-word",
      font: props.style.pollOptionTextFont || (0, _.fontHelper)(theme.typography.subtitle1)
    },
    span: {
      maxWidth: "40px",
      padding: "0px 16px 0px 0px",
      display: "inline-block",
      font: props.style.pollOptionTextFont || (0, _.fontHelper)(theme.typography.subtitle1)
    }
  };
};
exports.answerWrapperStyle = answerWrapperStyle;
var pollOptionTitleStyle = function pollOptionTitleStyle(props, theme) {
  var _theme$palette2;
  return {
    width: "80%",
    marginLeft: "5%",
    font: props.style.pollOptionTextFont || (0, _.fontHelper)(theme.typography.subtitle1),
    color: props.style.pollOptionTextColor || (theme === null || theme === void 0 ? void 0 : (_theme$palette2 = theme.palette) === null || _theme$palette2 === void 0 ? void 0 : _theme$palette2.getAccent()),
    whiteSpace: "pre-wrap",
    wordWrap: "break-word"
  };
};
exports.pollOptionTitleStyle = pollOptionTitleStyle;
var pollOptionPercentTextStyle = function pollOptionPercentTextStyle(props, theme) {
  var _theme$palette3;
  return {
    width: "15%",
    marginRight: "5%",
    font: props.style.votePercentTextFont || (0, _.fontHelper)(theme.typography.subtitle1),
    color: props.style.votePercentTextColor || (theme === null || theme === void 0 ? void 0 : (_theme$palette3 = theme.palette) === null || _theme$palette3 === void 0 ? void 0 : _theme$palette3.getAccent()),
    textAlign: "center"
  };
};
exports.pollOptionPercentTextStyle = pollOptionPercentTextStyle;
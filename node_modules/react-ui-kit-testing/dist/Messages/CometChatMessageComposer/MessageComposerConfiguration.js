"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageComposerConfiguration = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _addCircleFilled = _interopRequireDefault(require("./resources/add-circle-filled.svg"));
var _emoji = _interopRequireDefault(require("./resources/emoji.svg"));
var _sendMessage = _interopRequireDefault(require("./resources/send-message.svg"));
var _closeCircle = _interopRequireDefault(require("./resources/close-circle.svg"));
var _ = require("../");
var _MessagePreviewConfiguration = require("../CometChatMessagePreview/MessagePreviewConfiguration");
var _EmojiKeyboardConfiguration = require("../CometChatEmojiKeyboard/EmojiKeyboardConfiguration");
var _CreatePollConfiguration = require("../CometChatCreatePoll/CreatePollConfiguration");
var _StickerKeyboardConfiguration = require("../CometChatStickerKeyboard/StickerKeyboardConfiguration");
var _Shared = require("../../Shared");
/**
 * @class MessageComposerConfiguration
 * @description MessageComposerConfiguration class is used for defining the MessageComposer templates.
 * @param {String} sendButtonIconURL
 * @param {String} attachmentIconURL
 * @param {String} stickerIconURL
 * @param {String} stickerCloseIconURL
 * @param {String} emojiIconURL
 * @param {String} customOutgoingMessageSound
 * @param {Boolean} hideAttachment
 * @param {Boolean} hideLiveReaction
 * @param {Boolean} hideEmoji
 * @param {Boolean} showSendButton
 * @param {Boolean} enableSoundForMsg
 * @param {Boolean} enableTyping
 * @param {Function} onSendButtonClick
 * @param {Array} messageTypes
 * @param {Array} excludeMessageTypes
 * @param {Object} style
 */
var MessageComposerConfiguration = /*#__PURE__*/(0, _createClass2.default)(function MessageComposerConfiguration(_ref) {
  var _ref$hideAttachment = _ref.hideAttachment,
    hideAttachment = _ref$hideAttachment === void 0 ? false : _ref$hideAttachment,
    _ref$attachmentIconUR = _ref.attachmentIconURL,
    attachmentIconURL = _ref$attachmentIconUR === void 0 ? _addCircleFilled.default : _ref$attachmentIconUR,
    _ref$stickerCloseIcon = _ref.stickerCloseIconURL,
    stickerCloseIconURL = _ref$stickerCloseIcon === void 0 ? _closeCircle.default : _ref$stickerCloseIcon,
    _ref$hideLiveReaction = _ref.hideLiveReaction,
    hideLiveReaction = _ref$hideLiveReaction === void 0 ? false : _ref$hideLiveReaction,
    _ref$hideEmoji = _ref.hideEmoji,
    hideEmoji = _ref$hideEmoji === void 0 ? false : _ref$hideEmoji,
    _ref$emojiIconURL = _ref.emojiIconURL,
    emojiIconURL = _ref$emojiIconURL === void 0 ? _emoji.default : _ref$emojiIconURL,
    _ref$showSendButton = _ref.showSendButton,
    showSendButton = _ref$showSendButton === void 0 ? true : _ref$showSendButton,
    _ref$sendButtonIconUR = _ref.sendButtonIconURL,
    sendButtonIconURL = _ref$sendButtonIconUR === void 0 ? _sendMessage.default : _ref$sendButtonIconUR,
    _ref$onSendButtonClic = _ref.onSendButtonClick,
    onSendButtonClick = _ref$onSendButtonClic === void 0 ? null : _ref$onSendButtonClic,
    _ref$messageTypes = _ref.messageTypes,
    messageTypes = _ref$messageTypes === void 0 ? null : _ref$messageTypes,
    _ref$excludeMessageTy = _ref.excludeMessageTypes,
    excludeMessageTypes = _ref$excludeMessageTy === void 0 ? null : _ref$excludeMessageTy,
    _ref$enableTypingIndi = _ref.enableTypingIndicator,
    enableTypingIndicator = _ref$enableTypingIndi === void 0 ? true : _ref$enableTypingIndi,
    _ref$enableSoundForMe = _ref.enableSoundForMessages,
    enableSoundForMessages = _ref$enableSoundForMe === void 0 ? true : _ref$enableSoundForMe,
    _ref$customOutgoingMe = _ref.customOutgoingMessageSound,
    customOutgoingMessageSound = _ref$customOutgoingMe === void 0 ? null : _ref$customOutgoingMe,
    _ref$style = _ref.style,
    style = _ref$style === void 0 ? new _.MessageComposerStyles({}) : _ref$style,
    _ref$messagePreviewCo = _ref.messagePreviewConfiguration,
    messagePreviewConfiguration = _ref$messagePreviewCo === void 0 ? new _MessagePreviewConfiguration.MessagePreviewConfiguration({}) : _ref$messagePreviewCo,
    _ref$emojiKeyboardCon = _ref.emojiKeyboardConfiguration,
    emojiKeyboardConfiguration = _ref$emojiKeyboardCon === void 0 ? new _EmojiKeyboardConfiguration.EmojiKeyboardConfiguration({}) : _ref$emojiKeyboardCon,
    _ref$stickerKeyboardC = _ref.stickerKeyboardConfiguration,
    stickerKeyboardConfiguration = _ref$stickerKeyboardC === void 0 ? new _StickerKeyboardConfiguration.StickerKeyboardConfiguration({}) : _ref$stickerKeyboardC,
    _ref$createPollConfig = _ref.createPollConfiguration,
    createPollConfiguration = _ref$createPollConfig === void 0 ? new _CreatePollConfiguration.CreatePollConfiguration({}) : _ref$createPollConfig,
    _ref$actionSheetConfi = _ref.actionSheetConfiguration,
    actionSheetConfiguration = _ref$actionSheetConfi === void 0 ? new _Shared.ActionSheetConfiguration({}) : _ref$actionSheetConfi;
  (0, _classCallCheck2.default)(this, MessageComposerConfiguration);
  this.sendButtonIconURL = sendButtonIconURL;
  this.attachmentIconURL = attachmentIconURL;
  this.stickerCloseIconURL = stickerCloseIconURL;
  this.hideAttachment = hideAttachment;
  this.hideLiveReaction = hideLiveReaction;
  this.hideEmoji = hideEmoji;
  this.emojiIconURL = emojiIconURL;
  this.showSendButton = showSendButton;
  this.onSendButtonClick = onSendButtonClick;
  this.messageTypes = messageTypes;
  this.customOutgoingMessageSound = customOutgoingMessageSound;
  this.enableSoundForMessages = enableSoundForMessages;
  this.enableTypingIndicator = enableTypingIndicator;
  this.excludeMessageTypes = excludeMessageTypes;
  this.style = new _.MessageComposerStyles(style !== null && style !== void 0 ? style : {});
  this.messagePreviewConfiguration = new _MessagePreviewConfiguration.MessagePreviewConfiguration(messagePreviewConfiguration !== null && messagePreviewConfiguration !== void 0 ? messagePreviewConfiguration : {});
  this.emojiKeyboardConfiguration = new _EmojiKeyboardConfiguration.EmojiKeyboardConfiguration(emojiKeyboardConfiguration !== null && emojiKeyboardConfiguration !== void 0 ? emojiKeyboardConfiguration : {});
  this.stickerKeyboardConfiguration = new _StickerKeyboardConfiguration.StickerKeyboardConfiguration(stickerKeyboardConfiguration !== null && stickerKeyboardConfiguration !== void 0 ? stickerKeyboardConfiguration : {});
  this.createPollConfiguration = new _CreatePollConfiguration.CreatePollConfiguration(createPollConfiguration !== null && createPollConfiguration !== void 0 ? createPollConfiguration : {});
  this.actionSheetConfiguration = new _Shared.ActionSheetConfiguration(actionSheetConfiguration !== null && actionSheetConfiguration !== void 0 ? actionSheetConfiguration : {});
});
exports.MessageComposerConfiguration = MessageComposerConfiguration;
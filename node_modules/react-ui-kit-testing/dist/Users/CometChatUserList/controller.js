"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserListManager = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _chat = require("@cometchat-pro/chat");
var UserListManager = /*#__PURE__*/function () {
  function UserListManager(limit, searchKeyword, hideBlockedUsers, roles, friendsOnly, status, uids, tags) {
    var _this = this;
    (0, _classCallCheck2.default)(this, UserListManager);
    (0, _defineProperty2.default)(this, "usersRequest", null);
    (0, _defineProperty2.default)(this, "userListenerId", "userlist_" + new Date().getTime());
    (0, _defineProperty2.default)(this, "fetchNextUsers", function () {
      return _this.usersRequest.fetchNext();
    });
    (0, _defineProperty2.default)(this, "attachListeners", function (callback) {
      _chat.CometChat.addUserListener(_this.userListenerId, new _chat.CometChat.UserListener({
        onUserOnline: function onUserOnline(onlineUser) {
          /* when someuser/friend comes online, user will be received here */
          callback(onlineUser);
        },
        onUserOffline: function onUserOffline(offlineUser) {
          /* when someuser/friend went offline, user will be received here */
          callback(offlineUser);
        }
      }));
    });
    if (searchKeyword.trim().length) {
      this.usersRequest = new _chat.CometChat.UsersRequestBuilder().setLimit(limit).hideBlockedUsers(hideBlockedUsers).setRoles(roles).friendsOnly(friendsOnly).setSearchKeyword(searchKeyword).setStatus(status).setTags(tags).setUIDs(uids).build();
    } else {
      this.usersRequest = new _chat.CometChat.UsersRequestBuilder().setLimit(limit).hideBlockedUsers(hideBlockedUsers).setRoles(roles).friendsOnly(friendsOnly).setStatus(status).setTags(tags).setUIDs(uids).build();
    }
  }
  (0, _createClass2.default)(UserListManager, [{
    key: "removeListeners",
    value: function removeListeners() {
      _chat.CometChat.removeUserListener(this.userListenerId);
    }
  }]);
  return UserListManager;
}();
exports.UserListManager = UserListManager;
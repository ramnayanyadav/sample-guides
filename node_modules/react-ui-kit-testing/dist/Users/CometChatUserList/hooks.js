"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Hooks = Hooks;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _chat = require("@cometchat-pro/chat");
var _controller = require("./controller");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function Hooks(loggedInUser, setUserList, userListManager, updateUser, handleUsers, limit, searchKeyword, status, roles, friendsOnly, hideBlockedUsers, tags, uids, errorHandler) {
  _react.default.useEffect(function () {
    _chat.CometChat.getLoggedinUser().then(function (user) {
      var _userListManager$curr;
      loggedInUser.current = _objectSpread({}, user);
      userListManager.current = new _controller.UserListManager(limit, searchKeyword, hideBlockedUsers, roles, friendsOnly, status, uids, tags);
      (_userListManager$curr = userListManager.current) === null || _userListManager$curr === void 0 ? void 0 : _userListManager$curr.attachListeners(updateUser);
      setUserList([]);
      handleUsers();
    }).catch(function (error) {
      errorHandler(error);
    });
    return function () {
      if (userListManager && userListManager.current && userListManager.current.removeUserListener && typeof userListManager.current.removeUserListener === "function") {
        var _userListManager$curr2;
        (_userListManager$curr2 = userListManager.current) === null || _userListManager$curr2 === void 0 ? void 0 : _userListManager$curr2.removeUserListener();
      }
    };
  }, []);
  _react.default.useEffect(function () {
    if (userListManager && userListManager.current) {
      userListManager.current = new _controller.UserListManager(limit, searchKeyword, hideBlockedUsers, roles, friendsOnly, status, uids, tags);
      setUserList([]);
      handleUsers();
    }
  }, [limit, searchKeyword, hideBlockedUsers, roles === null || roles === void 0 ? void 0 : roles.length, friendsOnly, status, uids === null || uids === void 0 ? void 0 : uids.length, tags === null || tags === void 0 ? void 0 : tags.length]);
}
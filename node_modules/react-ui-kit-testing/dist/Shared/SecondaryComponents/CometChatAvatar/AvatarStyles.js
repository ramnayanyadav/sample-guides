"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvatarStyles = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _Shared = require("../../../Shared");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/**
 * @class AvatarStyles
 * @param {String} textFont
 * @param {String} textColor
 * @param {String} outerView
 * @param {String} outerViewSpacing
 */
var AvatarStyles = /*#__PURE__*/function (_BaseStyles) {
  (0, _inherits2.default)(AvatarStyles, _BaseStyles);
  var _super = _createSuper(AvatarStyles);
  function AvatarStyles(_ref) {
    var _this;
    var _ref$textColor = _ref.textColor,
      textColor = _ref$textColor === void 0 ? "" : _ref$textColor,
      _ref$textFont = _ref.textFont,
      textFont = _ref$textFont === void 0 ? "" : _ref$textFont,
      _ref$outerView = _ref.outerView,
      outerView = _ref$outerView === void 0 ? "" : _ref$outerView,
      _ref$outerViewSpacing = _ref.outerViewSpacing,
      outerViewSpacing = _ref$outerViewSpacing === void 0 ? "0px" : _ref$outerViewSpacing,
      _ref$backgroundColor = _ref.backgroundColor,
      backgroundColor = _ref$backgroundColor === void 0 ? "" : _ref$backgroundColor,
      _ref$backgroundSize = _ref.backgroundSize,
      backgroundSize = _ref$backgroundSize === void 0 ? "cover" : _ref$backgroundSize,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? "36px" : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? "36px" : _ref$height,
      background = _ref.background,
      activeBackground = _ref.activeBackground,
      _ref$border = _ref.border,
      border = _ref$border === void 0 ? "" : _ref$border,
      _ref$borderRadius = _ref.borderRadius,
      borderRadius = _ref$borderRadius === void 0 ? "50%" : _ref$borderRadius;
    (0, _classCallCheck2.default)(this, AvatarStyles);
    _this = _super.call(this, {
      width: width,
      height: height,
      background: background,
      activeBackground: activeBackground,
      border: border,
      borderRadius: borderRadius
    });
    _this.textColor = textColor;
    _this.textFont = textFont;
    _this.outerView = outerView;
    _this.outerViewSpacing = outerViewSpacing;
    _this.backgroundColor = backgroundColor;
    _this.backgroundSize = backgroundSize;
    return _this;
  }
  return (0, _createClass2.default)(AvatarStyles);
}(_Shared.BaseStyles);
exports.AvatarStyles = AvatarStyles;